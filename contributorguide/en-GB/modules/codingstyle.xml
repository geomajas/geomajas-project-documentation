<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This file is part of Geomajas, a component framework for building
  ~ rich Internet applications (RIA) with sophisticated capabilities for the
  ~ display, analysis and management of geographic information.
  ~ It is a building block that allows developers to add maps
  ~ and other geographic data capabilities to their web applications.
  ~
  ~ Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<chapter id="codingstyle" lang="en">
  <title>Coding quality and style</title>

  <!--
References
- http://maven.apache.org/developers/conventions/code.html
- http://docs.jboss.org/process-guide/en/html/coding.html
- http://equanda.org/developers.html
- http://svn.collab.net/repos/svn/trunk/www/hacking.html
- http://java.sun.com/docs/codeconv/
- http://geosoft.no/development/javastyle.html (!)
- http://192.220.96.201/essays/java-style/single-page.html
- http://gee.cs.oswego.edu/dl/html/javaCodingStd.html
- http://www.ambysoft.com/essays/javaCodingStandards.html
- http://docs.codehaus.org/display/GEOT/5+Project+Conventions
-->

  <para>As a general note, the coding style and naming conventions should be
  adhered to. Some parts are even checked by the checkstyle maven plugin.
  However, deviations are always allowed when this enhances code
  readability.</para>

  <para>Formatters are available for the style as described here (see bottom
  of document). You can be liberal on applying this on new code, but be
  prudent when applying these to the existing code base. Code style changes
  make revision changes a lot more difficult and should thus be limited. If
  there is a need to reformat existing code, then this should be done in a
  separate commit.</para>

  <section>
    <title>Class, method and variable names</title>

    <para>Rules</para>

    <itemizedlist>
      <listitem>Use meaningful names. Especially class and method names should
      explain their purpose.</listitem>

      <listitem>For class, method and (non-static) variable names, use
      camelCase to separate the words, not underscores. For abbreviations,
      capitalize he first letter, lower case for the others.</listitem>

      <listitem>Class names start with a capital, for example
      "CommandDispatcher".</listitem>

      <listitem>Method and (non-static) variable names start lower case, for
      example "getEmptyCommandResponse".</listitem>

      <listitem>All static variables should have capitalized names with words
      separated by underscores.</listitem>

      <listitem>Package names are all lower case and should be
      singular.</listitem>

      <listitem>Use get/set/isXxx.</listitem>

      <listitem>Abbreviations and acronyms should not be uppercase when used
      as name (for example, use "exportHtml()").</listitem>

      <listitem>All names should be written in English.</listitem>

      <listitem>The terms get/set must be used where an attribute is accessed
      directly.</listitem>

      <listitem>"is" prefix should be used for boolean variables and methods.
      In some cases, when this is more readable, "has", "can" or "should" can
      also be used as prefix.</listitem>

      <listitem>Complement names must be used for complement entities. These
      include get/set, add/remove, create/destroy, start/stop, insert/delete,
      increment/decrement, old/new, begin/end, first/last, up/down, min/max,
      next/previous, old/new, open/close, show/hide, suspend/resume,
      etc.</listitem>

      <listitem>Exception classes should be suffixed with
      Exception.</listitem>
    </itemizedlist>

    <para>Recommendations</para>

    <itemizedlist>
      <listitem>Usually class names are nouns and method names are
      verbs.</listitem>

      <listitem>Generic variables should have the same name as their
      type.</listitem>

      <listitem>Variables with a large scope should have long names, variables
      with a small scope can have short names. Scratch variables used for
      temporary storage or indices are best kept short. A programmer reading
      such variables should be able to assume that its value is not used
      outside a few lines of code. Common scratch variables for integers are
      i, j, k, m, n and for characters c and d.</listitem>

      <listitem>The name of the object is implicit, and should be avoided in a
      method name. For example, use "line.getLength()" instead of
      "line.getLineLength()". The latter might seem natural in the class
      declaration, but proves superfluous in use, as shown in the
      example.</listitem>

      <listitem>The term compute can be used in methods where something is
      computed.</listitem>

      <listitem>The term find can be used in methods where something is looked
      up.</listitem>

      <listitem>The term initialize can be used where an object or a concept
      is established.</listitem>

      <listitem>Plural form should be used on names representing a collection
      of objects.</listitem>

      <listitem>Negated boolean variable names must be avoided.</listitem>

      <listitem>Default interface implementations can be prefixed by Default.
      However, if it is not expected that there will even be another
      implementation, it can be a lot more natural to suffix with "Impl"
      instead.</listitem>

      <listitem>Singleton classes should return their sole instance through
      method getInstance, should have a private constructor and be declared
      final.</listitem>

      <listitem>Functions (methods returning an object) should be named after
      what they return and procedures (void methods) after what they
      do.</listitem>

      <listitem>Data transfer objects sometimes exist in two flavors, one
      which contains the Geomajas geometry dto's and one which contains JTS
      geometry objects. In that case, the variant with the geometry dto's
      should use the natural name, and the variant with JTS geometry objects
      should have a class name which has the "JG" suffix (JG stands for Jts
      Geometry).</listitem>
    </itemizedlist>

    <section><title>Comment</title>Each file should have the correct copyright
    notice at the start of the file. <programlisting>/*
 * This file is part of Geomajas, a component framework for building
 * rich Internet applications (RIA) with sophisticated capabilities for the
 * display, analysis and management of geographic information.
 * It is a building block that allows developers to add maps
 * and other geographic data capabilities to their web applications.
 *
 * Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</programlisting> <para>Note that the end year (shown here is 2010) should
    always be the current year. All headers will be updated at the beginning
    of each year.</para><itemizedlist>
        <listitem>The copyright message should be at the top of the file.
        However, for js files, it is allowed to have the "dojo.provide" line
        above the copyright as this helps for debugging.</listitem>

        <listitem>Each class and interface should have class comments
        indicating the purpose of the class.</listitem>

        <listitem>Public methods should be commented if the meaning is not
        entirely clear from method and parameter names (is it ever?). When the
        method overrides or implements a method, then repeating the javadoc is
        not needed.</listitem>

        <listitem>Comments in the code are recommended when they explain a
        block of code or when they explain why things are done in a certain
        way. Repeating the code in human readable wording is
        wasteful.</listitem>

        <listitem>Use "@todo" comments to indicate shortcuts or hacks which
        should be fixed. Better still is just to do it right and not have the
        shortcut.</listitem>

        <listitem>All comments should be written in English.</listitem>

        <listitem>Comments should be indented relative to their position in
        the code.</listitem>

        <listitem>
          <para>Javadoc comments should be active, not descriptive (for exampe
          on method "getXxx()" the comment could be "Get xxx").</para>
        </listitem>
      </itemizedlist></section>

    <section>
      <title>Claim your code</title>

      <para>Be proud of your code and take responsibility of your changes.
      When making any kind of significant changes (not for reformatting,
      fixing typing errors or renaming), add your full name at the bottom of
      the authors list in the class comments.</para>
    </section>

    <section>
      <title>Code layout</title>

      <para>See the example below</para>

      <programlisting>/*
 * This file is part of Geomajas, a component framework for building
 * rich Internet applications (RIA) with sophisticated capabilities for the
 * display, analysis and management of geographic information.
 * It is a building block that allows developers to add maps
 * and other geographic data capabilities to their web applications.
 *
 * Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */

package org.geomajas.bladibla;

/**
 * Short description of the purpose of this class.
 *
 * @author Author's name
 * @author Another Author's name
 */
@Annotation(param1 = "value1", param2 = "value2")
public class Foo implements Serializable {

    int[] x = new int[] {1, 3, 5, 6, 7, 87, 1213, 2};

    /**
     * Do something
     *
     * @param x some data
     * @param y more data
     */
    public void foo(int x, int y) throws Exception {
        for (int i = 0; i &lt; x; i++) {
            y += (y ^ 0x123) &lt;&lt; 2;
        }
        do {
            try {
                if (0 &lt; x &amp;&amp; x &lt; 10) {
                    while (x != y) {
                        x = f(x * 3 + 5);
                    }
                } else {
                    synchronized (this) {
                        switch (e.getCode()) {
                            //...
                        }
                    }
                }
            }
            catch (MyException e) {}
            finally {
                int[] arr = (int[]) g(y);
                x = y &gt;= 0 ? arr[y] : -1;
            }
        }
        while (true);
    }
}</programlisting>

      <itemizedlist>
        <listitem>The code is written with the right margin at 120 characters
        and lines should not be longer than that if possible.</listitem>

        <listitem>Tabs should be used for all indents. We assume a tab is four
        spaces for determining line length.</listitem>

        <listitem>When lines are split because they are too long, a double
        indentation should be used.</listitem>

        <listitem>Opening braces on the same line as the
        declaration/for/if..., so not aligned with the closing
        brace.</listitem>

        <listitem>No spaces inside brackets.</listitem>

        <listitem>Spaces around operators.</listitem>

        <listitem>No wildcards allowed on import statements.</listitem>

        <listitem>Always a space before braces.</listitem>

        <listitem>Always use braces (and thus multiple lines) for if, while,
        do-while.</listitem>

        <listitem>Array specifiers must be attached to the type not the
        variable.</listitem>

        <listitem>Class variables should never be declared public.</listitem>

        <listitem>Logical units within a block should be separated by one
        blank line.</listitem>
      </itemizedlist>

      <para>We have both an <ulink
      url="geomajas_formatter.xml">eclipse</ulink> and <ulink
      url="geomajas.xml">IntelliJ IDEA</ulink> formatter which can be used.
      However, be careful not to change the entire formatting of a
      class.</para>
    </section>
  </section>
</chapter>
