<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="release" lang="en">
  <title>How to release Geomajas</title>

  <para>The Geomajas project consists of many pieces which each have their own
  release cycle. The most important parts are the back-end, faces and
  plug-ins. The example programs, documentation and and build tools also have
  individual release cycles.</para>

  <para>This chapter tries to explain how to release any of these modules. The
  procedure is similar for all modules, but there are some specific checks to
  be done which only apply for certain parts.</para>

  <para>Make sure you have read through the entire chapter before actually
  attempting a release, so you know what to do and when to do it.</para>

  <section>
    <title>Pre-release checks</title>

    <section>
      <title>Sonatype Checks</title>

      <section>
        <title>Sonatype general</title>

        <para>In order to create a successful release, it is necessary to
        perform a few checks before actually starting the release
        procedure.</para>

        <para>Before actually starting, know that creating a release means
        that the artifact in question will be placed in “staging” in the
        Sonatype nexus repository (which is synced to Maven Central). This in
        turn requires you to have an account, and a PGP signature. So make
        sure you have read both:</para>

        <itemizedlist>
          <listitem>
            <para>Sonatype: <ulink
            url="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide">Sonatype
            OSS Maven Repository Usage Guide</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/">How
            to create a public PGP signature and distribute it on
            hkp://pgp.mit.edu.</ulink></para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Creating PGP key signatures</title>

        <para>Authentication when uploading a release candidate on Sonatype is
        done through the PGP key signatures (as described in the link above).
        In order to create such a key for yourself do the following:</para>

        <orderedlist>
          <listitem>
            <para>Create a key: <code>juven@juven-ubuntu:~$ gpg
            –gen-key</code></para>
          </listitem>

          <listitem>
            <para>List keys:</para>

            <para><code>juven@juven-ubuntu:~$ gpg –list-keys </code></para>

            <para><code>/home/juven/.gnupg/pubring.gpg </code></para>

            <para><code>------------------------------ </code></para>

            <para><code>pub 1024D/C6EED57A 2010-01-13 </code></para>

            <para><code>uid Juven Xu (Juven Xu works at Sonatype)
            &lt;juven@sonatype.com&gt; </code></para>

            <para><code>sub 2048g/D704745C 2010-01-13</code></para>
          </listitem>

          <listitem>
            <para>Upload key: <code>gpg --keyserver hkp://pgp.mit.edu
            --send-keys C6EED57A</code></para>
          </listitem>
        </orderedlist>
      </section>
    </section>

    <section>
      <title>Maven Checks</title>

      <para>Next you have to make sure that you have a personal SVN profile
      configured in your maven settings.xml. Concretely, make sure you have a
      settings.xml file in your maven directory (~/.m2/settings.xml) with the
      following content:</para>

      <programlisting>&lt;settings&gt; 
    &lt;servers&gt; 
        &lt;server&gt; 
            &lt;id&gt;svn.geomajas.org&lt;/id&gt; 
            &lt;username&gt;my SVN username&lt;/username&gt; 
            &lt;password&gt;my SVN password&lt;/password&gt; 
        &lt;/server&gt; 
    &lt;/servers&gt; 
    &lt;server&gt; 
        &lt;id&gt;sonatype-nexus-snapshots&lt;/id&gt; 
        &lt;username&gt;pieterdg&lt;/username&gt; 
        &lt;password&gt;my sonatype pasword&lt;/password&gt; 
    &lt;/server&gt; 
    &lt;server&gt; 
        &lt;id&gt;sonatype-nexus-staging&lt;/id&gt; 
        &lt;username&gt;pieterdg&lt;/username&gt; 
        &lt;password&gt;my sonatype pasword&lt;/password&gt; 
    &lt;/server&gt;
&lt;/settings&gt; </programlisting>
    </section>
  </section>

  <section>
    <title>General steps</title>

    <para>Releasing is done in the following steps, each will be detailed
    below. Do also check the part specific notes below.</para>

    <orderedlist>
      <listitem>
        <para>Prepare release (on trunk)</para>
      </listitem>

      <listitem>
        <para>Put the release in staging</para>
      </listitem>

      <listitem>
        <para>Finish the staging procedure</para>
      </listitem>

      <listitem>
        <para>Start a vote for the release</para>
      </listitem>

      <listitem>
        <para>Count votes</para>
      </listitem>

      <listitem>
        <para>Finish the release</para>
      </listitem>

      <listitem>
        <para>Announce</para>
      </listitem>
    </orderedlist>

    <section>
      <title>Prepare release</title>

      <para>The pre-release checks above only need to be done the first time
      you wish to release a Geomajas artifact. Here we describe the checks
      that need to be done every time a single artifact is to be
      released.</para>

      <para>These checks are the following:</para>

      <itemizedlist>
        <listitem>
          <para>Make sure that there are no references to snapshot
          repositories in the pom.xml files. These must be commented
          out.</para>
        </listitem>

        <listitem>
          <para>Make sure there are no snapshot dependencies in the pom.xml.
          This can often be the case for the showcase application or the maven
          archetypes.</para>
        </listitem>

        <listitem>
          <para>Search for occurrences to the version number (with and without
          -SNAPSHOT" in the part. Fix when needed (not in the pom, this will
          be changed by the release procedure itself).</para>
        </listitem>

        <listitem>
          <para>Warn the Geomajas community that you are about to start a
          release, so they do not commit any changes. Changes in other
          plug-ins than the one you are releasing should not affect the
          release.</para>
        </listitem>

        <listitem>
          <para>Do a "mvn dependency:tree" and check that all dependencies
          (excluding the back-end/plug-in dependencies) are included with the
          license and/or copyright message.</para>
        </listitem>
      </itemizedlist>

      <para>Commit any changes you have had to make.</para>
      
      <para>Create a next version in JIRA, and release the current version. Make sure there exists
      a version for issues that are accepted but not planned to be included in the next release. 
      For example when you want to release version 1.14.0, there should also be a version 1.15.0 
      and "1.16.0 or later".</para>
    </section>

    <section>
      <title>Put the release in staging</title>

      <para>The basic procedure is quite easy: we let the maven release
      plug-in do all the work for us. Essentially, it is a two-step procedure:
      first prepare the release, then perform the release.</para>

      <para>Make sure you start with a fresh checkout from trunk before
      actually attempting to release anything. Checkout command:</para>

      <programlisting>svn checkout https://svn.geomajas.org/majas/trunk &lt;destination folder&gt;</programlisting>

      <para>It might be that after the checkout you have to make sure that you
      have write access to all files and folders within the newly created
      &lt;destination folder&gt;.</para>

      <section>
        <title>Maven release-prepare</title>

        <para>Go to the top folder of the plug-in you want to release and
        execute the following maven command:</para>

        <programlisting>mvn -DdevelopmentVersion=1.8.0-SNAPSHOT release:prepare</programlisting>

        <para>The version is not strictly required, but makes it easier. It
        points to the NEXT snapshot (after the release).</para>

        <para>Should something go wrong, calling the release:prepare again,
        will take off where the previous call left off. In order to reset
        everything (mainly the committed changes), you can execute the
        following command:</para>

        <programlisting>mvn release:rollback</programlisting>

        <para>The release:prepare will execute the following steps (taken from
        the maven release plug-in website):</para>

        <orderedlist>
          <listitem>
            <para>Check that there are no SNAPSHOT dependencies</para>
          </listitem>

          <listitem>
            <para>Change the version in the POMs from x-SNAPSHOT to a new
            version (you will be prompted for the versions to use)</para>
          </listitem>

          <listitem>
            <para>Transform the SCM information in the POM to include the
            final destination of the tag</para>
          </listitem>

          <listitem>
            <para>Run the project tests against the modified POMs to confirm
            everything is in working order</para>
          </listitem>

          <listitem>
            <para>Commit the modified POMs</para>
          </listitem>

          <listitem>
            <para>Tag the code in the SCM with a version name (this will be
            prompted for)</para>
          </listitem>

          <listitem>
            <para>Bump the version in the POMs to a new value y-SNAPSHOT
            (these values will also be prompted for)</para>
          </listitem>

          <listitem>
            <para>Commit the modified POMs</para>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>Maven release-perform</title>

        <para>The next step is to actually let maven perform the release. This
        can be done with the following command:</para>

        <programlisting>mvn release:perform</programlisting>

        <para>Note that you will be asked to give your PGP passphrase. Now go
        to the sonatype nexus (<ulink
        url="http://oss.sonatype.org/">http://oss.sonatype.org/</ulink>) and
        log in with your personal account. There, in the staging repositories,
        you will find the release in staging.</para>
      </section>
    </section>

    <section>
      <title>Finish the staging procedure</title>

      <para>Now that the release has been placing in the staging area on
      sonatype, we can work towards finishing the staging procedure. In order
      to do so, the following steps need to be undertaken:</para>

      <itemizedlist>
        <listitem>
          <para>Update trunk. Check if the versions have rolled to the next
          snapshot version.</para>
        </listitem>

        <listitem>
          <para><emphasis>(Only for final releases, not for
          milstones!)</emphasis> For each of the modules in the part, the
          src/main/resources/api.txt file needs to be updated. The header at
          the top should remain, with the version updated. The rest of the
          file needs to be replaced by the contents of target/api.txt. This
          api.txt file must reflect the API status of the release so that it
          can be used for API regression checking.</para>
        </listitem>

        <listitem>
          <para>The aggregate.sh need to be updated for the new snapshot
          versions respectively.</para>
        </listitem>

        <listitem>
          <para>In JIRA, create the next version for the project if that did
          not yet exist. Close any issues which are fixed in this release but
          only marked as resolved. Mark the project as released, moving issues
          which are not fixed to the next version.</para>
        </listitem>

        <listitem>
          <para>Login to <ulink
          url="http://oss.sonatype.org/">http://oss.sonatype.org/</ulink>.
          Check if the correct artifacts are in the staging repository, and
          check their contents. From sonatype, you can download the artifacts,
          and see if everything is fine (correct version, javadoc present,
          ...). If all is well, close it.</para>

          <para>The artifacts are now ready for testing. When staging several
          parts, it is recommended to close each separately. This allows more
          fine-grained promotion and/or dropping of artifacts.</para>
        </listitem>

        <listitem>
          <para>Search for all occurrences to the previous snapshot version in
          trunk, replace by the released version (yes this will cause a
          dependency on the staged artifacts).</para>

          <screenshot>
            <screeninfo>Sonatype staging area</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/sonatype_staging.png" width="100%" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Start a vote for the release</title>

      <para>Start a vote on majas-dev for release of the part. The voting
      period should be at least two working days and span a weekend. The
      voting message should read something like "VOTE: release blabla plug-in
      v1.0.0" (please note capitalization).</para>

      <para>The body of the vote needs to include:</para>

      <itemizedlist>
        <listitem>
          <para>Short introduction to the released part.</para>
        </listitem>

        <listitem>
          <para>Major improvements of the release.</para>
        </listitem>

        <listitem>
          <para>Link to release notes.</para>
        </listitem>

        <listitem>
          <para>Link to migration notes if any.</para>
        </listitem>

        <listitem>
          <para>An indication of how to test, typically a text like the
          following will do:<blockquote>
              <para>The artifacts are available in the staging repository:
              https://oss.sonatype.org/content/groups/staging</para>

              <para>To make sure you can use the artifacts you have to add
              this repository in your local maven settings:
              ~/.m2/settings.xml:</para>

              <para><programlisting>&lt;settigs&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;mine&lt;/id&gt; 
      &lt;!-- add staging repository --&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;oss-staging&lt;/id&gt;
          &lt;url&gt;https://oss.sonatype.org/content/groups/staging&lt;/url&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt; 
    &lt;/profile&gt;
  &lt;/profiles&gt;
  &lt;activeProfiles&gt;
    &lt;activeProfile&gt;mine&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;</programlisting></para>
            </blockquote></para>
        </listitem>

        <listitem>
          <para>Your vote.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Count votes</title>

      <para>When the voting period has ended, count the votes. The vote is
      successful when there are at lease two +1 binding votes and no -1
      binding votes.</para>

      <para>Reply to your original vote message on majas-dev, change the title
      to start with "VOTE SUCCESSFUL" or "VOTE FAILED" (please note
      capitalization). In the body of the vote, include the full name of all
      voters and their vote.</para>
    </section>

    <section>
      <title>Finish the release</title>

      <para>When the vote failed, drop the repository. All the references to
      the release version in trunk need to be rolled to the new snapshot
      version. The version number is skipped. The release date in JIRA is
      actually the staging date.</para>

      <para>The geomajas-dep pom and aggregate.sh need to be updated for the
      newly released versions respectively.</para>
    </section>

    <section>
      <title>Announce</title>

      <para>Build announcement message, it is recommended this contains the
      following:</para>

      <itemizedlist>
        <listitem>
          <para>Short introduction to the released part.</para>
        </listitem>

        <listitem>
          <para>Major improvements in the release.</para>
        </listitem>

        <listitem>
          <para>Link to release notes.</para>
        </listitem>

        <listitem>
          <para>Link to migration notes if any.</para>
        </listitem>
      </itemizedlist>

      <para>Send announcement to majas-dev (plain text).</para>

      <para>Publish on general forum.</para>

      <para>Announce on freecode.</para>

      <para>Create news item on geomajas.org site.</para>

      <para>Send mail to jan.pote@geosparc.com to allow sending a press
      release.</para>
    </section>
  </section>

  <section>
    <title>Additional notes for releasing the back-end</title>

    <para>When releasing the back-end core, you will have problems building
    the javadocs. Once the "release:perform" failed, execute the following
    steps.</para>

    <programlisting>cd target/checkout
mvn install
cd ../..
mvn release:perform</programlisting>

    <para>At this moment, the back-end should be available in sonatype.
    Download one of the jars and check the contents to see if all is well. If
    it is, close the staging repository to place the back-end officially in
    staging.</para>

    <para>When releasing the back-end, you must also be aware that this
    releases only the modules within the backend folder. The following modules
    might need to be released separately:</para>

    <itemizedlist>
      <listitem>
        <para>documentation (user guide, contributor guide, getting started
        guide)</para>
      </listitem>

      <listitem>
        <para>geomajas-dep</para>
      </listitem>

      <listitem>
        <para>GWT client</para>
      </listitem>

      <listitem>
        <para>GWT archetype</para>
      </listitem>

      <listitem>
        <para>GWT showcase</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Announce</title>

      <para>Create download image for this version (278x61 pixels).</para>

      <para>Add release on download page (remember to name the page
      "release_1.5.0" with correct version number).</para>

      <para>Update the download block on the Geomajas site.</para>

      <para>Update the javadoc links on the documentation page.</para>

      <para>Update Geomajas wikipedia page.</para>
    </section>

    <section>
      <title>Documentation</title>

      <para>The documentation uses the example applications for extracting
      code which is included in the manual. This is a circular dependency when
      it includes the part to be released. It may be useful to do a local
      build using the next release version locally, to allow the release the
      work for the documentation part. You can do the actual release of the
      example application at the end.</para>
    </section>
  </section>

  <section>
    <title>Additional notes for releasing the GWT face</title>

    <para>Before releasing the GWT face, make sure that the “getVersion”
    method in the Geomajas.java class has been set to the correct
    version.</para>
  </section>

  <section>
    <title>Additional notes for releasing the GTW archetype</title>

    <para>The GWT archetype is usually released after the release of the GWT
    client. Before actually starting, make sure that the dependency versions
    are correct in:</para>

    <para><code>geomajas-gwt-archetype/src/main/resources/archetype-resources/pom.xml</code></para>

    <para>After the archetype has been released, one must be able to test it
    while it is in staging. In order to do so the pointer to the correct
    repository for the archetype must used. This pointer is provided by the
    file: <ulink
    url="http://files.geomajas.org/archetype-staging.xml">http://files.geomajas.org/archetype-staging.xml</ulink></para>

    <para>This file must therefore be updated to make use of the newest
    version. It should look like:</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
&lt;archetype-catalog 
  xmlns="http://maven.apache.org/plugins/maven-archetype-plugin/archetype-catalog/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="http://maven.apache.org/plugins/maven-archetype-plugin/archetype-catalog/1.0.0
  http://maven.apache.org/xsd/archetype-catalog-1.0.0.xsd"&gt; 
  &lt;archetypes&gt; 
    &lt;archetype&gt; 
      &lt;groupId&gt;org.geomajas&lt;/groupId&gt; 
      &lt;artifactId&gt;geomajas-gwt-archetype&lt;/artifactId&gt; 
      &lt;version&gt;1.8.0&lt;/version&gt; 
      &lt;description&gt;Geomajas GWT application archetype&lt;/description&gt; 
      &lt;repository&gt;https://oss.sonatype.org/content/groups/staging&lt;/repository&gt; 
    &lt;/archetype&gt; 
  &lt;/archetypes&gt; 
&lt;/archetype-catalog&gt;</programlisting>

    <para>The correct command to create a new Geomajas project using the
    archetype in staging is:</para>

    <programlisting>mvn archetype:generate -DarchetypeCatalog=http://files.geomajas.org/archetype-staging.xml</programlisting>

    <para>Make sure that this command is also mentioned in the vote mail on
    the majas-dev mailing list.</para>

    <section>
      <title>Finish the staging procedure</title>

      <para>On gaya,
      update/var/www/files.geomajas.org/htdocs/archetype-latest.xml. Make sure
      the version is correct.</para>
    </section>

    <section>
      <title>Start a vote for the release</title>

      <para>On gaya,
      update/var/www/files.geomajas.org/htdocs/archetype-staging.xml. Make
      sure the version is correct.</para>

      <para>Include the command to try the archetype in the vote
      message.</para>

      <para>It is recommended to start this vote only when all modules which
      are referenced are already released. In that case, you don't have to
      mention the staging repository in the vote message.</para>
    </section>

    <section>
      <title>Finish the release</title>

      <para>On gaya,
      update/var/www/files.geomajas.org/htdocs/archetype-catalog.xml. Make
      sure the version is correct.</para>
    </section>
  </section>

  <section>
    <title>Additional notes for releasing the GWT showcase</title>

    <para>Just like the geomajas-dep and the archetype, the showcase must be
    built upon the new stable releases of the back-end and GWT client.</para>

    <section>
      <title>Finish the release</title>

      <para>Upload war files to sourceforge download area.</para>

      <para>Update the showcase on gaya. Make sure the Google API key is
      set.</para>
    </section>
  </section>

  <section>
    <title>Additional notes for releasing Geomajas-dep</title>

    <para>Update the aggregate.sh as well as the dependencies in the pom
    before releasing. Don't forget the the version of geomajas-dep should
    reflect the &lt;major&gt;.&lt;year&gt;.&lt;week&gt;, where the week number
    should be even. Example: 1.11.4, means the 4th week in 2011. The major
    number should be equal to the back-end version referenced in the
    pom.xml.</para>
  </section>

  <section>
    <title>Possible problems and solutions</title>

    <para>When releasing the back-end core, there may be a problem building
    the javadocs. The solution can be to do a local build of the back-end
    using the next release version before doing the actual release.</para>

    <para>The documentation uses the example applications for extracting code
    which is included in the manual. Sometimes (it shouldn't) this is a
    circular dependency when it includes the part to be released. It may be
    useful to do a local build using the next release version locally, to
    allow the release the work for the documentation part. You can do the
    actual release of the example application at the end.</para>
  </section>

  <section>
    <title>Example announcement</title>

    <para>title: Geomajas <emphasis>1.5.0</emphasis> <emphasis>technology
    preview/release candidate/stable </emphasis> released</para>

    <para>The Geomajas project is proud to release Geomajas 1.5.0, a
    technology preview showcasing the progress we are making towards our next
    stable build.</para>

    <para>The major advances in this version include <emphasis>(indicate major
    contributors when appropriate)</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>modularization of the system</para>
      </listitem>

      <listitem>
        <para>introduction of a GWT face</para>
      </listitem>
    </itemizedlist>

    <para>For the full list of changes, see
    http://jira.geomajas.org/jira/secure/ReleaseNote.jspa?version=10131&amp;styleName=Html&amp;projectId=10000&amp;Create=Create</para>

    <para>Documentation for this release can be found at
    http://files.geomajas.org/maven/1.5.0/geomajas/userguide.html .</para>

    <para>Download links can be found at http://geomajas.org/release_1.5.0
    .</para>

    <para>For the next release we plan to include the following
    features</para>

    <itemizedlist>
      <listitem>
        <para>absorb CO2 from the air to reduce global warming</para>
      </listitem>

      <listitem>
        <para>remove need for system to be powered</para>
      </listitem>
    </itemizedlist>

    <para>Please note that this is an unstable release, all the new features
    since the previous stable release may still change and we some new bugs
    may have been introduced.</para>

    <para>If you want to help us, join the discussions on the developer list,
    list bugs in jira and make feature requests in our fora. See
    http://www.geomajas.org/gis-development .</para>

    <para>Geomajas is the extensible open source web mapping framework,
    enabling integrated GIS solutions for businesses and government.</para>
  </section>
</chapter>
