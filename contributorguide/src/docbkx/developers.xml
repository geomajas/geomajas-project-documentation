<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2015 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="developers" lang="en">
  <title>Developers information</title>

  <section id="maveninfo">
    <title>maven compilation, targets, profiles, variables</title>

    <para>The source code of each Geomajas project contains one main pom which
    allows building of this project. Projects may contain multiple modules and
    examples. You can choose to build modules individually.</para>

    <para>You can build projects and/or modules using</para>

    <para><programlisting>mvn install</programlisting></para>

    <section id="GWTbuild">
      <title>GWT build</title>

      <para>For faster compilation during testing (when not using development
      mode), it can be useful to compile only for the browser used for
      testing. This will reduce the number of compilation steps by a factor 6.
      Removing supported languages can further remove compilation steps.
      Include the following excerpt in your <code>Xxx.gwt.xml</code> file to
      set your target browser.</para>

      <para><programlisting>&lt;!-- set target browser to compile for, use this to limit to the browser used for testing --&gt;
&lt;!-- where value = "ie6/opera/gecko1_8/safari/gecko" , "gecko1_8" is FireFox 3 --&gt;
&lt;set-property name="user.agent" value="gecko1_8" /&gt;</programlisting>Alternatively
      you can use the collapse-all-properties setting, this will generate a
      single gwt compilation, without specific browsers optimalisations.
      Include the following excerpt in your <code>Xxx.gwt.xml </code>file to
      activate the single compilation mode.<programlisting>&lt;collapse-all-properties /&gt;</programlisting></para>
    </section>

    <section id="runexample">
      <title>Running the example applications</title>

      <para>Once you have done a "<code>mvn install</code>" on either the
      entire tree or an "example" directory, you can use maven to run the
      example applications.</para>

      <para>For the GWT client projects, you have three options. First, go to
      the example directory, e.g. "geomajas-project-client-gwt2/example" for
      GWT2 client showcase. Then,</para>

      <orderedlist>
        <listitem>you can run the application in development mode using
        <programlisting>mvn gwt:run</programlisting></listitem>

        <note>
          <para>Due to classpath problems and the gwt-maven-plugin which does
          not properly handle excluded dependencies (the "provided" scope),
          this can fail on some systems.</para>
        </note>

        <listitem>you can also use jetty to run the normally built
        application<programlisting>mvn jetty:run</programlisting></listitem>

        <listitem>you can run the actual war using <programlisting>mvn jetty:run-war</programlisting><note>
            <para>It can be advisable to run "mvn clean" between "gwt:run" and
            "jetty:run-war" or the classpath problem from the previous
            footnote may appear again.</para>
          </note></listitem>
      </orderedlist>
    </section>
  </section>

  <section id="docs">
    <title>Documentation</title>

    <para>The general documentation is split in three books.</para>

    <para><itemizedlist>
        <listitem>
          <para>developers guide: guide for developer who want to use Geomajas
          in their application.</para>
        </listitem>

        <listitem>
          <para>contributors guide: guide for people who want to contribute to
          the project or want to know more about the functioning of the
          project (this one).</para>
        </listitem>

        <listitem>
          <para>end user guides: documentation for end users of applications
          built using Geomajas, based on the example (quickstart)
          applications.</para>
        </listitem>
      </itemizedlist></para>

    <para>Apart from that, each project and each plug-in has their own
    documentation.</para>

    <para>All documentation is written in docbook format to allow both PDF and
    HTML output formats. The sources can be found in the "documentation"
    directory of the project.</para>

    <para>For editing the docbook files, we recommend using <ulink
    url="http://www.xmlmind.com/xmleditor/">XMLMind</ulink>. The personal
    version (4.5.1) is free and can (at the time of writing) be used for
    editing open source documentation.</para>

    <para>The docbook files are currently formatted using XMLMind. When using
    another tool for editing, please keep the current formatting to assure
    diffs remain usable.</para>

    <para>The documentation includes a lot of examples which are excerpts from
    the source of the example applications. This prevents copy-paste mistakes.
    The build process for the documentation automatically updates these
    excepts. The directories which have to be scanned for excepts are
    specified in the pom. When this includes code which is not in the current
    versioned entity (the root directory for the client project or plug-in),
    then the source needs to be obtained from a dependency and unpacked.
    Excerpts can be annotated using annotations like</para>

    <para><programlisting>&lt;!-- @extract-start AllowAllSecurity, Allow full access to everybody --&gt;
&lt;bean name="security.securityInfo" class="org.geomajas.security.SecurityInfo"&gt;
    &lt;property name="loopAllServices" value="false"/&gt;
&lt;/bean&gt;
&lt;!-- @extract-end --&gt;</programlisting></para>

    <para>for XML or</para>

    <para><programlisting>// @extract-start filename, title
for (String line : lines) {
    // do something
}
// @extract-end</programlisting></para>

    <para>for java files. The start annotation includes the filename which
    should be used (all files are placed in the "listing" directory) and
    optionally a title for the example.</para>
  </section>

  <section id="APIcontract">
    <title>API contract</title>

    <para>The Geomajas project has a very strong API contract. To assure the
    project adheres to this contract, we have the following
    requirements;</para>

    <para><itemizedlist>
        <listitem>
          <para>No API classes or interfaces may be removed.</para>
        </listitem>

        <listitem>
          <para>No API classes or interfaces may be renamed.</para>
        </listitem>

        <listitem>
          <para>No API classes or interfaces may have their package name
          modified.</para>
        </listitem>

        <listitem>
          <para>No API methods may be removed.</para>
        </listitem>

        <listitem>
          <para>No API methods may have their signature changed.</para>
        </listitem>

        <listitem>
          <para>No methods may be added to classes annotated using
          "<code>@<code>UserImplemented</code></code>".</para>
        </listitem>

        <listitem>
          <para>Each class on which a "@Api" annotation is added should have a
          "@since" javadoc comment.</para>
        </listitem>

        <listitem>
          <para>Each method on which a "@Api" annotation is added should have
          a "@since" javadoc comment.</para>
        </listitem>

        <listitem>
          <para>Each public method which is added in a class which is
          annotated with "@Api(allMethods = true)", should have a "@since"
          javadoc comment.</para>
        </listitem>
      </itemizedlist></para>

    <para>The checkstyle configuration which is used for the project (which is
    defined in the geomajas-parent parent) tries to check the API contract.
    This required a api.txt file in src/main/resources which contains the API
    for the previous release version. The API for the compiled version is put
    in target/api.txt.</para>

    <para>Note that apart from the class and method signatures, the behaviour
    should also remain constant (especially when documented or tested). Just
    keep a method and throwing <code>NotImplementedException</code> cannot be
    considered "maintaining a stable API".</para>
  </section>

  <section id="versioning">
    <title>Versioning</title>

    <para>Version have a major.minor.patch structure.</para>

    <itemizedlist>
      <listitem>
         major: indicates that this release has major advances over previous releases. New major versions do not need to be backwards compatible. 
      </listitem>

      <listitem>
         minor: indicates that there are important new features that do not break compatibility with previous versions with the same major number. Even minor versions are used for "stable" versions which will be supported by Geosparc. Odd minor versions are used for work-in-progress and stabilisation efforts. 
      </listitem>

      <listitem>
         patch: bugfixes and smaller improvements.

        <text />
      </listitem>
    </itemizedlist>

    <para>Milestone releases have the same
    major.minor.patch structure, followed by a serial number -Mn, for example
    1.0.0-M1. Milestone releases should be avoided and are only allowed in the
    case that a regular release is not possible, It should be followed by a
    regular release as soon as possible.</para>
  </section>

  <section id="commits">
    <title>Git, commits</title>

    <para>Development of the "latest-and-greatest" version happens in the
    "master" branch.</para>

    <para>Continued development on earlier versions (when not
    "latest-and-greatest") occur in branches with the future version number as
    name.</para>

    <para>When a release is cut, a tag with the release version as name is
    created. The release should be built from the tagged files.</para>

    <para>After each commit, the system should still compile and all test
    cases should still succeed. There is a continuous integration engine
    (Jenkins) which verifies this and send messages to the commit mailing list
    on failures.</para>

    <section>
      <title>Github</title>

      <para>Geomajas uses Github as Source Code Management system, the source
      code can be accessed at <link
      linkend="???">https://github.com/geomajas</link>.</para>
    </section>

    <section>
      <title>Commits, Forks, Branches an Pull requests</title>

      <para>Anybody can commit to Geomajas, this is easy: just fork the
      project (or create a branch if you have commit rights), apply your
      changes and create a pull request. The pull request will be reviewed by
      the community, if it is found a worthy addition to the project it will
      be merged into master. The reviewing happens by a voting process.</para>

      <section>
        <title>Commits</title>

        <para>New committers need to sign an agreement which hands over
        copyright to Geosparc, alternatively they need to state in the pull
        request that <quote>I have read and agree with the Geomajas CLA for
        the contents of this pull request</quote>.</para>

        <para>All Git commits should include the JIRA issue number at the
        start of the commit message, and a short description of the work done.
        The JIRA issue number allows linking the commits with the issues (as
        can be seen in JIRA), the short message allows persons to know what is
        happening without referring to JIRA. The only times JIRA issue number
        are not needed is for making "obvious" changes like fixing
        typos.</para>

        <para>Commits should be grouped by issue as much as possible/sensible
        (better two commits than one commit for fixing two issues, better one
        commit of five files than five commits of one file (for one
        issue)).</para>

        <para>After each commit, the system should still compile and all test
        cases should still succeed.</para>

        <para>There is a continuous integration engine (Jenkins/Travis-ci)
        which verifies this and sends messages to the commit mailing list on
        failures.</para>

        <para>Regular comitters can be assigned commit rights (see
        below).</para>
      </section>

      <section>
        <title>Forks and Branches</title>

        <para>All commits should be done in branches or on forks.
			New branches are best started from the current master branch of the project.
			Please use the following naming convention for branches:
			initials of developer + the JIRA issue key + a short description of the work.
			If developer John Doe wants to work on issue ISSUE-52, the branch name should be like:</para>
		  <programlisting>jd-ISSUE-52_bugFixOnImpl</programlisting>
      </section>

      <section>
        <title>Pull requests</title>

        <para>Please check that everything builds before opening a pull
        request. After opening this pull request you can notify the community
        by forwarding the request to the developer mailing list.</para>

        <para>Pull requests need to be voted, this can happen on the
        mailing list thread, or in the comments of the pull request on Github.
        The voting process has following rules:</para>

        <itemizedlist>
          <listitem>
            <para>Everybody is free to vote</para>
          </listitem>

          <listitem>
            <para>Pull requests require two +1 binding - PSC member - votes (bugfix only needs one)
            and no -1 binding votes.</para>
          </listitem>

          <listitem>
            <para>Pull requests (except bugfixes) should stay open for at
            least 48 hours to allow voting, if additional commits are added to
            the pull request the vote duration is extended to 48 hours after
            the last commit time</para>
          </listitem>

          <listitem>
            <para>Everybody with commit rights can merge pull requests, the
            vote count should be added to the comments when merging</para>
          </listitem>
        </itemizedlist>
		  <para>The JIRA issue associated with the pull request should be and remain in status IN PROGRESS, with the
		  requesting developer assigned to it. Only when the pull request vote has been accepted,
		  the JIRA issue should be resolved with status FIXED.</para>
		  <para>When a vote is successful, the pull request can be merged. The working branch that is merged
		  into master will be deleted immediately.</para>
      </section>
		<section>
			<title>Stale branches on GitHub</title>
			<para>The number of working branches on a git project can be quite high.
				It is advisable that only active branches are present on a git repository.
				This avoids good code getting lost and urges developers to let finish work that has started.</para>
			<para>Therefore, the Geomajas community will regularly try to clean up
				the inactive branches on the different repositories.
				GitHub uses term 'stale' for a branches that have not been pushed to in the last three months.
			When a branch becomes stale, the community will take action:</para>
			<itemizedlist>
				<listitem>
					<para>In case stale branch is 0 commits ahead of master
						- i.e. no code in the branch that is not in master - ,
						the branch will be removed without notifying the owner.</para>
				</listitem>
				<listitem>
					<para>In case stale branch is some commits ahead of master
						- i.e. there is some code in the branch that is not in master - ,
						the branch owner will be notified by mail. The owner will be asked to
						take some action to review the uncommitted code and make a pull request if appropriate.</para>
				</listitem>
			</itemizedlist>
		</section>
    </section>
  </section>

  <section id="coding">
    <title>Coding</title>

    <para>Note that details about coding style and naming are on the <xref
        linkend="codingstyle">
         coding style 
      </xref> page.</para>

    <section id="logging">
      <title>Logging</title>

      <itemizedlist>
        <listitem>
          <para>When inserting debug statements, parameterized messages should
          be used to prevent the need/usefulness of
          <code>isDebugEnabled()</code>.</para>
        </listitem>

        <listitem>
           all logging is done through slf4j, logger is created using 

          <programlisting>private final Logger log = LoggerFactory.getLogger( ContainingClassName.class );</programlisting>

           
        </listitem>

        <listitem>
          <para>all client side logging is done via java logging, logger is
          created using</para>

          <para><programlisting>import java.util.logging.Level;
import java.util.logging.Logger;
 
private static Logger logger = Logger.getLogger(DomTileLevelLayerRenderer.class.getName());
...
logger.log(Level.INFO, "Rendering " + renderingInfo.getView().getResolution());</programlisting></para>
        </listitem>

        <listitem>
           logging levels 

          <table>
            <title>logging levels</title>

            <tgroup cols="3">
              <thead>
                <row>
                  <entry align="center">log level</entry>

                  <entry align="center">default on</entry>

                  <entry>use</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>ERROR</entry>

                  <entry>yes</entry>

                  <entry>major problems, should always be visible in logs and
                  are likely to require action from a person (to fix the
                  condition or assure it does not happen again). Indicates
                  that something is seriously wrong.</entry>
                </row>

                <row>
                  <entry>WARN</entry>

                  <entry>yes</entry>

                  <entry>warning about potential problems. Should always be
                  visible in logs and a person will probably need to assess
                  whether this is harmless or should be treated as an
                  error.</entry>
                </row>

                <row>
                  <entry>INFO</entry>

                  <entry>yes</entry>

                  <entry>important information. You can assume this level is
                  on in production, so it should be carefully considered
                  whether this level is appropriate. In general only used to
                  indicate service status (started, stopped).</entry>
                </row>

                <row>
                  <entry>DEBUG</entry>

                  <entry>no</entry>

                  <entry>logging information which is detailed enough to know
                  what is happening in the system, without flooding the
                  logs.</entry>
                </row>

                <row>
                  <entry>TRACE</entry>

                  <entry>no</entry>

                  <entry>very detailed logging, probably only making sense to
                  the developer of the code.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

           
        </listitem>

        <listitem>
           When an exception is caught and (another exception) thrown you should not log the exception. You should however include the cause in the newly thrown exception. 
        </listitem>
      </itemizedlist>
    </section>

    <section id="unittesting">
      <title>Unit testing</title>

      <para>Unit testing: At least each class implementing the public API
      should have a unit test, testing all methods. For testing JUnit is
      used.</para>

      <itemizedlist>
        <listitem>
           Advantages of unit testing: 

          <itemizedlist>
            <listitem>
              <para>Capturing a <ulink
              url="http://jira.geomajas.org/">JIRA</ulink> bug report in a
              reproducible manner.</para>
            </listitem>

            <listitem>Allowing you to specify exactly the behaviour you want,
            before you start coding.</listitem>
          </itemizedlist>

           
        </listitem>

        <listitem>
           How unit testing should be done: 

          <itemizedlist>
            <listitem>If you are testing
            src/main/java/org/geomajas/ToBeTestedClass.java, create a class
            src/test/java/org/geomajas/ToBeTestedClassTest.java. Actual test
            methods have a name starting with "test". The class itself should
            extend jnit.framework.TestCase.</listitem>

            <listitem>
              <para>The test will automatically be run when running "<code>mvn
              install</code>".</para>
            </listitem>
          </itemizedlist>

           
        </listitem>

        <listitem>
           Integration tests should also be provided. These can also be used for testing the user interface (thanks to selenium). 
        </listitem>
      </itemizedlist>
    </section>

    <section id="exceptionhandling">
      <title>Exception handling</title>

      <para>*Never* throw away exception, either log them or throw them again
      (possibly wrapped). Do not log and throw, this only clutters log files
      with duplicate exceptions.</para>

      <para>Do not wrap exceptions unnecessarily (so no
      <code>GeomajasException</code> caused by a
      <code>GeomajasException</code>) unless you add additional information in
      the message.</para>

      <para>When wrapping an exception, always include the cause.</para>
    </section>

    <section id="refactoring">
      <title>Refactoring</title>

      <para>Changes in the (public) API use a "deprecate, then remove" cycle.
      It should be marked "deprecated" in at least one minor version before it
      can be removed in the next major version.</para>
    </section>

    <section id="fileencoding">
      <title>File encoding</title>

      <para>All source files, including .properties files should use UTF-8
      encoding.</para>
    </section>

    <section id="dev-other">
      <title>Other</title>

      <para>For the directory structure and file locations, we follow standard
      maven conventions (see
      http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html).</para>
    </section>
  </section>
</chapter>
