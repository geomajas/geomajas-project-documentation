<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2011 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="part-installation">
  <title>Setting up your development environment</title>

  <section id="install-prereq">
    <title>Prerequisites</title>

    <section id="install-maven">
      <title>Maven</title>

      <para>Geomajas is uses the Apache Maven project management tool for its
      build and documentation process. Maven can be downloaded from the Apache
      project site: <ulink
      url="http://maven.apache.org">http://maven.apache.org </ulink>
      Installing Maven is quite simple: just unzip the distribution file in
      the directory of your choice and make some environment changes so you
      can access the executable. More information for your specific OS can be
      found at the bottom of <ulink
      url="http://maven.apache.org/download.html">http://maven.apache.org/download.html
      </ulink></para>
    </section>

    <section id="install-svn">
      <title>Subversion</title>

      <para>Geomajas uses subversion as its version control system. Accessing
      subversion requires you to at least install a compatible client. There
      are numerous client solutions available, some as standalone clients and
      some as IDE plug-ins:</para>

      <itemizedlist>
        <listitem>
          <para>Tortoise SVN: an excellent SVN client for Windows (<ulink
          url="http://tortoisesvn.tigris.org/">http://tortoisesvn.tigris.org/</ulink>)</para>
        </listitem>

        <listitem>
          <para>Subversive: Eclipse plug-in, can be found on the following
          Eclipse update site ( <ulink
          url="http://download.eclipse.org/releases/galileo">
          http://download.eclipse.org/releases/helios</ulink> &gt;
          Collaboration Tools)</para>
        </listitem>

        <listitem>
          <para>Subclipse: Eclipse plug-in, can be found on the following
          Eclipse update site (<ulink
          url="http://subclipse.tigris.org/update_1.6.x">
          http://subclipse.tigris.org/update_1.6.x</ulink>)</para>
        </listitem>

        <listitem>
          <para>IDEA SVN plug-in (part of the default IDEA
          installation)</para>
        </listitem>
      </itemizedlist>

      <para>The Geomajas repository can be found at <ulink
      url="https://svn.geomajas.org/majas">https://svn.geomajas.org/majas</ulink>.
      The standard SVN repository layout is followed: trunk, tags and
      branches. For the latest and greatest code (including GWT face) you
      should check out the trunk:<ulink
      url="https://svn.geomajas.org/majas/trunk">https://svn.geomajas.org/majas/trunk</ulink>.</para>
    </section>

    <section id="install-gwt">
      <title>GWT</title>

      <para>The GWT (Google Web Toolkit) software development kit (SDK) should
      be downloaded from the Google site:<ulink
      url="http://code.google.com/webtoolkit/download.html">
      http://code.google.com/webtoolkit/download.html</ulink>. After
      downloading you should unzip it in a directory of choice.</para>
    </section>

    <section id="install-build">
      <title>Build procedure</title>

      <para>Start by recursively checking out the trunk directory to a new
      local folder with a name of your choice (e.g. geomajas-trunk). You will
      see that the source code layout follows the recommended hierarchical
      layout structure for multi module maven projects:</para>

      <figure>
        <title>Hierarchical project layout</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/project-layout.png" width="40%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Build the code by running the install command on the pom in the
      top directory:</para>

      <para><prompt>geomajas-trunk&gt;</prompt> <command>mvn install
      </command></para>

      <para>The install procedure will build all code, run all unit tests and
      install the artifacts in the repository. Integration tests based on
      Selenium will also be run.</para>
    </section>
  </section>

  <section>
    <title>Eclipse</title>

    <para>The Eclipse setup is described in the "Getting Started"
    documentation (see documentation root). For framework development, take
    the setup described in "Running/debugging with the Google Plug-in for
    Eclipse (embedded Jetty option)". The embedded Jetty setup is needed to
    avoid problems with references to multiple versions of Geomajas artifacts
    like the backend. When using the direct GWT setup, these artifacts are not
    always correctly mediated.</para>

    <section>
      <title>Running/debugging with M2Eclipse (quickstart)</title>

      <para>The following steps are required (see "Getting Started" for more
      detail)</para>

      <itemizedlist>
        <listitem>
          <para>Install the GWT plugin</para>
        </listitem>

        <listitem>
          <para>Install the m2eclipse plugin</para>
        </listitem>

        <listitem>
          <para>Import the project as a maven project</para>
        </listitem>

        <listitem>
          <para>Check the "Use GWT" option in project properties</para>
        </listitem>

        <listitem>
          <para>Set "src/main/webapp" as webapp directory in the War tab
          </para>
        </listitem>

        <listitem>
          <para>Run/debug the embedded Jetty server (normal Java Application
          with JettyRunner as main class)</para>
        </listitem>

        <listitem>
          <para>Run/debug the GWT plugin with option (on external
          server)</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Running/debugging with the maven Eclipse plugin</title>

      <para>Eclipse project configurations can be alternatively be generated
      using the maven Eclipse plug-in. Running eclipse:eclipse fails on trunk
      because of an issue with maven filtering: <ulink
      url="http://jira.codehaus.org/browse/MECLIPSE-576">http://jira.codehaus.org/browse/MECLIPSE-576</ulink>. This
      will be fixed in the upcoming 2.9 release of the plugin, in the meantime
      you can back up to 2.6: </para>

      <programlisting>mvn -P noshrink eclipse:clean org.apache.maven.plugins:maven-eclipse-plugin:2.6:eclipse </programlisting>

      <para>After the command has completed, Eclipse project definitions will
      have been generated for all subprojects (except the pom projects). These
      projects can now be imported into Eclipse.</para>
    </section>
  </section>

  <section id="idea">
    <title>IDEA</title>

    <para>The setup in IntelliJ IDEA is quite straightforward and does not
    require running a separate maven command. Make sure you use the maven
    import wizard to open your project, it can be activated from the File menu
    "Open project" and selectthe root pom.xml file.</para>

    <para></para>

    <figure>
      <title>Open Geomajas project (replace root directory with your
      own)</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/IDEA-open-project.png" width="50%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Developing with the GWT face will require you to install the latest
    version of IntelliJ IDEA (9.0) as this is the only version that supports
    GWT 2.0. The IDE will recognize the GWT projects and assign the correct
    facet but as always you will have to make your own run configuration
    (which is fortunately trivial).</para>

    <para>Depending on the actual IDEA version, some additional settings have
    to be done in the project structure dialog. Apart from specifying the GWT
    installation directory, there is a specific project setting which has to
    be done manually, which is setting the target Web facet to "Web". The
    project structure for the simple GWT project should look as
    follows:</para>

    <figure>
      <title>Project structure for simple GWT project</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/IDEA-project-structure.png" width="80%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>After this, you should be able to run and debug the project. Note
    that this setting is needed for each of the GWT modules you want to be
    able to run.</para>
  </section>

  <section id="maven">
    <title>Maven</title>

    <para>If you are working with another IDE or not using an IDE, it is
    always possible to run the example projects directly from maven. For the
    Dojo face (geomajas-dojo-simple and geomajas-dojo-example-war) the maven
    command is as follows:</para>

    <para><prompt>geomajas-dojo-simple&gt;</prompt> <command>mvn jetty:run
    </command></para>

    <para>This command will start up the Jetty servlet engine, after which you
    can connect to the process for debugging.</para>

    <para>In a GWT project, you should run the following goal:</para>

    <para><prompt>geomajas-gwt-simple&gt;</prompt> <command>mvn gwt:debug
    </command></para>

    <para>This will start up GWT development mode, debugging should also be
    possible here.</para>
  </section>
</chapter>
