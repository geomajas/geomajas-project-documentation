<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This file is part of Geomajas, a component framework for building
  ~ rich Internet applications (RIA) with sophisticated capabilities for the
  ~ display, analysis and management of geographic information.
  ~ It is a building block that allows developers to add maps
  ~ and other geographic data capabilities to their web applications.
  ~
  ~ Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<part id="part-back-end">
  <title>back-end</title>

  <chapter id="chapter-configuration">
    <title>Plug-ins</title>

    <para>The primary function of the back-end is to act as a plug-in
    container. Plug-ins are optional libraries that extend the core
    functionality by taking advantage of the public API. There are two sets of
    plug-ins which provide extra features.</para>

    <para>The layer plug-ins provide access to the actual data which needs to
    be displayed as part of a maps. There are basically two types of layers,
    providing either raster data (bitmaps) or vector data. The layers which
    are provided as part of the normal distribution include</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis>geomajas-layer-hibernate</emphasis> (vector): allow
          access to any kind of features which are stored in a spatial
          (relational) database. The data is accessed using the hibernate and
          hibernate-spatial open source libraries.</para>
        </listitem>

        <listitem>
          <para><emphasis>geomajas-layer-geotools</emphasis> (vector): access
          data from any vector data source which has a GeoTools data store
          defined for it (<ulink
          url="http://geotools.org/javadocs/org/geotools/data/DataStore.html">http://geotools.org/javadocs/org/geotools/data/DataStore.html</ulink>).</para>
        </listitem>

        <listitem>
          <para><emphasis>geomajas-layer-google</emphasis> (raster): include
          Google rasters. This allows access to the normal and satellite views
          provided by Google. You still have to make sure you comply with
          Google terms of use (<ulink
          url="http://code.google.com/apis/maps/">http://code.google.com/apis/maps/</ulink>).</para>
        </listitem>

        <listitem>
          <para><emphasis>geomajas-layer-openstreetmap</emphasis> (raster):
          support for raster data coming from the OpenStreetMap project
          (<ulink
          url="http://www.openstreetmap.org/">http://www.openstreetmap.org/</ulink>).</para>
        </listitem>

        <listitem>
          <para><emphasis>geomajas-layer-wms</emphasis> (raster): access data
          from a WMS server (<ulink
          url="http://www.opengeospatial.org/standards/wms">http://www.opengeospatial.org/standards/wms</ulink>).</para>
        </listitem>

        <listitem>
          <para><emphasis>geomajas-layer-shapeinmem</emphasis> (vector):
          access data from an ESRI shape file which handled in memory. The
          actual data access if done using GeoTools (<ulink
          url="http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf">http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf</ulink>).</para>
        </listitem>
      </itemizedlist></para>

    <para>Other plug-ins allow extensions in functionality, either by
    providing additional commands or extending the rendering pipelines, or
    provide additional security services.</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis>geomajas-command</emphasis>: set of commands which
          are provided as part of the standard distribution. This is so
          fundamental to using Geomajas that it is provided as a back-end
          module.</para>
        </listitem>

        <listitem>
          <para><emphasis>geomajas-plugin-printing</emphasis>: printing
          extensions for the framework</para>
        </listitem>

        <listitem>
          <para><emphasis>geomajas-plugin-staticsecurity</emphasis>: a basic
          security service which can be configured as part of the Spring
          configuration and does not use an external source for users or
          policies, making the security configuration entirely static.</para>
        </listitem>
      </itemizedlist></para>
  </chapter>

  <chapter>
    <title>Configuration</title>

    <para>Geomajas leverages the Spring framework for configuration.</para>

    <para>In your <code>web.xml</code> file, you need to assure the
    configuration is made available to the application, and you can indicate
    which files are used to contain the configuration. Though it is possible
    to put all configuration information in one file, we recommend splitting
    your configuration in several files. At least one file per application,
    possibly split further per client layer configuration, and one file for
    server-side configuration of each of the layers.</para>

    <para>Apart from the servlets (which are specific for each face), your
    web.xml needs an excerpt similar to the following:</para>

    <xi:include href="../listing/WebXmlSpringConfiguration.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The listener class initialises the application context as needed for
    Geomajas. It appends the context configuration locations which are
    specified in the <code>contextConfigLocation</code> context parameter to
    the list of internal configuration locations and uses these to build the
    application context. All locations which are specified are read from the
    class path.</para>

    <section>
      <title>General principles</title>

      <para>Each configuration file needs the following header:</para>

      <xi:include href="../listing/SpringConfigurationPreamble.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>This defines the most common schemas which are needed. The
      configuration is built by populating the configuration classes. The
      configuration classes are split up between client-side and back-end.
      Only the back-end classes are necessary to configure the back-end, which
      behaves as a catalog of layers. The client side classes are used to
      define applications and maps, which are purely client-side concepts in
      the Geomajas architecture.</para>

      <para>The back-end classes exist in the
      <code>org.geomajas.configuration</code> package and have a class name
      ending in "Info". These classes are actually used to represent the DTO
      part of the back-end layers, thereby allowing to transfer information or
      metadata of these layers to the client.</para>

      <para>Configuration is done using the Spring Framework. We will give
      some notions here, but for a full introduction to Spring, please read
      the reference documentation <ulink
      url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/">http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/</ulink>.</para>

      <para>Each configuration file can contain one or more bean definitions,
      which correspond to actual Java bean instances. You can set all the
      properties of the objects using this configuration file. Primitive types
      can be set directly using a string representation of the value. When the
      value is another bean, then it can either be defined in-line, or you can
      use a reference. You can choose whether the referenced bean is defined
      in the same file or a different one. As long as the bean name is unique,
      and the location is added in the <code>contextConfigLocation</code>
      context parameter in the web.xml file, the reference is resolved.</para>

      <para>It is possible to define a bean with the same name (or id) more
      than once. In that case, the last occurrence will be used.</para>

      <para>The initial bean which needs to be defined is a bean indicating
      the <emphasis>client application info</emphasis>.</para>

      <xi:include href="../listing/ClientApplicationInfo.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>As you can see, this defines the list of maps for the application.
      It may (optionally) also define some additional user info and a screen
      DPI parameter. The DPI refers to the resolution in pixels per inch of
      your monitor, for a PC its usually 96 (the default) or 72.</para>

      <para>There needs to be at least one <code>ClientApplicationInfo</code>
      bean. The bean name is used when requesting the application info.</para>
    </section>

    <section>
      <title>Back-end configuration</title>

      <para>The back-end configuration consists of security, transaction and
      layer configurations, plus any additional configuration that is needed
      for plug-ins and your application.</para>

      <section>
        <title>Security configuration</title>

        <para>To make sure the system can be used, you have to configure the
        security to allow access. The easiest configuration is to allow access
        to everybody.</para>

        <xi:include href="../listing/AllowAllSecurity.xml"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <para>Any other configuration would depend on the available security
        services. For example, when using the staticsecurity plugin, the
        following could be defined.</para>

        <xi:include href="../listing/StaticSecurityStart.xml"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <para>Most notable in this example is the inclusion of two security
        services. The first is provided to allow login and logout
        (<emphasis>only</emphasis>) for everybody. The second defines users
        and authorizations (only the beginning of the configuration is
        displayed here).</para>
      </section>

      <section>
        <title>Transaction configuration</title>

        <para>Spring has support declarative transaction management, which
        relieves us from the burden of writing our own transaction demarcation
        and exception handling code. Of course, Spring transaction management
        has to be hooked up with the transaction definition and life cycle of
        the underlying data platform (hibernate, JTA, JDBC) . Each data access
        technology should provide its own implementation of the Spring class
        <code>PlatformTransactionManager</code>. For many platforms this is
        already part of the Spring libraries, and for GeoTools we have
        provided a transaction manager.</para>

        <para>Transaction management is typically only needed for editable
        database layers (although we support and encourage it for read-only
        layers as well), of which we provide two types:
        <code>HibernateLayer</code> and <code>GeoToolsLayer</code>. There is
        currently no support for having multiple platform transaction
        managers, although configurations with multiple transaction managers
        should at least theoretically be possible and the subject will be
        investigated further. In practice this means that you currently must
        not mix editable Hibernate and GeoTools layers.</para>

        <para>For Hibernate layers, the following configuration should be
        used:</para>

        <xi:include href="../listing/HibernateTx.xml"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <para>Starting from the top, the following are defined:</para>

        <itemizedlist>
          <listitem>
            <para>The data source: this specifies the connection pool type and
            the connection properties of the database (PostGis in this
            case)</para>
          </listitem>

          <listitem>
            <para>The session factory: this is Hibernate's primary singleton
            and used by the Hibernate layer to access the
            session/connection</para>
          </listitem>

          <listitem>
            <para>A tag to enable annotation-based transactional behavior,
            internally used by Geomajas to decide which commands need
            transaction support</para>
          </listitem>

          <listitem>
            <para>The platform transaction manager for Hibernate</para>
          </listitem>
        </itemizedlist>

        <para>For GeoTools layers, the configuration is as follows:</para>

        <xi:include href="../listing/GeoToolsTx.xml"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <para>Starting from the top, the following are defined:</para>

        <itemizedlist>
          <listitem>
            <para>The data store: this is GeoTools' primary data object and
            will be referenced in the GeoTools layer. The parameters define
            the connection properties of the underlying physical medium
            (PostGis in this case)</para>
          </listitem>

          <listitem>
            <para>A tag to enable annotation-based transactional behavior,
            internally used by Geomajas to decide which commands need
            transaction support</para>
          </listitem>

          <listitem>
            <para>The platform transaction manager for GeoTools</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Raster layer configuration</title>

        <para>Raster layers are image-based layers which, depending on the
        type, may be configured to retrieve their images from WMS, Google Maps
        or OpenStreetMap (tile) servers. All raster layer implementations
        implement the <code>org.geomajas.layer.RasterLayer</code> interface,
        which means they provide an accessor for a
        <code>RasterLayerInfo</code> metadata object. The info object
        configuration is normally defined in the Spring configuration as part
        of the entire layer configuration. Depending on the type of layer,
        extra properties are needed to provide a full configuration.</para>

        <section>
          <title>Raster layer info</title>

          <para>For all raster layers, you will need to define a raster layer
          info object to define the back-end configuration for the layer. The
          exact meaning for some of the fields depend on the actual layer, but
          most important features include:</para>

          <para>
            <table>
              <title>Raster Layer info</title>

              <tgroup cols="2">
                <colspec colnum="1" colwidth="1*" />

                <colspec colnum="2" colwidth="2*" />

                <thead>
                  <row>
                    <entry>Name</entry>

                    <entry>Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>dataSourceName</entry>

                    <entry>The name of the data source as used by the
                    layer.</entry>
                  </row>

                  <row>
                    <entry>crs</entry>

                    <entry>The coordinate reference system, expressed as
                    "EPSG:&lt;srid&gt;". Caveat: make sure this is the same as
                    the maps' crs as full raster image reprojection is not
                    supported! If the crs is not the same, an attempt will be
                    done to rescale and align the center coordinates,
                    though.</entry>
                  </row>

                  <row>
                    <entry>maxExtent</entry>

                    <entry>The bounds of the layer, specified in layer
                    coordinates. After transformation to map coordinates, this
                    determines the locations and absolute size of the
                    tiles.</entry>
                  </row>

                  <row>
                    <entry>resolutions</entry>

                    <entry>A list of resolution values. An image or tile
                    resolution is defined as the ratio between map units and
                    pixels for a tile. If a resolution is 5 and the map unit
                    is meter, this means that 1 pixel represents a square area
                    of 5 by 5 m. Images are usually optimized for a specific
                    (set of) resolution(s), so it is important to specify
                    these here if they are known. On top of that, some servers
                    provide specific tile caching for these predefined
                    resolutions (for example WMS-T). Care has to be taken, the
                    same resolutions should be defined in the map as well if
                    one wants to avoid linear distortion of the
                    images.</entry>
                  </row>

                  <row>
                    <entry>tileWidth</entry>

                    <entry>Width in pixels of the requested images.</entry>
                  </row>

                  <row>
                    <entry>tileHeight</entry>

                    <entry>Height in pixels of the requested images.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </para>

          <para>The location of the images or tiles is defined by calculating
          the real width and height (based on the resolution) and "paving" the
          maximum extent with tiles starting at the origin (x,y) of the
          extent. If no resolutions are predefined, the tiles are calculated
          by dividing the maximum extent by successive powers of 2. Make sure
          the width/height ratio of the maximum extent corresponds to the
          width/height ratio of the tile.</para>
        </section>

        <section>
          <title>WMS layer configuration</title>

          <para>Make sure your classpath contains the required plug-in. If you
          are using Maven, add the following dependency to your pom:</para>

          <xi:include href="../listing/WmsLayerDependency.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>A complete WMS layer configuration looks as follows:</para>

          <xi:include href="../listing/WmsLayerSample.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>As you can see, the bean class refers to the actual layer
          type: <code>org.geomajas.layer.wms.WmsLayer</code>.</para>

          <para>The first property is the layer info object, which describes
          the metadata common to all raster layers. The following properties
          are needed for this object:</para>

          <para>The layer object contains some extra properties which are
          specifically tied to the WMS server:</para>

          <table>
            <title>WMS layer properties</title>

            <tgroup cols="2">
              <colspec colnum="1" colwidth="1*" />

              <colspec colnum="2" colwidth="2*" />

              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>baseWmsUrl</entry>

                  <entry>The base url of the WMS server. This is the base part
                  (excluding the request parameters) of the url that would be
                  called to execute a WMS request.</entry>
                </row>

                <row>
                  <entry>version</entry>

                  <entry>Version of the WMS protocol which should be used.
                  Check your server configuration for possible values.</entry>
                </row>

                <row>
                  <entry>format</entry>

                  <entry>The mime type in which the images should be returned,
                  for example "image/gif". Check your server configuration for
                  possible values.</entry>
                </row>

                <row>
                  <entry>styles</entry>

                  <entry>Some WMS servers support multiple styles for their
                  layers. Check your server configuration for possible
                  values.</entry>
                </row>

                <row>
                  <entry>parameters</entry>

                  <entry>You can define additional parameters which can be
                  passed to the WMS server. These are name/value pairs which
                  are passed in
                  <code>org.geomajas.configuration.Parameter</code>
                  objects.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>

        <section>
          <title>OpenStreetMap layer configuration</title>

          <para>Make sure your classpath contains the required plug-in. If you
          are using Maven, add the following dependency to your pom:</para>

          <xi:include href="../listing/OsmLayerDependency.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>A complete OpenStreetMap layer configuration looks as
          follows:</para>

          <xi:include href="../listing/OsmLayerSample.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>The layer info inner bean has the same general content as
          usual, with one exception : the dataSourceName property is not
          necessary in this case. As with the WMS layer, the resolutions have
          been carefully chosen to match the tile server's resolutions. The
          tile width and height are implied by the server in this case but
          since they are required metadata for all raster layers, they should
          be set to the server's values: 256 x 256.</para>
        </section>

        <section>
          <title>Google Maps layer configuration</title>

          <para>Make sure your class path contains the required plug-in. If
          you are using Maven, add the following dependency to your
          pom:</para>

          <xi:include href="../listing/GoogleLayerDependency.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>A complete Google layer configuration looks as follows:</para>

          <xi:include href="../listing/GoogleLayerSample.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>
            <table>
              <title>GoogleLayer configuration</title>

              <tgroup cols="2">
                <colspec colnum="1" colwidth="1*" />

                <colspec colnum="2" colwidth="2*" />

                <thead>
                  <row>
                    <entry>GoogleLayer configuration</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>satellite</entry>

                    <entry>Set to true to use satellite view from Google. When
                    false (the default), the normal view (showing streets)
                    will be used.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </para>

          <para>The layer info inner bean has the same general content as
          usual. There are some simplifications though. There is no need to
          provide resolutions or tile size (256x256 is always used). The crs
          should always be set to Mercator ("EPSG:900913").</para>

          <para>On the layer, you can set the "satellite" property to choose
          between using normal display (showing streets) or satellite view (by
          setting this to "true").</para>

          <note>
            <para>You need to assure that you comply with Google's terms of
            use (see <ulink
            url="http://code.google.com/apis/maps/">http://code.google.com/apis/maps/</ulink>).
            Some of the things you need to do include adding the Google API
            code in your application (using a Google API key when not running
            on localhost), and (from the GWT face, using the
            <code>GoogleAddon</code> class to assure the copyright notes are
            displayed on the map.</para>
          </note>
        </section>
      </section>

      <section>
        <title>Vector layer configuration</title>

        <para>Vector layers contain homogeneous vectorial features. All vector
        layer implementations implement the
        <code>org.geomajas.layer.VectorLayer</code> interface, which means
        they provide an accessor for a <code>VectorLayerInfo</code> metadata
        object. The info object configuration is normally defined in the
        Spring configuration as part of the entire layer configuration.
        Depending on the type of layer, extra properties are needed to provide
        a full configuration.</para>

        <para>The definition of the actual layer is similar to the definition
        of a raster layer.</para>

        <section>
          <title>Vector layer info</title>

          <para>For the layer configuration, you have to create the layer info
          object.</para>

          <xi:include href="../listing/ShapeInMemCountriesInfo.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>This defines the details common to both raster and vector
          layers, like layer id, crs, layer type, max extent (bounding box)
          etc.</para>

          <para>The following table describes the properties of the
          <code>VectorLayerInfo</code> object:</para>

          <para>
            <table>
              <title>VectorLayer info</title>

              <tgroup cols="2">
                <colspec colnum="1" colwidth="1*" />

                <colspec colnum="2" colwidth="2*" />

                <thead>
                  <row>
                    <entry>Property</entry>

                    <entry>Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>layerType</entry>

                    <entry>This property determines the type of the default
                    geometry of the features. The following types are
                    supported: POINT, LINESTRING, POLYGON, MULTIPOINT,
                    MULTILINESTRING and MULTIPOLYGON</entry>
                  </row>

                  <row>
                    <entry>crs</entry>

                    <entry>The coordinate reference system, expressed as
                    "EPSG:&lt;srid&gt;". This is probably determined by the
                    layer, but has to be specified anyhow as we have no
                    autodetection in place yet..</entry>
                  </row>

                  <row>
                    <entry>maxExtent</entry>

                    <entry>The bounds of the layer, specified in layer
                    coordinates. After transformation to map coordinates, this
                    determines the locations and absolute size of the
                    tiles.</entry>
                  </row>

                  <row>
                    <entry>featureInfo</entry>

                    <entry>The feature metadata</entry>
                  </row>

                  <row>
                    <entry>namedStyleInfos</entry>

                    <entry>The list of predefined style metadata objects which
                    define the named styles for this layer</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </para>

          <para>The feature metadata can be found in the
          <code>FeatureInfo</code> object. This objects contains the complete
          feature type description (id, attributes and geometry) as well as
          the validation rules for the attributes. An example definition of
          this object is given below:</para>

          <xi:include href="../listing/ShapeInMemCountriesFeatureInfo.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>The following table describes the properties of the
          <code>FeatureInfo</code> object:</para>

          <table>
            <title>Feature info configuration</title>

            <tgroup cols="2">
              <colspec colnum="1" colwidth="1*" />

              <colspec colnum="2" colwidth="2*" />

              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>dataSourceName</entry>

                  <entry>This name is used by the layer to internally
                  reference the source that provides the data. Depending on
                  the type of layer, this could be a table name
                  (geotools-postgis), a shape file name (geotools-shapeinmem,
                  in this case there is a 1-to-1 correspondence withe the
                  geotools datastore), a WFS layer name (geotools-wfs) or a
                  java class name (hibernate).</entry>
                </row>

                <row>
                  <entry>identifier</entry>

                  <entry>Metadata of the primitive attribute that provides a
                  unique identification of the feature.</entry>
                </row>

                <row>
                  <entry>geometryType</entry>

                  <entry>Metadata of the geometrical attribute that provides
                  the default geometry of the feature.</entry>
                </row>

                <row>
                  <entry>attributes</entry>

                  <entry>Metadata of all other attributes</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>This defines the identifier, geometry object and attributes
          for the feature.</para>

          <para>Attributes can be either primitive attributes or association
          attributes. Primitive attributes represent primitive Java types as
          well as some common types like Date and String. The following
          primitive attribute types are defined: BOOLEAN, SHORT, INTEGER,
          LONG, FLOAT, DOUBLE, CURRENCY, STRING, DATE, URL and IMGURL.
          Association attributes represent non-primitive Java types. There are
          two types of association attributes defined: MANY_TO_ONE and
          ONE_TO_MANY. These reflect the many-to-one and one-to-many
          relationships as defined in an entity-relationship model and can
          only be used in conjunction with the
          <code>HibernateLayer</code>.</para>

          <para>Last but not least, you can define one or more named style
          definitions which should be used for rendering of the layer. The
          actual style that is being used by the client is determined in the
          client configuration, but you predefine a number of styles (of type
          <code>NamedStyleInfo</code>) here for later reference in the client
          configuration.</para>

          <para>Each style object is itself composed of a number of feature
          styles (<code>FeatureStyleinfo</code>) and a label style
          (<code>LabelStyleInfo</code>). You can define formulas to determine
          which feature style should be used. The first style whose formula
          passes will be applied for the feature.</para>

          <xi:include href="../listing/ShapeInMemCountriesStyleInfo.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <section>
            <title>Validation</title>

            <para>Most feature attributes should be validated before they can
            be saved to a file or database. Validation is a concern that
            stretches across many layers of a typical application: there is
            usually a need for client-side validation (making the application
            more user friendly) , server-side validation (to protect the
            server from invalid data) as well as database validation (to
            preserve data integrity). Preferably validation rules should be
            defined as much as possible in a single place to avoid conflicts
            and duplication.</para>

            <para>Our attribute configuration supports several types of
            validation by defining a <code>"validator"</code> property inside
            the attribute:</para>

            <xi:include href="../listing/AttributeValidator.xml"
                        xmlns:xi="http://www.w3.org/2001/XInclude" />

            <para>This property contains some general validator information
            and a set of constraints that should be applied to the attribute.
            The available constraint types have been based on the new
            JavaBeans standard: JSR-303.</para>
          </section>
        </section>

        <section>
          <title>Hibernate layer configuration</title>

          <para>The Hibernate layer is based on the popular Hibernate O/R
          mapping framework. It uses a special spatial extension of Hibernate,
          unsurprisingly called Hibernate Spatial. The Hibernate Spatial
          project has its project website at <ulink
          url="http://www.hibernatespatial.org/">http://www.hibernatespatial.org</ulink>.
          The spatial extensions or dialects (in Hibernate language) allow the
          definition of spatial types and the execution of spatial queries in
          a database independent way.</para>

          <para>You need to include the following dependencies to make this
          work. This needs to include the hibernate spatial provider, in this
          example, PostGis.</para>

          <xi:include href="../listing/HibernateLayerDependency.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>A Hibernate layer cannot be defined by configuration only. As
          in every O/R model, there has to be a mapping between Java classes
          and tables in the database. In the most simple case there is a
          one-to-one mapping between a single class and a single spatial
          table.</para>

          <para>The following listing shows the (partial) definition of a
          Hibernate annotated Java class <code>Road.java</code> that is mapped
          to a table <code>roads</code> in the database.</para>

          <xi:include href="../listing/HibernateRoadsSample.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>The field annotations describe the relation between the fields
          of the class and the columns in the table. A special annotation
          <code>@Type</code> with type
          <code>org.hibernatespatial.GeometryUserType</code> is used to map
          the <code>geometry</code> field to the <code>the_geom</code> spatial
          column.</para>

          <para>Once the Java class mapping is finished, the actual layer
          configuration can be made. An example configuration that matches the
          <code>Road.java</code> class is shown below:</para>

          <xi:include href="../listing/HibernateRoadsLayer.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>The first property <code>layerInfo</code> is the reference to
          the <code>VectorLayerInfo</code> object. While it can be defined
          inline, it has been defined as an outer bean for clarity
          here.</para>

          <para>The <code>featureModel</code> property refers to the internal
          feature accessor face of the layer. This property will probably be
          removed as it has no additional configuration parameters for the
          moment.</para>

          <para>The <code>sessionFactory</code> property refers to the
          Hibernate session factory. This is the same factory that has to be
          defined by the transaction configuration.</para>

          <para>The <code>dateFormat</code> property determines how the layer
          will convert date values to strings and vice versa.</para>

          <para>As already mentioned, the bulk part of the layer's metadata is
          defined through the <code>VectorLayerInfo</code> object. An example
          definition of this object is given below:</para>

          <xi:include href="../listing/HibernateRoadsInfo.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />

          <para>The feature metadata can be found in the
          <code>FeatureInfo</code> object. This objects contains the complete
          feature type description (id, attributes and geometry) as well as
          the validation rules for the attributes. An example definition of
          this object is given below:</para>

          <xi:include href="../listing/HibernateRoadsFeatureInfo.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />
        </section>

        <section>
          <title>GeoTools layer configuration</title>

          <para>Apart from a reference to the layer info, you can set the
          following parameters:</para>

          <table>
            <title>GeoToolsLayer configuration</title>

            <tgroup cols="2">
              <colspec colnum="1" colwidth="1*" />

              <colspec colnum="2" colwidth="2*" />

              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>url</entry>

                  <entry>Url for the shape file. Apart from standard protocols
                  supported by java, you can also use the "classpath:"
                  protocol (the resource location should not start with a
                  slash) to refer to shape files on the classpath.</entry>
                </row>

                <row>
                  <entry>dbtype</entry>

                  <entry>Database type, useful when the data store is a
                  database.</entry>
                </row>

                <row>
                  <entry>parameters</entry>

                  <entry>You can define additional parameters which can be
                  passed to the GeoTools data store. These are name/value
                  pairs which are passed in
                  <code>org.geomajas.configuration.Parameter</code>
                  objects.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>In most cases, you will need to pass data using the parameters
          property to get a functional GeoTools layer. This would look similar
          to this:</para>

          <example>
            <title>GeoTools WFS configuration skeleton</title>

            <programlisting>&lt;bean name="blabla" class="org.geomajas.layer.geotools.GeoToolsLayer"&gt;
    &lt;property name="parameters"&gt;
        &lt;list&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="WFSDataStoreFactory:GET_CAPABILITIES_URL" /&gt;
                &lt;property name="value" value="aaaaaaa" /&gt;
            &lt;/bean&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="WFSDataStoreFactory:TIMEOUT" /&gt;
                &lt;property name="value" value="bbbbbbb" /&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
    &lt;property name="layerInfo" ref="blablaInfo" /&gt;
&lt;/bean&gt; </programlisting>
          </example>

          <para>The names which are valid depend on the GeoTools data
          store.</para>

          <para>To access a WFS server, the following names can be used as
          parameters.</para>

          <para>
            <itemizedlist>
              <listitem>
                <para><emphasis>WFSDataStoreFactory:GET_CAPABILITIES_URL</emphasis>:
                URL for the getCapabilities document on the server
                instance.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:PROTOCOL</emphasis>:
                determine which HTTP command use when requesting WFS
                functionality. Set this value to "true" for POST, "false" for
                GET or NULL for AUTO.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:USERNAME</emphasis>: set
                the user name which should be used to authenticate the
                connection. This parameter should not be used without the
                password parameter.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:PASSWORD</emphasis>: set
                the password which should be used to authenticate the
                connection. This parameter should not be used without the user
                name parameter.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:TIMEOUT</emphasis>:
                specify the connection timeout in milliseconds. This parameter
                has a default value of 3000ms.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:BUFFER_SIZE</emphasis>:
                set the buffer size for the features. This parameter has a
                default value of 10 features.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:TRY_GZIP</emphasis>:
                indicate whether the data store should use gzip compression to
                transfer data if the server supports it. Default is
                true.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:LENIENT</emphasis>:
                indicate whether the data store should do its best to create
                features from the provided data even if it does not accurately
                match the schema. Errors will be logged but the parsing will
                continue if this is true. Default is false.</para>
              </listitem>
            </itemizedlist>
          </para>

          <para>You also have to assure the GeoTools WFS data store is added
          as dependency in your project. When using Maven, you can add the
          following dependency.</para>

          <example>
            <title>GeoTools WFS dependency</title>

            <programlisting>&lt;dependency&gt;
      &lt;groupId&gt;org.geotools&lt;/groupId&gt;
      &lt;artifactId&gt;gt-wfs&lt;/artifactId&gt;
      &lt;version&gt;${geotools-version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
          </example>
        </section>

        <section>
          <title>Shape in memory layer</title>

          <para>This layer is backed by a shape file that is loaded in memory
          at startup. All layer updates are performed in memory, so this layer
          is not really useful except for examples.</para>

          <para>
            <table>
              <title>ShapeInMemLayer configuration</title>

              <tgroup cols="2">
                <colspec colnum="1" colwidth="1*" />

                <colspec colnum="2" colwidth="2*" />

                <thead>
                  <row>
                    <entry>ShapeInMemLayer configuration</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>url</entry>

                    <entry>Url for the shape file. Apart from standard
                    protocols supported by java, you can also use the
                    "classpath:" protocol (the resource location should not
                    start with a slash) to refer to shape files on the
                    classpath.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </para>
        </section>

        <section>
          <title>Bean layer configuration</title>

          <para>Bean layer provides an in-memory layer which is not persisted
          in any way. The features can be defined in the configuration file
          using some specialised beans. It is particularly useful for
          testing.</para>

          <para>TODO.....</para>

          <para>
            <table>
              <title>BeanLayer configuration</title>

              <tgroup cols="2">
                <colspec colnum="1" colwidth="1*" />

                <colspec colnum="2" colwidth="2*" />

                <thead>
                  <row>
                    <entry>Name</entry>

                    <entry>Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>features</entry>

                    <entry>List of features, which should be
                    <code>org.geomajas.layer.bean.FeatureBean</code>
                    instances.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </para>
        </section>
      </section>
    </section>

    <section>
      <title>Client configuration</title>

		<figure>
		  <title>Geomajas client configuration</title>

		  <mediaobject>
			<imageobject>
			  <imagedata fileref="../images/clientConfiguration.png" width="100%" />
			</imageobject>
		  </mediaobject>
		</figure>

      <section>
        <title>Map configuration</title>

        <para>A map is a client side object. The Geomajas back-end works
        almost exclusively on layers.<footnote>
            <para>The only current exception is the printing command which
            converts maps to PDF document. Clearly this also uses the map
            configuration.</para>
          </footnote>On the client side however, these layers are combined
        into maps. In general, the back-end never needs to know which map the
        layer is displayed in when doing its work. However the back-end does
        need to know the coordinate reference system which is used.</para>

        <xi:include href="../listing/ClientMapInfoPart1.xml"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <para>The layers refers to the client layer info objects, not the
        server layer info or layer instances.</para>

        <para>For the client side, a lot of additional information can be
        included in the map configuration. This includes information like
        background colour, styles which should be used for selected points,
        lines and polygons and whether scale bare or pan buttons should be
        enabled.</para>

        <xi:include href="../listing/ClientMapInfoPart2.xml"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <para>A map typically also contains a tool bar. If you want one, you
        have to specify the tools it should include.</para>

        <xi:include href="../listing/ClientMapInfoPart3.xml"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <para>Obviously the tools themselves need to be defined as well. You
        can pass some parameters to the tools. An example tool definition look
        like this.</para>

        <xi:include href="../listing/ZoomInToolInfo.xml"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <para>Note that the tool id and the names of the parameters are
        interpreted by the client, so it is the client face which defines the
        possible values.</para>

        <para>Last but not least, you can also configure the layer tree
        component which may be connected to the map.</para>

        <xi:include href="../listing/ClientMapInfoPart4.xml"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />

        <para>This defines the tools which are available in the layer tree
        widget, and the tree of layers (as a node, which can contain a list of
        nodes etc).</para>

        <para>Note that the layers are indicated by referring to the client
        configuration object.</para>
      </section>

      <section>
        <title>Client layer configuration</title>

        <para>Layer configuration is split in two (linked) parts. You have to
        create the actual layer which is used in the back-end, and this layer
        needs to know the configuration information which is also used on the
        client side. Secondly, there is a distinction between raster and
        vector layers as they each needs a lot of specific information.</para>

        <section>
          <title>Raster layer</title>

          <para>TODO.....</para>
        </section>

        <section>
          <title>Vector layer</title>

          <para>TODO.....</para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter id="chapter-api">
    <title>API</title>

    <section>
      <title>API annotation</title>

      <para>As Geomajas is a framework for building enterprise application, it
      is important to be very accurate about what exactly is considered part
      of the API, specifically which classes and interfaces and which methods
      in these classes and interfaces are considered as part of the
      API.</para>

      <para>For this reason, we have introduced the "<code>@Api</code>"
      annotation. A class or interface is only considered part of the public
      API when it is annotated using "<code>@Api</code>". When all public
      methods in the class or interface are considered part of the API, you
      could use "<code>@Api(allMethods = true)</code>". The alternative is to
      annotate the individual methods.</para>

      <para>The API includes many interfaces. These interfaces should only be
      implemented by client code when they are annotated by
      "<code>@<code>UserImplemented</code></code>". All other interfaces are
      provided to indicate the methods available on instances which are
      obtained through the API or Spring wiring and may have extra methods
      added in future versions.</para>

      <para>All classes and methods which are indicated with
      "<code>@Api</code>" should also have a "<code>@since</code>" javadoc
      comment indicating the version in which the class or method was added to
      the API.</para>

      <para><note>
          <para>Please beware that only the annotations determine whether
          something is part of the API or not. The manual may discuss things
          which are not considered API, probably because they are
          experimental.</para>
        </note></para>
    </section>

    <section>
      <title>Back-end API</title>

      <para>The full details about the API can be found in the published
      javadoc, available on the Geomajas site at <ulink
      url="http://www.geomajas.org/gis-documentation">http://www.geomajas.org/gis-documentation</ulink>.
      There you can find the links for the different versions.</para>

      <para>The API for the Geomajas back-end is contained in the geomajas-api
      module. This contains only interfaces, exceptions and data transfer
      objects. The data transfer objects are classes which only contain
      getters and setters. The back-end API is divided in the following
      packages:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>command</emphasis>: interfaces, services and data
          transfer objects related with the command extension points.</para>
        </listitem>

        <listitem>
          <para><emphasis>configuration</emphasis>: data transfer objects
          which are used for defining the configuration in Geomajas.</para>
        </listitem>

        <listitem>
          <para><emphasis>geometry</emphasis>: Geomajas geometry related data
          transfer objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>global</emphasis>: some general interfaces,
          annotations and exceptions which are relevant for a combination of
          several extension points or the entire API.</para>
        </listitem>

        <listitem>
          <para><emphasis>layer</emphasis>: interfaces, services, exceptions,
          data transfer objects and some internal objects related with the
          layers and objects in a layer. These include the definition of a
          layer, tiles, features and feature models.</para>
        </listitem>

        <listitem>
          <para><emphasis>security</emphasis>: interfaces, services and data
          transfer objects related with the security extension points and
          security handling.</para>
        </listitem>

        <listitem>
          <para><emphasis>service</emphasis>: utility services provided by
          Geomajas.</para>
        </listitem>
      </itemizedlist>

      <para>The back-end also contains a module geomajas-api-experimental.
      This contains some experimental stuff which may be promoted to the
      supported API when useful, or may be changed or dumped. As this is
      <emphasis>not</emphasis> part of the API, it may change between
      revisions.</para>
    </section>

    <section>
      <title>Command and plug-in API</title>

      <para>For commands and plug-ins, the same rule applies as for the
      back-end API. That means that the "<code>@Api</code>" annotation
      indicates the stability of the interfaces, classes and methods.</para>

      <para>These classes can typically be found in packages containing
      "command.dto" for command request and response objects or packages
      containing "configuration" for objects which are expected to be defined
      from the Spring configuration files.</para>

      <para>The command name is also considered part of the API when the
      implementing class in annotated using the "<code>@Api</code>"
      annotation.</para>
    </section>

    <section>
      <title>GWT face API</title>

      <para>The GWT plug-in also uses the "<code>@Api</code>" annotation to
      indicate classes and methods which are supported to remain stable
      between minor versions of the face.</para>

      <para>You can expect to find this annotation on all widgets, though it
      is likely that not all public methods will be considered part of the
      API.</para>
    </section>

    <section>
      <title>API compatibility and Geomajas versions</title>

      <para>Versions have the structure "major.minor.revision". Geomajas uses
      a even-odd versioning scheme for the "minor" part.</para>

      <para>The major number indicates major changes in the framework and thus
      gives no guarantee about API compatibility with previous major
      versions.</para>

      <para>Versions with an even minor part are considered stable and
      suitable for production use. Odd minor versions are used for development
      to work on and test new features to be released in the next stable
      version. The API for Geomajas needs to be upward compatible for all
      stable versions with same major number. Specifically this means that
      <itemizedlist>
          <listitem>
            <para>No API classes or interfaces may be removed.</para>
          </listitem>

          <listitem>
            <para>No API classes or interfaces may be renamed.</para>
          </listitem>

          <listitem>
            <para>No API classes or interfaces may have their package name
            modified.</para>
          </listitem>

          <listitem>
            <para>No API methods may be removed.</para>
          </listitem>

          <listitem>
            <para>No API methods may have their signature changed.</para>
          </listitem>

          <listitem>
            <para>No methods may be added to classes annotated using
            "<code>@<code>UserImplemented</code></code>".</para>
          </listitem>
        </itemizedlist></para>

      <para>Additionally, all methods and classes which are added should
      include an indication of the version in which the class and/or method
      was added. This is done using the "<code>@since</code>" javadoc comment
      for the methods, class or interface.</para>

      <para>Because of the guarantees about API, the use of the
      "<code>@Deprecated</code>" annotation only indicates that a method or
      class is not recommended to be used. The method or class will not be
      removed in future versions with the same major number.</para>
    </section>
  </chapter>

  <chapter id="chapter-commands">
    <title>Commands</title>

    <section>
      <title>Provided commands</title>

      <para>The commands are all registered in the Spring context. The
      "registry key" as indicated below is used to retrieve the commands.
      These are services, so a singleton should be sufficient for this.</para>

      <para>The default naming for the keys is derived from the fully
      qualified class name. This is automatically assigned when the command is
      in a (sub package of) the "command" package. To determine the bean name,
      all parent packages of the "command" package are removed. Then the name
      is simplified. It will end up having "command." as prefix, optionally
      followed by a package, followed by the name. As there already is a
      "command" prefix, the "Command" suffix is removed from the name if
      present. When the resulting name starts or end with the sub package,
      then that is removed as well. For example the
      "org.geomajas.command.configuration.GetConfigurationCommand" class will
      get "command.configuration.Get" as registry key.</para>

      <para><table>
          <title>CopyrightCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>CopyrightCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.general.Copyright</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.EmptyCommandRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry>none</entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>This allows you to obtain copyright and license
                information for Geomajas, it's dependencies, the plg-ins and
                the dependencies of the plug-ins. This can be used to display
                that information in a "about" box to assure the copyright and
                license conditions are adhered.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.CopyrightResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry>List of <code>CopyrightInfo</code> objects for the
                dependencies. Any duplicates are removed based on the
                copyright info key.</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>GetConfigurationCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>GetConfigurationCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.configuration.Get</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.EmptyCommandRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry>none</entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>Get the client side configuration information. This
                returns information about all maps which have been
                configured.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.GetConfigurationResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>name</emphasis>: name of the
                      application.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>maps</emphasis>: list of configured maps
                      for the application. Note that the layer information
                      which is contained in the maps has the coordinates
                      transformed according to the crs of the map.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>screenDpi</emphasis>: screen resolution
                      in dots per inch.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>GetMapConfigurationCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>GetMapConfigurationCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.configuration.GetMap</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.GetMapConfigurationRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>mapId</emphasis>: id of map for which
                      the information should be returned.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>Get the client side configuration information for the
                specified map.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.GetMapConfigurationResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>mapInfo</emphasis>: information about
                      the requested map. Note that the layer information which
                      is contained in the maps has the coordinates transformed
                      according to the crs of the map.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>GetRasterTilesCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>GetRasterTilesCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.render.GetRasterTiles</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.GetRasterTilesRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>crs</emphasis>: coordinate reference
                      system that the map uses.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>bbox</emphasis>: total bounding box
                      wherein to fetch raster tiles.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>scale</emphasis>: current scale in the
                      client side map.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>layerId</emphasis>: the id of the raster
                      layer to fetch tiles for.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>Retrieve a set of raster tiles as image links for a
                given layer within a certain bounding box expressed in a
                certain coordinate reference system.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.GetRasterTilesResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>rasterData</emphasis>: list of
                      <code>RasterTile</code> objects.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>nodeId</emphasis>: identifier to be used
                      in the DOM tree.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>GetVectorTileCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>GetVectorTileCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.render.GetVectorTile</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.GetVectorTileRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>layerId</emphasis>: the id of the vector
                      layer to fetch a tile in.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>code</emphasis>: the unique code of the
                      tile to retrieve.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>scale</emphasis>: the current scale on
                      the map, client side.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>panOrigin</emphasis>: translation for
                      the tile on the client-side.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>filter</emphasis>: extra filter that can
                      be used to filter out data.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>crs</emphasis>: the map's coordinate
                      reference system.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>renderer</emphasis>: should the server
                      render to SVG or VML?</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>styleInfo</emphasis>: extra styles that
                      can override the originally configured styles.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>paintGeometries</emphasis>: should the
                      geometries be painted in the tile? This is true by
                      default.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>paintLabels</emphasis>: should labels be
                      painted in the tile?</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>featureIncludes</emphasis>: indication
                      of which data to include in the feature. Possible values
                      (add to combine): 1=attributes, 2=geometry, 4=style,
                      8=label. Default value is to include everything.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>Fetches a single tile for a vector layer. The tile can
                contain both vectors and labels. This command is used to paint
                vector layers in the map.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.GetVectorTileResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>tile</emphasis>: the actual resulting
                      tile.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>LogCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>LogCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.general.Log</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.LogRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>level</emphasis>: log level, 0 for
                      debug, 1 for info, 2 for warn, 3 for error.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>statement</emphasis>: string which needs
                      to be logged.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>This allows you to send a statement to the server side
                which will be logged there.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.CommandResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry>none</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>MergePolygonCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>MergePolygonCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.geometry.MergePolygon</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.MergePolygonRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>polygons</emphasis>: array of polygons
                      that need to be merged</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>allowMultiPolygon</emphasis>: is a
                      MultiPolygon allowed when merging multiple
                      polygons?</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>This command allows the user to merge multiple polygons
                into a single polygon or multipolygon.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.MergePolygonResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>geometry</emphasis>: the resulting
                      geometry after the merge.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>PersistTransactionCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>PersistFeatureTransactionCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.feature.PersistTransaction</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.PersistTransactionRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>featureTransaction</emphasis>: the
                      actual transaction object. Contains a list of features
                      as they where, and a list of features as they should
                      be.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>crs</emphasis>: the map's coordinate
                      reference system.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>Persist a single transaction on the backend (create,
                update, delete of features).</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.PersistTransactionResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>featureTransaction</emphasis>: the same
                      transaction that was sent to the server. Unless
                      something went wrong, in which case this could be
                      null.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>SearchAttributesCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>SearchAttributesCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.feature.SearchAttributes</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.SearchAttributesRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>layerId</emphasis>: the layer to search
                      in.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>attributeName</emphasis>: the name of
                      the attribute as configured in the feature info.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>filter</emphasis>: a filter, to limit
                      the list of returned features.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>Search for attribute possible values for a certain
                attribute. This command is only used for many-to-one and
                one-to-many relationships, to search for possible
                values.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.SearchAttributesResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>attributes</emphasis>: list of attribute
                      values.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>SearchByLocationCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>SearchByLocationCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.feature.SearchByLocation</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.SearchByLocationRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>location</emphasis>: geometry which
                      should be used for the searching.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>queryType</emphasis>: specify exactly
                      whether to search, possible values are
                      <code>QUERY_INTERSECTS</code>,
                      <code>QUERY_TOUCHES</code>, <code>QUERY_WITHIN</code> or
                      <code>QUERY_CONTAINS</code>.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>ratio</emphasis>: if queryType is
                      <code>QUERY_INTERSECTS</code>, you can additionally
                      specify what percentage of overlap is enough to be
                      included in the search.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>layerIds</emphasis>: array of layer ids
                      to search in.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>searchType</emphasis>: determines
                      whether to stop searching once something in found in one
                      of the layers (in order of course), or whether to
                      continue searching, and include matching features from
                      all layers.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>crs</emphasis>: the map's coordinate
                      reference system. The <emphasis>location</emphasis>
                      geometry will also be expressed in this crs.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>buffer</emphasis>: before any
                      calculation is made, it is possible to have the location
                      geometry expanded by a buffer of this width (in crs
                      space).</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>featureIncludes</emphasis>: indication
                      of which data to include in the feature. Possible values
                      (add to combine): 1=attributes, 2=geometry, 4=style,
                      8=label. Default value is to include everything.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>This command allows you to search for features, based
                on geographic location.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.SearchByLocationResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>featureMap</emphasis>: map with layer
                      ids as key and a list of features as value. Only layers
                      in which features were found are included in the
                      map.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>SearchFeatureCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>SearchFeaturesCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.feature.Search</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.SearchFeatureRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>layerId</emphasis>: id of layer in which
                      features need to be searched.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>max</emphasis>: maximum number of
                      features to allow in the result. 0 means
                      unlimited.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>crs</emphasis>: crs which needs to be
                      used for the geometry in the retrieved features.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>criteria</emphasis>: array of criteria
                      which need to be matched when searching. Each criterion
                      contains the attribute name, the operator (options
                      include "like" and "contains") and the value to compare.
                      Note that the value usually needs to be contained in
                      single quotes.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>booleanOperator</emphasis>: operator
                      which should be used to combine the different criteria
                      when more than one was specified. Should be either "AND"
                      or "OR". Default value is "AND".</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>filter</emphasis>: an additional layer
                      filter which needs to be applied when searching.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>featureIncludes</emphasis>: indication
                      of which data to include in the feature. Possible values
                      (add to combine): 1=attributes, 2=geometry, 4=style,
                      8=label. Default value is to include everything.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>This command allows you to search for features, based
                criteria which allow matching on feature attributes. You can
                specify multiple search criteria and a filter.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.SearchFeatureResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>layerId</emphasis>: id of the layer
                      which contains the features. Equals the layerId
                      parameter from the request.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>features</emphasis>: array of features
                      which match the search criteria. Any geometry contained
                      in the features uses the request crs.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>SplitPolygonCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>SplitPolygonCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.geometry.SplitPolygon</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.SplitPolygonRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>geometry</emphasis>: the geometry that
                      needs splitting.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>splitter</emphasis>: the splitting
                      geometry (usually a LineString).</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>Split up a geometry into many pieces by means of a
                splitting geometry.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.SplitPolygonResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>geometries</emphasis>: the list of
                      resulting geometries after the split.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>UserMaximumExtentCommand</title>

          <tgroup cols="2">
            <colspec colnum="1" colwidth="1*" />

            <colspec colnum="2" colwidth="2*" />

            <thead>
              <row>
                <entry>UserMaximumExtentCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.configuration.UserMaximumExtent</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.UserMaximumExtentRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>layerIds</emphasis>: list of layers to
                      include.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>includeRasterLayers</emphasis>: true
                      when raster layers should be included. Defaults to
                      false.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>crs</emphasis> : crs which should be
                      used for the response.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>Get the bounding box of the visible features across the
                requested layers (visible area for the raster layers).</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.UserMaximumExtentResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>bounds</emphasis> : bounding box.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
    </section>

    <section>
      <title>Writing your own commands</title>

      <para>A Geomajas command usually consist of three classes, the actual
      command (which implements the <code>Command</code> interface), and two
      data transfer objects, one to pass the request parameters (extending
      <code>CommandRequest</code>, <code>LayerIdCommandRequest</code> or
      <code>LayerIdsCommandRequest</code>), and one which carries the response
      (extending <code>CommandResponse</code>).</para>

      <para>It is important to assure your request object extends from
      LayerIdCommandRequest or LayerIdsRequest when one of the parameters is
      the layer id (or a list thereof). This can be used by the command
      dispatcher to assure the layer specific (transaction) interceptors are
      called.</para>

      <para>To create a new command we recommend you use a similar package
      structure as we used in the geomajas-extension-command module. That is
      to create a "command" package with under that a "dto" package which
      contains all the request and response objects, and to put the actual
      commands in sub packages based on some kind of grouping. This helps to
      automatically determine a sensible command name.</para>

      <para>The basic command implementation looks like this:</para>

      <xi:include href="../listing/ExampleCommand.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>Note the presence of the "@Component" annotation which assures the
      command is registered. You could add the name under which the command
      needs to be registered in the annotation, but when that is omitted, the
      default command name is derived from the fully qualified class name. In
      the example given here this results in command name
      "command.mysuper.DoIt".</para>

      <para>The default way to determine the command name assumes there is a
      package named "command" in the fully qualified name of the implementing
      class. It will remove everything before that. It will then remove a
      "Command" suffix if any. Lastly, it will remove duplication between the
      intermediate package (between "command" and the class name) and the
      class name itself. Some examples:</para>

      <para>
        <table>
          <title>Samples of command name resolution</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>Fully qualified class name</entry>

                <entry>Command name</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>my.app.command.DoIt</entry>

                <entry>command.DoIt</entry>
              </row>

              <row>
                <entry>my.app.command.super.DoIt</entry>

                <entry>command.super.DoIt</entry>
              </row>

              <row>
                <entry>my.app.command.super.DoItCommand</entry>

                <entry>command.super.DoIt</entry>
              </row>

              <row>
                <entry>my.app.command.super.SuperDoItCommand</entry>

                <entry>command.super.DoIt</entry>
              </row>

              <row>
                <entry>my.app.command.super.DoItSuperCommand</entry>

                <entry>command.super.DoIt</entry>
              </row>

              <row>
                <entry>my.app.command.super.CommandDoIt</entry>

                <entry>command.super.CommandDoIt</entry>
              </row>

              <row>
                <entry>my.app.command.super.CommandSuperDoIt</entry>

                <entry>command.super.CommandSuperDoIt</entry>
              </row>

              <row>
                <entry>my.app.command.super.CommandDoItSuper</entry>

                <entry>command.super.CommandDoIt</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>

      <para>You have to include a line in your Spring configuration to scan
      class files for annotation to make the components available. For the
      case above, this could be done by including the following XML fragment
      in one of your Spring configuration files.</para>

      <xi:include href="../listing/ExampleCommandScan.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>The command will be executed using a singleton. The use of object
      variables is not recommended. Any object variables will be shared
      amongst all command invocation, which can be coming from multiple
      threads at the same time.</para>

      <para>Note that it is not mandatory to create your own request and
      response object classes. If you don't require any parameters you can use
      <code>EmptyCommandRequest</code> as request class. If you only require a
      layer id, then use <code>LayerIdCommandRequest</code>. If you only
      return a success code, you could use the
      <code>SuccessCommandResponse</code> class.</para>

      <para>You have to take care that all objects which are referenced by
      your request and response objects are actually serializable for the
      faces in which the commands need to be used. For the dojo face this may
      require the use of the "<code>@Json</code>" annotation to exclude
      fields. For GWT you have to assure the no-arguments constructor exists
      and that the class can be compiled by GWT (no Hibernate enhanced
      classes, no use of "<code>super.clone()</code>",...).</para>

      <para>When the commands are included in a separate module, you should
      assure the sources are available as these are needed for GWT
      compilation. This can easily be done using the Maven source
      plugin.</para>

      <xi:include href="../listing/MavenSourcePlugin.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>Actually including the sources can then be done using a dependency
      like the following (this includes the staticsecurity module, both the
      actual code and the sources). You could set "provided" scope on the
      source dependency to exclude it from the war file. However, this may
      prevent use of GWT development mode.</para>

      <xi:include href="../listing/StaticSecurityDependency.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>
        <note>
          <para>When using a separate module for your commands and trying to
          run your project from eclipse, it is quite likely to have problems
          with your commands not being found. When checking the output
          generated at startup, the commands are sometimes not registered even
          though the classes exist and the correct package is being scanned.
          This can be caused by a class path problem and can be fixed using a
          context listener which assures the relevant jars are loaded. In the
          following excerpt, which should be part of your web.xml, make sure
          to add one of the class in your jar file.</para>

          <xi:include href="../listing/PreloadToPrepareScanning.xml"
                      xmlns:xi="http://www.w3.org/2001/XInclude" />
        </note>
      </para>
    </section>
  </chapter>

  <chapter id="chapter-layers">
    <title>Layers</title>

    <para>Layers allow access to data which needs to be displayed in a
    map.</para>

    <para>For the existing layers, the details about configuring you map to
    include that layer are included in the <link
    linkend="chapter-configuration">configuration</link> section above.</para>

    <section>
      <title>Writing your own layer</title>

      <para>TODO.....</para>
    </section>
  </chapter>

  <chapter id="chapter-security">
    <title>Security</title>

    <para>Geomajas has security built-in. If you don't provide a security
    configuration, nothing will be authorized. For unsecured access, you can
    add</para>

    <xi:include href="../listing/AllowAllSecurity.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>TODO.....</para>

    <section>
      <title>Authentication versus authorization</title>

      <para>TODO.....</para>
    </section>

    <section>
      <title>What can be authorized</title>

      <para>TODO.....</para>
    </section>

    <section>
      <title>Staticsecurity module configuration</title>

      <para>TODO.....</para>
    </section>

    <section>
      <title>Writing your own security service</title>

      <para>TODO.....</para>
    </section>
  </chapter>
</part>
