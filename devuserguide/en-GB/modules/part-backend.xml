<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This file is part of Geomajas, a component framework for building
  ~ rich Internet applications (RIA) with sophisticated capabilities for the
  ~ display, analysis and management of geographic information.
  ~ It is a building block that allows developers to add maps
  ~ and other geographic data capabilities to their web applications.
  ~
  ~ Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<part id="part-backend">
  <title>back-end</title>

  <chapter id="chapter-configuration">
    <title>Modules</title>

    <para>Then there are two main sets of modules which provide extra
    features.</para>

    <para>The layer models provide the actual data which can be combined for
    the maps. There are basically two types of layer models, providing either
    raster data (bitmaps) or vector data. The provided vector layers
    are</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis>hibernate</emphasis> (vector) :</para>
        </listitem>

        <listitem>
          <para><emphasis>geotools</emphasis> (vector) :</para>
        </listitem>

        <listitem>
          <para><emphasis>google</emphasis> (raster) :</para>
        </listitem>

        <listitem>
          <para><emphasis>openstreetmaps</emphasis> (raster) :</para>
        </listitem>

        <listitem>
          <para><emphasis>wms</emphasis> (raster) :</para>
        </listitem>

        <listitem>
          <para><emphasis>shapeinmem</emphasis> (vector) :</para>
        </listitem>
      </itemizedlist>Other extensions typically provide additional
    commands.</para>

    <para><itemizedlist>
        <listitem>
          <para><emphasis>command</emphasis> : set of commands which are
          provided as part of the standard distribution.</para>
        </listitem>

        <listitem>
          <para><emphasis>printing</emphasis> :</para>
        </listitem>
      </itemizedlist></para>

    <para></para>
  </chapter>

  <chapter>
    <title>Configuration</title>

    <para>Geomajas leverages the spring framework for configuration.</para>

    <para>In your <code>web.xml</code> file, you need to assure the
    configuration is made available to the application, and you can indicate
    which files are used to contain the configuration. Though it is possible
    to put all configuration information in one file, we recommend using one
    file for defining the application (and the maps in it), and one file for
    each of the layers.</para>

    <para>Apart from the servlets (which are specific for each face), your
    web.xml needs an excerpt similar to the following :</para>

    <programlisting>&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;
        applicationContext.xml
        layerBelt.xml
        layerBluemarble.xml
        layerCities.xml
        layerCountries.xml
        layerLakes.xml
        layerOsm.xml
        layerProvinces.xml
        layerRivers.xml
        layerRoads.xml
        layerStructures.xml
    &lt;/param-value&gt;
&lt;/context-param&gt;

&lt;listener&gt;
    &lt;listener-class&gt;org.geomajas.servlet.GeomajasContextListener&lt;/listener-class&gt;
&lt;/listener&gt;
</programlisting>

    <para>The listener class initialises the application context as needed for
    Geomajas. It appends the context configuration locations which are
    specified in the <code>contextConfigLocation</code> context parameter to
    the list of internal configuration locations and uses these to build the
    application context. All locations which are specified are read from the
    classpath.</para>

    <section>
      <title>General principles</title>

      <para>Each of the configuration files needs the following header:</para>

      <xi:include href="../listing/SpringConfigurationPreamble.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>This defines the most common schemas which are needed. The
      configuration is built by populating the configuration classes. The
      configuration classes are split up between client and server side or
      back-end classes. Only the back-end classes are necessary to configure
      the back-end, which behaves as a catalog of layers. The client side
      classes are used to define applications and maps, which are purely
      client-side concepts in the Geomajas architecture.</para>

      <para>The back-end classes exist in the
      <code>org.geomajas.configuration</code> package and have a class name
      ending in "Info". These classes are actually used to represent the DTO
      part of the back-end layers, thereby allowing to transfer information or
      metadata of these layers to the client.</para>

      <para>Before we explain the back-end configuration, we will shortly
      memorize some basics of the Spring configuration files. For a full
      introduction to Spring, please read the reference documentation <ulink
      url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/">http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/</ulink>.</para>

      <para>Each configuration file can contain one or more bean definitions,
      which correspond to actual Java bean instances. You can set all the
      properties of the objects using this configuration file. Primitive types
      can be set directly using a string representation of the value. When the
      value is another bean, then it can either be defined inline, or you can
      define the value using a reference. You can choose whether the
      referenced bean is defined in the same file or a different one. As long
      as the bean name is unique, and the location is added in the
      <code>contextConfigLocation</code> context parameter in the web.xml
      file, the reference is resolved.</para>

      <para>The initial bean which needs to be defined is the
      <emphasis>application</emphasis> bean.</para>

      <para><programlisting>&lt;bean name="application" class="org.geomajas.configuration.client.ClientApplicationInfo" &gt;
    &lt;property name="maps"&gt;
        &lt;list&gt;
            &lt;ref bean="sampleMap"/&gt;
        &lt;/list&gt;
    &lt;/property&gt;
    &lt;screenDpi&gt;96&lt;/screenDpi&gt;
&lt;/bean&gt;</programlisting></para>

      <para>As you can see, this defines the name of the application, the list
      of maps and an (optional) screen DPI parameter. The DPI refers to the
      resolution in pixels per inch of your monitor, for a PC its usually 96
      (our default) or 72.</para>
    </section>

    <section>
      <title>Back-end configuration</title>

      <para>The back-end configuration consists of security, transaction and
      layer configurations. It can of course be extended with additional
      Spring configuration that is needed by your custom application. There
      are two basic types of layers: raster and vector layers.</para>

      <section>
        <title>Security configuration</title>

        <para>To make sure the system can be used, you have to configure the
        security to allow access. The easiest configuration is to allow access
        to everybody.</para>

        <xi:include href="../listing/AllowAllSecurity.xml"
                    xmlns:xi="http://www.w3.org/2001/XInclude" />
      </section>

      <section>
        <title>Transaction configuration</title>

        <para>Spring has support declarative transaction management, which
        relieves us from the burden of writing our own transaction demarcation
        and exception handling code. Of course, spring transaction management
        has to be hooked up with the transaction definition and lifecycle of
        the underlying data platform (hibernate, JTA, JDBC) . Each data access
        technology should therefore provide its own implementation of the
        Spring class <code>PlatformTransactionManager</code>. For most generic
        platforms this is already part of the Spring libraries, but for
        Geotools we had to make our own implementation.</para>

        <para>Transaction management is typically only needed for editable
        database layers (although we support and encourage it for read-only
        layers as well), of which we provide two types:
        <code>HibernateLayer</code> and <code>GeoToolsLayer</code>. There is
        currently no support for having multiple platform transaction
        managers, although configurations with multiple transaction managers
        should at least theoretically be possible and the subject will be
        investigated further. In practice this means that you currently must
        not mix editable Hibernate and Geotools layers.</para>

        <para>For Hibernate layers, the following configuration should be
        used:</para>

        <programlisting>&lt;!-- DataSource Property --&gt;
&lt;bean id="simpleDataSource" class="org.apache.commons.dbcp.BasicDataSource"&gt;
  &lt;property name="driverClassName" value="org.postgresql.Driver" /&gt;
  &lt;property name="url" value="jdbc:postgresql://127.0.0.1:5432/simple" /&gt;
  &lt;property name="username" value="simple" /&gt;
  &lt;property name="password" value="simple" /&gt;
&lt;/bean&gt;


&lt;!-- Hibernate SessionFactory --&gt;
&lt;bean id="simpleSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"&gt;
  &lt;property name="dataSource" ref="simpleDataSource" /&gt;
  &lt;property name="configurationClass"&gt;
   &lt;value&gt;org.hibernate.cfg.AnnotationConfiguration&lt;/value&gt;
  &lt;/property&gt;
&lt;/bean&gt;

&lt;!-- enable the configuration of transactional behavior based on annotations --&gt;
&lt;tx:annotation-driven transaction-manager="transactionManager" /&gt;

&lt;!-- Transaction Manager --&gt;
&lt;bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"&gt;
  &lt;property name="sessionFactory" ref="simpleSessionFactory" /&gt;
&lt;/bean&gt;</programlisting>

        <para>Starting from the top, the following are defined:</para>

        <itemizedlist>
          <listitem>
            <para>The datasource : this specifies the connection pool type and
            the connection properties of the database (PostGis in this
            case)</para>
          </listitem>

          <listitem>
            <para>The session factory : this is Hibernate's primary singleton
            and used by the Hibernate layer to access the
            session/connection</para>
          </listitem>

          <listitem>
            <para>A tag to enable annotation-based transactional behavior,
            internally used by Geomajas to decide which commands need
            transaction support</para>
          </listitem>

          <listitem>
            <para>The platform transaction manager for Hibernate</para>
          </listitem>
        </itemizedlist>

        <para>For Geotools layers, the configuration is as follows:</para>

        <programlisting>&lt;!-- Geotools datastore --&gt;
&lt;bean name="simpleDatastore" class="org.geomajas.layer.geotools.DataStoreFactory" factory-method="create"&gt;
  &lt;constructor-arg&gt;
   &lt;map&gt;
    &lt;entry key="namespace" value="postgis" /&gt;
    &lt;entry key="user" value="simple" /&gt;
    &lt;entry key="passwd" value="simple" /&gt;
    &lt;entry key="database" value="simple" /&gt;
    &lt;entry key="host" value="localhost" /&gt;
    &lt;entry key="port" value="5432" /&gt;
    &lt;entry key="dbtype" value="postgis" /&gt;
   &lt;/map&gt;
  &lt;/constructor-arg&gt;
&lt;/bean&gt;

&lt;!-- enable the configuration of transactional behavior based on annotations --&gt;
&lt;tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" /&gt;

&lt;!-- Transaction Manager --&gt;
&lt;bean id="transactionManager" class="org.geomajas.layer.geotools.GeoToolsTransactionManager"&gt;
&lt;/bean&gt;</programlisting>

        <para>Starting from the top, the following are defined:</para>

        <itemizedlist>
          <listitem>
            <para>The datastore : this is geotools' primary data object and
            will be referenced in the Geotools layer. The parameters define
            the connection properties of the underlying physical medium
            (PostGis in this case)</para>
          </listitem>

          <listitem>
            <para>A tag to enable annotation-based transactional behavior,
            internally used by Geomajas to decide which commands need
            transaction support</para>
          </listitem>

          <listitem>
            <para>The platform transaction manager for Geotools</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Raster layer Configuration</title>

        <para>Raster layers are image-based layers which, depending on the
        type, may be configured to retrieve their images from WMS, Google Maps
        or OpenStreetMap (tile)servers. All raster layer implementations
        implement the <code>org.geomajas.layer.RasterLayer</code> interface,
        which means they provide an accessor for a
        <code>RasterLayerInfo</code> metadata object. The info object
        configuration is normally defined in the Spring configuration as part
        of the entire layer configuration. Depending on the type of layer,
        extra properties are needed to provide a full configuration.</para>

        <section>
          <title>WMS layer configuration</title>

          <para>Make sure your classpath contains the required plugin. If you
          are using maven, add the following dependency to your pom:</para>

          <programlisting>        &lt;dependency&gt;
            &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt;
            &lt;artifactId&gt;geomajas-layer-wms&lt;/artifactId&gt;
            &lt;version&gt;${project.version}&lt;/version&gt;
        &lt;/dependency&gt;</programlisting>

          <para>A complete WMS layer configuration looks as follows:</para>

          <programlisting>&lt;bean name="bluemarble" class="org.geomajas.layer.wms.WmsLayer" &gt;
    &lt;property name="layerInfo"
        &lt;bean class="org.geomajas.configuration.RasterLayerInfo"&gt;
            &lt;property name="dataSourceName" value="bluemarble"/&gt;
            &lt;property name="crs" value="EPSG:4326"/&gt;
            &lt;property name="maxExtent"&gt;
                &lt;bean class="org.geomajas.geometry.Bbox"&gt;
                    &lt;property name="x" value="-180"/&gt;
                    &lt;property name="y" value="-442"/&gt;
                    &lt;property name="width" value="512"/&gt;
                    &lt;property name="height" value="512"/&gt;
                &lt;/bean&gt;
            &lt;/property&gt;
            &lt;property name="resolutions"&gt;
                &lt;list&gt;
                    &lt;value&gt;0.5&lt;/value&gt;
                    &lt;value&gt;0.25&lt;/value&gt;
                    &lt;!-- more resolution values --&gt;
                &lt;/list&gt;
            &lt;/property&gt;
            &lt;property name="tileWidth" value="512"/&gt;
            &lt;property name="tileHeight" value="512"/&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;!-- When configuring your own applications, please do not use this WMS server --&gt;
    &lt;property name="baseWmsUrl" value="http://apps.geomajas.org/geoserver/wms"/&gt;
    &lt;property name="version" value="1.1.1"/&gt;
    &lt;property name="format" value="image/jpeg"/&gt;
    &lt;property name="styles" value=""/&gt;
&lt;/bean&gt;</programlisting>

          <para>As you can see, the bean class refers to the actual layer type
          : <code>org.geomajas.layer.wms.WmsLayer</code>.</para>

          <para>The first property is the layer info object, which describes
          the metadata common to all raster layers. The following properties
          are needed for this object:</para>

          <table>
            <title>Raster Layer info</title>

            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>dataSourceName</entry>

                  <entry>The name of the WMS layer. This may be a
                  comma-separated list of names as well.</entry>
                </row>

                <row>
                  <entry>crs</entry>

                  <entry>The coordinate reference system, expressed as
                  "EPSG:&lt;srid&gt;". Caveat: make sure this is the same as
                  the maps' CRS as full raster image reprojection is not
                  supported ! If the CRS's differ, an attempt will be done to
                  rescale and align the center coordinates, though.</entry>
                </row>

                <row>
                  <entry>maxExtent</entry>

                  <entry>The bounds of the layer, specified in layer
                  coordinates. After transformation to map coordinates, this
                  determines the locations and absolute size of the
                  tiles.</entry>
                </row>

                <row>
                  <entry>resolutions</entry>

                  <entry>A list of resolution values. An image or tile
                  resolution is defined as the ratio between map units and
                  pixels for a tile. If a resolution is 5 and the map unit is
                  meter, this means that 1 pixel represents a square area of 5
                  by 5 m. Images are usually optimized for a specific (set of)
                  resolution(s), so it is important to specify these here if
                  they are known. On top of that, some servers provide
                  specific tile caching for these predefined resolutions
                  (WMS-T). Care has to be taken, however: the same resolutions
                  should be defined in the map as well if one wants to avoid
                  linear distortion of the images.</entry>
                </row>

                <row>
                  <entry>tileWidth</entry>

                  <entry>Width in pixels of the requested images</entry>
                </row>

                <row>
                  <entry>tileHeight</entry>

                  <entry>Height in pixels of the requested images</entry>
                </row>

                <row>
                  <entry>parameters</entry>

                  <entry>You can define additional parameters which can be
                  passed to the WMS server. These are name/value pairs which
                  are passed in
                  <code>org.geomajas.configuration.Parameter</code>
                  objects.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para></para>

          <para>The location of the images or tiles is defined by calculating
          the real width and height (based on the resolution) and "paving" the
          maximum extent with tiles starting at the origin (x,y) of the
          extent. If no resolutions are predefined, the tiles are calculated
          by dividing the maximum extent by successive powers of 2. Make sure
          the width/height ratio of the maximum extent corresponds to the
          width/height ration of the tile.</para>

          <para>The layer object contains some extra properties which are
          specifically tied to the WMS server:</para>

          <table>
            <title>WMS layer properties</title>

            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>baseWmsUrl</entry>

                  <entry>The base url of the WMS server. This is the base part
                  (excluding the request parameters) of the url that would be
                  called to execute a WMS request.</entry>
                </row>

                <row>
                  <entry>version</entry>

                  <entry>Version of the WMS protocol which should be used.
                  Check your server configuration for possible values.</entry>
                </row>

                <row>
                  <entry>format</entry>

                  <entry>The mime type in which the images should be returned,
                  for example "image/gif". Check your server configuration for
                  possible values.</entry>
                </row>

                <row>
                  <entry>styles</entry>

                  <entry>Some WMS servers support multiple styles for their
                  layers. Check your server configuration for possible
                  values.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para></para>
        </section>

        <section>
          <title>OpenStreetMap layer configuration</title>

          <para>Make sure your classpath contains the required plugin. If you
          are using maven, add the following dependency to your pom:</para>

          <programlisting>        &lt;dependency&gt;
            &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt;
            &lt;artifactId&gt;geomajas-layer-openstreetmaps&lt;/artifactId&gt;
            &lt;version&gt;${project.version}&lt;/version&gt;
        &lt;/dependency&gt;</programlisting>

          <para>A complete OpenStreetMap layer configuration looks as
          follows:</para>

          <programlisting>&lt;bean name="osm" class="org.geomajas.layer.osm.OsmLayer" &gt;
    &lt;property name="layerInfo" /&gt;
        &lt;bean class="org.geomajas.configuration.RasterLayerInfo"&gt;
            &lt;property name="crs" value="EPSG:900913"/&gt;
            &lt;property name="maxExtent"&gt;
                &lt;bean class="org.geomajas.geometry.Bbox"&gt;
                &lt;property name="x" value="505500"/&gt;
                &lt;property name="y" value="6588000"/&gt;
                &lt;property name="width" value="2000"/&gt;
                &lt;property name="height" value="2000"/&gt;
                &lt;/bean&gt;
            &lt;/property&gt;
            &lt;property name="resolutions"&gt;
                &lt;list&gt;
                    &lt;value&gt;156543.03&lt;/value&gt;
                    &lt;value&gt;78271.52&lt;/value&gt;
                    &lt;value&gt;39135.76&lt;/value&gt;
                    &lt;value&gt;19567.88&lt;/value&gt;
                    &lt;value&gt;9783.94&lt;/value&gt;
                    &lt;value&gt;4891.97&lt;/value&gt;
                    &lt;value&gt;2445.98&lt;/value&gt;
                    &lt;value&gt;1222.99&lt;/value&gt;
                    &lt;value&gt;611.49&lt;/value&gt;
                    &lt;value&gt;305.75&lt;/value&gt;
                    &lt;value&gt;152.874057&lt;/value&gt;
                    &lt;value&gt;76.4370283&lt;/value&gt;
                    &lt;value&gt;38.2185141&lt;/value&gt;
                    &lt;value&gt;19.1092571&lt;/value&gt;
                    &lt;value&gt;9.55462853&lt;/value&gt;
                    &lt;value&gt;4.77731427&lt;/value&gt;
                    &lt;value&gt;2.38865713&lt;/value&gt;
                    &lt;value&gt;1.19432857&lt;/value&gt;
                &lt;/list&gt;
            &lt;/property&gt;
            &lt;property name="tileWidth" value="256"/&gt;
            &lt;property name="tileHeight" value="256"/&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>

          <para>The layer info inner bean has the same general content as
          usual, with one exception : the dataSourceName property is not
          necessary in this case. As with the WMS layer, the resolutions have
          been carefully chosen to match the tile server's resolutions. The
          tile width and height are implied by the server in this case but
          since they are required metadata for all raster layers, they should
          be set to the server's values : 256 x 256.</para>
        </section>

        <section>
          <title>Google Maps layer configuration</title>

          <para>TODO</para>
        </section>
      </section>

      <section>
        <title>Vector layer configuration</title>

        <para>Vector are layers of homogeneous vectorial features that are
        backed by shapefiles or database tables. All vector layer
        implementations implement the
        <code>org.geomajas.layer.VectorLayer</code> interface, which means
        they provide an accessor for a <code>VectorLayerInfo</code> metadata
        object. The info object configuration is normally defined in the
        Spring configuration as part of the entire layer configuration.
        Depending on the type of layer, extra properties are needed to provide
        a full configuration.</para>

        <section>
          <title>Hibernate layer configuration</title>

          <para>The Hibernate layer is based on the popular Hibernate ORM
          framework. It uses a special spatial extension of Hibernate,
          unsurprisingly called Hibernate Spatial. The Hibernate Spatial
          project has its project website at <ulink
          url="http://www.hibernatespatial.org/">http://www.hibernatespatial.org</ulink>.
          The spatial extensions or dialects (in Hibernate language) allow the
          definition of spatial types and the execution of spatial queries in
          a database independent way.</para>

          <para>A Hibernate layer cannot be defined by configuration only. As
          in every OM-based model, there first has to be a mapping between
          Java classes and tables in the database. In the most simple case
          there is a one-to-one mapping between a single class and a single
          spatial table.</para>

          <para>The following listing shows the (partial) definition of a
          Hibernate annotated Java class <code>Roads.java</code> that is
          mapped to a table <code>roads</code> in the
          database.<programlisting>@Entity
@Table(name = "roads")
public class Road {

    @Id
    @GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)
    @Column(name = "gid")
    private Long gid;
    private String type;
    private Float length;

    @Type(type = "org.hibernatespatial.GeometryUserType")
    @Column(name = "the_geom")
    private Geometry geometry;

   (...)
}</programlisting></para>

          <para>As usual, the field annotations describe the relation between
          the fields of the class and the columns in the table. A special
          annotation <code>@Type</code> with type
          <code>org.hibernatespatial.GeometryUserType</code> is used to map
          the <code>geometry</code> field to the <code>the_geom</code> spatial
          column. This is all that is typically needed to map a Java class to
          a spatial table.</para>

          <para>Once the Java class mapping is finished, the actual layer
          configuration can be made. An example configuration that matches the
          <code>Roads.java</code> class is shown below:</para>

          <programlisting>&lt;bean name="roads" class="org.geomajas.layer.hibernate.HibernateLayer"&gt;
    &lt;property name="layerInfo" ref="roadsInfo" /&gt;
    &lt;property name="featureModel"&gt;
        &lt;bean class="org.geomajas.layer.hibernate.HibernateFeatureModel"&gt;
            &lt;property name="sessionFactory" ref="simpleSessionFactory" /&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="sessionFactory" ref="simpleSessionFactory" /&gt;
    &lt;property name="dateFormat" ref="simpleDateFormat" /&gt;
&lt;/bean&gt;</programlisting>

          <para>The first property <code>layerInfo</code> is the reference to
          the <code>VectorLayerInfo</code> object. While it can be defined
          inline, it has been defined as an outer bean for clarity here. We
          will come back to it soon.</para>

          <para>The <code>featureModel</code> property refers to the internal
          feature accessor face of the layer. This property will probably be
          removed as it has no additional configuration parameters for the
          moment.</para>

          <para>The <code>sessionFactory</code> property refers to the
          Hibernate session factory. This is the same factory that has to be
          defined by the transaction configuration.</para>

          <para>The <code>dateFormat</code> property determines how the layer
          will convert date values to strings and vice versa.</para>

          <para>As already mentioned, the bulk part of the layer's metadata is
          defined through the <code>VectorLayerInfo</code> object. An example
          definition of this object is given below:</para>

          <para><programlisting>&lt;bean name="roadsInfo" class="org.geomajas.configuration.VectorLayerInfo"&gt;
        &lt;property name="layerType" value="MULTILINESTRING" /&gt;
        &lt;property name="crs" value="EPSG:900913" /&gt;
        &lt;property name="maxExtent"&gt;
            &lt;bean class="org.geomajas.geometry.Bbox"&gt;
                &lt;property name="x" value="505500" /&gt;
                &lt;property name="y" value="6588000" /&gt;
                &lt;property name="width" value="2000" /&gt;
                &lt;property name="height" value="2000" /&gt;
            &lt;/bean&gt;
        &lt;/property&gt;
        &lt;property name="featureInfo" ref="roadsFeatureInfo" /&gt;
        &lt;property name="namedStyleInfos"&gt;
            &lt;list&gt;
                &lt;ref bean="roadsStyleInfo" /&gt;
            &lt;/list&gt;
        &lt;/property&gt;
    &lt;/bean&gt;</programlisting></para>

          <para>The following table describes the properties of the
          <code>VectorLayerInfo</code> object:</para>

          <para><table>
              <title>VectorLayer info</title>

              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Property</entry>

                    <entry>Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>layerType</entry>

                    <entry>This property determines the type of the default
                    geometry of the features. The following types are
                    supported : POINT, LINESTRING, POLYGON, MULTIPOINT,
                    MULTILINESTRING and MULTIPOLYGON</entry>
                  </row>

                  <row>
                    <entry>crs</entry>

                    <entry>The coordinate reference system, expressed as
                    "EPSG:&lt;srid&gt;". This is probably determined by the
                    layer, but has to be specified anyhow as we have no
                    autodetection in place yet..</entry>
                  </row>

                  <row>
                    <entry>maxExtent</entry>

                    <entry>The bounds of the layer, specified in layer
                    coordinates. After transformation to map coordinates, this
                    determines the locations and absolute size of the
                    tiles.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>

          <para>The feature metadata can be found in the
          <code>FeatureInfo</code> object. This objects contains the complete
          feature type description (id, attributes and geometry) as well as
          the validation rules for the attributes. An example definition of
          this object is given below:</para>

          <para><programlisting></programlisting></para>

          <para>The following table describes the properties of the
          <code>VectorLayerInfo</code> object:</para>

          <para>TODO</para>
        </section>

        <section>
          <title>GeoTools layer configuration</title>

          <para>Apart from a reference to the layer info, you can set the
          following parameters :</para>

          <table>
            <title>Raster Layer info</title>

            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>url</entry>

                  <entry>Url for the data source, typically used for accessing
                  files.</entry>
                </row>

                <row>
                  <entry>dbtype</entry>

                  <entry>Database type, useful when the data store is a
                  database.</entry>
                </row>

                <row>
                  <entry>parameters</entry>

                  <entry>You can define additional parameters which can be
                  passed to the GeoTools data store. These are name/value
                  pairs which are passed in
                  <code>org.geomajas.configuration.Parameter</code>
                  objects.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>In most cases, you will need to pass data using the parameters
          property to get a functional GeoTools layer. This would look similar
          to this:</para>

          <programlisting>&lt;bean name="blabla" class="org.geomajas.layer.geotools.GeoToolsLayer"&gt;
    &lt;property name="parameters"&gt;
        &lt;list&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="WFSDataStoreFactory:GET_CAPABILITIES_URL" /&gt;
                &lt;property name="value" value="aaaaaaa" /&gt;
            &lt;/bean&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="WFSDataStoreFactory:TIMEOUT" /&gt;
                &lt;property name="value" value="bbbbbbb" /&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
    &lt;property name="layerInfo" ref="blablaInfo" /&gt;
&lt;/bean&gt; </programlisting>

          <para>The names which are valid depend on the GeoTools data
          store.</para>

          <para>To access a WFS server, the following names can be used as
          parameters.</para>

          <para><itemizedlist>
              <listitem>
                <para><emphasis>WFSDataStoreFactory:GET_CAPABILITIES_URL</emphasis>
                : Represents a URL to the getCapabilities document or a server
                instance.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:PROTOCOL</emphasis> : Sets
                a preference for the HTTP protocol to use when requesting WFS
                functionality. Set this value to "true" for POST, "false" for
                GET or NULL for AUTO.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:USERNAME</emphasis> : This
                allows the user to specify a username. This parameter should
                not be used without the password parameter.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:PASSWORD</emphasis> : This
                allows the user to specify a password. This param should not
                be used without the username param.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:TIMEOUT</emphasis> : This
                allows the user to specify a timeout in milliseconds. This
                param has a default value of 3000ms.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:BUFFER_SIZE</emphasis> :
                This allows the user to specify a buffer size in features.
                This param has a default value of 10 features.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:TRY_GZIP</emphasis> :
                Indicates that datastore should use gzip to transfer data if
                the server supports it. Default is true.</para>
              </listitem>

              <listitem>
                <para><emphasis>WFSDataStoreFactory:LENIENT</emphasis> :
                Indicates that datastore should do its best to create features
                from the provided data even if it does not accurately match
                the schema. Errors will be logged but the parsing will
                continue if this is true. Default is false.</para>
              </listitem>
            </itemizedlist></para>

          <para>You also have to assure the GeoTools WFS data store is added
          as dependecy in your project. When using maven, you can add the
          following dependency.</para>

          <programlisting>&lt;dependency&gt;
      &lt;groupId&gt;org.geotools&lt;/groupId&gt;
      &lt;artifactId&gt;gt-wfs&lt;/artifactId&gt;
      &lt;version&gt;${geotools-version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
        </section>

        <section>
          <title>Bean layer configuration</title>

          <para>TODO</para>
        </section>

        <section>
          <title>In memory shape layer configuration</title>

          <para>This layer is backed by a shape file that is loaded in memory
          at startup. All layer updates are performed in memory, so this layer
          is not really useful except for examples.</para>
        </section>
      </section>
    </section>

    <section>
      <title>Map configuration</title>

      <para>A map is a client side object. The Geomajas backend works almost
      exclusively on layers.TODO<footnote>
          <para>The only current exception is the printing command which
          converts maps to PDF document. Clearly this also uses the map
          configuration.</para>
        </footnote>On the client side however, these layers are combined into
      maps. In general, the backend never needs to know which map the layer is
      displayed in when doing its work. However the backend does need to know
      the coordinate reference system which is used.</para>

      <programlisting>&lt;bean name="sampleMap" class="org.geomajas.configuration.client.ClientMapInfo"&gt;
    &lt;property name="crs" value="EPSG:4326"/&gt;
    &lt;property name="displayUnitType" value="METRIC"/&gt;
    &lt;property name="maximumScale" value="99999999"/&gt;
    &lt;property name="initialBounds"&gt;
        &lt;bean class="org.geomajas.geometry.Bbox"&gt;
            &lt;property name="x" value="-31.44"/&gt;
            &lt;property name="y" value="-37.43"/&gt;
            &lt;property name="width" value="89.83"/&gt;
            &lt;property name="height" value="89.83"/&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="layers"&gt;
        &lt;list&gt;
            &lt;ref bean="bluemarbleLayer"/&gt;
            &lt;ref bean="countriesLayer"/&gt;
        &lt;/list&gt;
    &lt;/property&gt;

    &lt;!-- other configurations --&gt;
&lt;/bean&gt;
</programlisting>

      <para>The layers refers to the layer configuration, not the actual
      layers (as were referred in the application bean).</para>

      <para>For the client side, a lot of additional information can be
      included in the map configuration. This includes information about the
      styles used for displaying the map.</para>

      <programlisting>    &lt;property name="backgroundColor" value="#FFFFFF" /&gt;
    &lt;property name="lineSelectStyle"&gt;
        &lt;bean class="org.geomajas.configuration.StyleInfo"&gt;
            &lt;property name="fillOpacity" value="0" /&gt;
            &lt;property name="strokeColor" value="#FF6600" /&gt;
            &lt;property name="strokeOpacity" value="1" /&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="pointSelectStyle"&gt;
        &lt;bean class="org.geomajas.configuration.StyleInfo"&gt;
            &lt;property name="fillColor" value="#FFFF00" /&gt;
            &lt;property name="fillOpacity" value=".6" /&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="polygonSelectStyle"&gt;
        &lt;bean class="org.geomajas.configuration.StyleInfo"&gt;
            &lt;property name="fillColor" value="#FFFF00" /&gt;
            &lt;property name="fillOpacity" value=".6" /&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="scaleBarEnabled" value="true"/&gt;
    &lt;property name="panButtonsEnabled" value="true"/&gt;
</programlisting>

      <para>A map typically also contains a tool bar. This can also be
      defined.</para>

      <programlisting>    &lt;property name="toolbar"&gt;
        &lt;bean class="org.geomajas.configuration.ToolbarInfo"&gt;
            &lt;property name="id" value="sampleToolbar"/&gt;
            &lt;property name="tools"&gt;
                &lt;list&gt;
                    &lt;ref bean="ZoomIn"/&gt;
                    &lt;ref bean="ZoomOut"/&gt;
                    &lt;ref bean="ZoomToRectangleMode"/&gt;
                    &lt;ref bean="PanMode"/&gt;
                    &lt;ref bean="ToolbarSeparator"/&gt;
                    &lt;ref bean="ZoomPrevious"/&gt;
                    &lt;ref bean="ZoomNext"/&gt;
                    &lt;ref bean="ToolbarSeparator"/&gt;
                    &lt;ref bean="DeselectAll"/&gt;
                    &lt;ref bean="ToolbarSeparator"/&gt;
                    &lt;ref bean="FeatureInfoMode"/&gt;
                    &lt;ref bean="ShowDefaultPrint"/&gt;
                    &lt;ref bean="PrintMode"/&gt;
                &lt;/list&gt;
            &lt;/property&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
</programlisting>

      <para>Obviously the tools themselves need to be defined as well. You can
      pass some parameters to the tools. An example tool definition look like
      this.</para>

      <programlisting>&lt;bean name="ZoomIn" class="org.geomajas.configuration.ToolInfo"&gt;
    &lt;property name="id" value="ZoomIn"/&gt;
    &lt;property name="parameters"&gt;
        &lt;list&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="delta"/&gt;
                &lt;property name="value" value="2"/&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</programlisting>

      <para>Note that the tool id and the names of the parameters are
      interpreted by the client, so it is the client face which defines the
      possible values.</para>

      <para>Last but not least, you can also configure the layer tree
      component which may be connected to the map.</para>

      <programlisting>    &lt;property name="layerTree"&gt;
        &lt;bean class="org.geomajas.configuration.LayerTreeInfo"&gt;
            &lt;property name="id" value="sampleSearchTree"/&gt;
            &lt;property name="tools"&gt;
                &lt;list&gt;
                    &lt;ref bean="LayerVisibleTool"/&gt;
                    &lt;ref bean="LayerLabeledTool"/&gt;
                &lt;/list&gt;
            &lt;/property&gt;
            &lt;property name="treeNode"&gt;
                &lt;bean class="org.geomajas.configuration.LayerTreeNodeInfo"&gt;
                    &lt;property name="label" value="Layers" /&gt;
                    &lt;property name="treeNodes"&gt;
                        &lt;list&gt;&lt;/list&gt;
                    &lt;/property&gt;
                    &lt;property name="layerIds"&gt;
                        &lt;list&gt;
                          &lt;value&gt;bluemarble&lt;/value&gt;
                          &lt;value&gt;countries&lt;/value&gt;
                        &lt;/list&gt;
                    &lt;/property&gt;
                    &lt;property name="expanded" value="true" /&gt;
                &lt;/bean&gt;
            &lt;/property&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
</programlisting>

      <para>This defines the tools which are available in the layer tree
      widget, and the tree of layers (as a node, which can contain a list of
      nodes etc).</para>

      <para>Note that the layers are referred here by id, as defined in the
      layer configuration info.</para>
    </section>

    <section>
      <title>Layer configuration</title>

      <para>Layer configuration is split in two (linked) parts. You have to
      create the actual layer which is used n the backend, and this layer
      needs to know the configuration information which is also used on the
      client side. Secondly, there is a distinction between raster and vector
      layers as they each needs a lot of specific information.</para>

      <section>
        <title>Raster layer</title>

        <para></para>
      </section>

      <section>
        <title>Vector layer</title>

        <para>Vector layers are feature-based layers that are backed by
        shapefiles or database tables.</para>

        <para>The definition of the actual layer is similar to the definition
        of a raster layer.</para>

        <programlisting>&lt;bean name="countries" class="org.geomajas.layer.shapeinmem.ShapeInMemLayer" &gt;
    &lt;property name="layerInfo" ref="countriesInfo" /&gt;
    &lt;property name="url" value="classpath:shapes/africa/country.shp"/&gt;
&lt;/bean&gt;</programlisting>

        <para>The "layerInfo" property always needs to be set. Other
        properties depend on the layer class (options are detailed
        below).</para>

        <para>For the layer configuration, you have to create the layer info
        object.</para>

        <programlisting>&lt;bean name="countriesInfo" class="org.geomajas.configuration.VectorLayerInfo"&gt;
    &lt;property name="id" value="countries"/&gt;
    &lt;property name="label" value="Countries of Africa"/&gt;
    &lt;property name="visible" value="true"/&gt;
    &lt;property name="layerType" value="MULTIPOLYGON"/&gt;
    &lt;property name="crs" value="EPSG:4326"/&gt;
    &lt;property name="viewScaleMin" value="0"/&gt;
    &lt;property name="viewScaleMax" value="100000"/&gt;
    &lt;property name="maxExtent"&gt;
        &lt;bean class="org.geomajas.geometry.Bbox"&gt;
            &lt;property name="x" value="-85.05112877980659"/&gt;
            &lt;property name="y" value="-85.05112877980659"/&gt;
            &lt;property name="width" value="170.102257"/&gt;
            &lt;property name="height" value="170.102257"/&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
</programlisting>

        <para>This defines the details common to both raster and vector
        layers, like layer id, crs, layer type, max extent (bounding box)
        etc.</para>

        <programlisting>    &lt;property name="featureInfo" ref="countriesFeatureInfo" /&gt;
    &lt;property name="labelAttribute"&gt;
        &lt;bean class="org.geomajas.configuration.LabelAttributeInfo"&gt;
            &lt;property name="labelAttributeName" value="CNTRY_NAME"/&gt;
            &lt;property name="fontStyle"&gt;
                &lt;bean class="org.geomajas.configuration.StyleInfo"&gt;
                    &lt;property name="fillColor" value="#000000"/&gt;
                    &lt;property name="fillOpacity" value="1"/&gt;
                &lt;/bean&gt;
            &lt;/property&gt;
            &lt;property name="backgroundStyle"&gt;
                &lt;bean class="org.geomajas.configuration.StyleInfo"&gt;
                    &lt;property name="fillColor" value="#FFFFFF"/&gt;
                    &lt;property name="fillOpacity" value="0"/&gt;
                    &lt;property name="strokeColor" value="#000000"/&gt;
                    &lt;property name="strokeOpacity" value="0"/&gt;
                    &lt;property name="strokeWidth" value="1"/&gt;
                &lt;/bean&gt;
            &lt;/property&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
</programlisting>

        <para>There is also the definition of the features (featureInfo), and
        the style which needs to be used for the label. Note that the
        <emphasis>labelAttributeName</emphasis> refers to the name of an
        attribute as defined in the feature info.</para>

        <programlisting>    &lt;property name="styleDefinitions"&gt;
        &lt;list&gt;
            &lt;bean class="org.geomajas.configuration.StyleInfo"&gt;
                &lt;property name="id" value="1"/&gt;
                &lt;property name="name" value="OPEC and UNESCO Member"/&gt;
                &lt;property name="formula" value="((OPEC == 1) AND (UNESCO == 1))"/&gt;
                &lt;property name="fillColor" value="#995500"/&gt;
                &lt;property name="fillOpacity" value=".6"/&gt;
                &lt;property name="strokeColor" value="#995500"/&gt;
                &lt;property name="strokeOpacity" value=".3"/&gt;
                &lt;property name="strokeWidth" value="1"/&gt;
            &lt;/bean&gt;
            &lt;!-- more style definitions --&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>

        <para>Last but not least, you can define one or more style definitions
        which should be used for rendering of the layer. You can define
        formulas to determine which style should be used. The first style
        which passes the formula will be applied for the feature.</para>

        <para>We also have to define the features.</para>

        <programlisting>&lt;bean class="org.geomajas.configuration.FeatureInfo" name="countriesFeatureInfo"&gt;
    &lt;property name="dataSourceName" value="country"/&gt;
    &lt;property name="identifier"&gt;
        &lt;bean class="org.geomajas.configuration.PrimitiveAttributeInfo"&gt;
            &lt;property name="label" value="Id"/&gt;
            &lt;property name="name" value="ID"/&gt;
            &lt;property name="type" value="LONG"/&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="geometryType"&gt;
        &lt;bean class="org.geomajas.configuration.GeometryAttributeInfo"&gt;
            &lt;property name="name" value="the_geom"/&gt;
            &lt;property name="editable" value="false"/&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="attributes"&gt;
        &lt;list&gt;
            &lt;bean class="org.geomajas.configuration.PrimitiveAttributeInfo"&gt;
                &lt;property name="label" value="Name"/&gt;
                &lt;property name="name" value="CNTRY_NAME"/&gt;
                &lt;property name="editable" value="true"/&gt;
                &lt;property name="identifying" value="true"/&gt;
                &lt;property name="type" value="STRING"/&gt;
            &lt;/bean&gt;
            &lt;bean class="org.geomajas.configuration.PrimitiveAttributeInfo"&gt;
                &lt;property name="label" value="Label"/&gt;
                &lt;property name="name" value="COUNTRY"/&gt;
                &lt;property name="editable" value="false"/&gt;
                &lt;property name="identifying" value="true"/&gt;
                &lt;property name="type" value="STRING"/&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</programlisting>

        <para>This defines the identifier, geometry object and attributes for
        the feature.</para>

        <para>Attributes can be either primitive attributes or association
        attributes. Primitive attributes represent primitive Java types as
        well as some common types like Date and String. The following
        primitive attribute types are defined: BOOLEAN, SHORT, INTEGER, LONG,
        FLOAT, DOUBLE, CURRENCY, STRING, DATE, URL and IMGURL. Association
        attributes represent non-primitive Java types. There are two types of
        association attributes defined: MANY-TO-ONE and ONE-TO-MANY. These
        reflect the many-to-one and one-to-many relationships as defined in an
        entity-relationship model and can only be used in conjunction with the
        <code>HibernateLayer</code>.</para>

        <section>
          <title>Validation</title>

          <para>Most feature attributes should be validated before they can be
          saved to a file or database. Validation is a concern that stretches
          across many layers of a typical application: there is usually a need
          for client-side validation (making the app more user friendly) ,
          server-side validation (to protect the server from invalid data) as
          well as database validation (to preserve data integrity). Preferably
          validation rules should be defined as much as possible in a single
          place to avoid conflicts and duplication.</para>

          <para>Our attribute configuration supports several types of
          validation by defining a <code>"validator"</code> property inside
          the attribute:</para>

          <programlisting>&lt;property name="validator"&gt;
    &lt;bean class="org.geomajas.configuration.ValidatorInfo"&gt;
        &lt;property name="constraints"&gt;
            &lt;list&gt;
                &lt;bean class="org.geomajas.configuration.DecimalMinConstraintInfo"&gt;
                    &lt;property name="value" value="0"/&gt;
                &lt;/bean&gt;
            &lt;/list&gt;
        &lt;/property&gt;
        &lt;property name="toolTip" value="Area you may wish to fill in."/&gt;
    &lt;/bean&gt;
&lt;/property&gt;</programlisting>

          <para>This property contains some general validator information and
          a set of constraints that should be applied to the attribute. The
          available constraint types have been based on the new JavaBeans
          standard : JSR-303.</para>
        </section>
      </section>

      <section>
        <title>Layer specific configurations</title>

        <para></para>

        <section>
          <title>Shape in memory layer</title>

          <para>The shape in memory layer has a few settings which should be
          set</para>

          <para><table>
              <title>ShapeInMemLayer configuration</title>

              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>ShapeInMemLayer configuration</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>url</entry>

                    <entry>Url for the shape file. Apart from standard
                    protocols supported by java, you can also use the
                    "classpath:" protocol (the resource location should not
                    start with a slash) to refer to shape files on the
                    classpath.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </section>

        <section>
          <title>Geotools layer</title>

          <para>The Geotools layer has a few settings which should be
          set</para>

          <para><table>
              <title>GeotoolsLayer configuration</title>

              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>GeotoolsLayer configuration</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>url</entry>

                    <entry>Url for the shape file. Apart from standard
                    protocols supported by java, you can also use the
                    "classpath:" protocol (the resource location should not
                    start with a slash) to refer to shape files on the
                    classpath.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </section>

        <section>
          <title>WMS layer</title>

          <para>The WMS layer has a few settings which should be set</para>

          <para><table>
              <title>WmsLayer configuration</title>

              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>WmsLayer configuration</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>baseWmsUrl</entry>

                    <entry>Base url of the WMS server.</entry>
                  </row>

                  <row>
                    <entry>format</entry>

                    <entry></entry>
                  </row>

                  <row>
                    <entry>version</entry>

                    <entry>Version of the WMS format which should be used.
                    Check your server configuration for possible
                    values.</entry>
                  </row>

                  <row>
                    <entry>styles</entry>

                    <entry>Styles parameter for the generates image.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </section>

        <section>
          <title>Google layer</title>

          <para>This layer does not need additional configuration. It gets all
          the parameters from the layer configuration information.</para>
        </section>

        <section>
          <title>Openstreetmaps layer</title>

          <para>This layer does not need additional configuration. It gets all
          the parameters from the layer configuration information.</para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter id="chapter-api">
    <title>API</title>

    <section>
      <title>API annotation</title>

      <para>As there "backwards compatible" guarantee for versions with the
      same minor version (the Y in vX.Y.Z) only refers to what is considered
      API, it is important that it is clear which classes and interfaces and
      which methods in these classes and interfaces are considered as part of
      the API.</para>

      <para>For this reason, we have introduced the "@Api" annotation. A class
      of interface is only considered part of the public API when it is
      annotated using "<code>@Api</code>". When all public methods in the
      class or interface are considered part of the API, you could use
      "<code>@Api(allMethods = true)</code>". The alternative is to annotate
      the individual methods.</para>

      <para>The API includes many interfaces. These interfaces should only be
      implemented by client code when they are annotated by
      "<code>@<code>UserImplemented</code></code>". All other interfaces are
      provided to indicate the methods available on instances which are
      obtained through the API and may have extra methods added in future
      versions.</para>
    </section>

    <section>
      <title>Backend API</title>

      <para>The full details about the API can be found in the published
      javadoc, available on the Geomajas site at
      <uri>http://www.geomajas.org/gis-documentation</uri>. There you can find
      the links for the different versions.</para>

      <para>There API for the Geomajas backend is contained in the
      geomajas-api module. This contains only interfaces, exceptions and data
      transfer objects. The data transfer objects are classes which only
      contain getters and setters. The backend API is divided in the following
      packages :</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>command</emphasis> : interfaces, services and data
          transfer objects related with the command extension points.</para>
        </listitem>

        <listitem>
          <para><emphasis>configuration</emphasis> : data transfer objects
          which are used for defining the configuration in Geomajas.</para>
        </listitem>

        <listitem>
          <para><emphasis>geometry</emphasis> : Geomajas geometry related data
          transfer objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>global</emphasis> : Some general interfaces,
          annotations and exceptions which are relevant for a combination of
          several extension points or the entire API.</para>
        </listitem>

        <listitem>
          <para><emphasis>layer</emphasis> : interfaces, exceptions, data
          transfer objects and some internal objects related with the layers
          and objects in a layer. These include the definition of a layer,
          tiles, features and feature models.</para>
        </listitem>

        <listitem>
          <para><emphasis>security</emphasis> : interfaces, services and data
          transfer objects related with the security extension points and
          security handling.</para>
        </listitem>

        <listitem>
          <para><emphasis>service</emphasis> : services provided by Geomajas,
          some are utilities, others (like raster and vector layer) provide
          more fundamental functionalities.</para>
        </listitem>
      </itemizedlist>

      <para>The backend also contains a module geomajas-api-experimental. This
      contains some experimental stuff which may be promoted to the supported
      API when useful, or may be changed or dumped. As this is
      <emphasis>not</emphasis> part of the API, it may changes between
      revisions.</para>
    </section>

    <section>
      <title>Command and plugins API</title>

      <para>For commands and plugins, the same rule applies as for the backend
      API. That means that the "<code>@Api</code>" annotation indicates the
      stability of the interfaces, classes and methods.</para>

      <para>These classes can typically be found in packages containing
      "command.dto" for command request and response objects or packages
      containing "configuration" for objects which are expected to be defined
      from the spring configuration files.</para>
    </section>

    <section>
      <title>GWT face API</title>

      <para>The GWT plugin also uses the "<code>@Api</code>" annotation to
      indicate classes and methods which are supported to remain stable
      between minor versions of the face.</para>

      <para>You can expect to find this annotation on all widgets, though it
      is likely that not all public methods will be considered part of the
      API.</para>
    </section>
  </chapter>

  <chapter id="chapter-commands">
    <title>Commands</title>

    <sect1>
      <title>Provided Commands</title>

      <para>The commands are all registered in the spring context. The
      "registry key" as indicated below is used to retrieve the commands.
      These are services, so a singleton should be sufficient for this.</para>

      <para>The default naming for the keys is derived from the fully
      qualified class name. This is automatically assigned when the command is
      in a (sub package of) the "command" package. To determine the bean name,
      all parent packages of the "command" package are removed. Then the name
      is simplified. It will end up having "command." as prefix, optionally
      followed by a package, followed by the name. As there already is a
      "command" prefix, the "Command" suffix is removed from the name if
      present. When the resulting name starts or end with the sub package,
      then that is removed as well. For example the
      "org.geomajas.command.configuration.GetConfigurationCommand" class will
      get "command.configuration.Get" as registry key.</para>

      <para><table>
          <title>GetConfigurationCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>GetConfigurationCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.configuration.Get</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.EmptyCommandRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry>none</entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>Get the client side configuration information. This
                returns information about all maps which have been
                configured.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.GetConfigurationResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>name</emphasis> : name of the
                      application.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>maps</emphasis> : list of configured
                      maps for the application. Note that the layer
                      information which is contained in the maps has the
                      coordinates. transformed according to the crs of the
                      map.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>screenDpi</emphasis> : screen resolution
                      in dots per inch.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>GetMapConfigurationCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>GetMapConfigurationCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.configuration.GetMap</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.GetMapConfigurationRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>mapId</emphasis> : id of map for which
                      the information should be returned.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>Get the client side configuration information for the
                specified map.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.GetMapConfigurationResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para>mapInfo : information about the requested map.
                      Note that the layer information which is contained in
                      the maps has the coordinates.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>PrintGetTemplateCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>GetTemplatePrintCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.print.GetTemplate</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-plugin-printing</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.extension.printing.command.dto.PrintGetTemplateRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>template</emphasis> : ?????</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>fileName</emphasis> : ?????</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>pageSize</emphasis> : ?????</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>?????</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.extension.printing.command.dto.PrintGetTemplateResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>documentId</emphasis> :</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>PrintListTemplatesCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>ListTemplatesCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.print.ListTemplates</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-plugin-printing</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.EmptyCommandRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry>none</entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>?????</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.extension.printing.command.dto.PrintListTemplatesResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>templates</emphasis> : list of possible
                      print templates.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>LogCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>LogCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.general.Log</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.LogRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>level</emphasis> : log level, 0 for
                      debug, 1 for info, 2 for warn, 3 for error.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>statement</emphasis> : string which
                      needs to be logged.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>This allows you to send a statement to the server side
                which will be logged there.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.CommandResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry>none</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>MergePolygonCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>MergePolygonCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.geometry.MergePolygon</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>PersistTransactionCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>PersistFeatureTransactionCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.feature.PersistTransaction</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>?????</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>RetrieveRasterDataCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>RetrieveRasterDataCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.render.RetrieveRasterData</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>?????</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>RetrieveRenderedTileCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>RetrieveRenderedTileCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.render.RetrieveRenderedTile</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>?????</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>PrintSaveTemplateCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>SavePrintTemplateCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.print.SaveTemplate</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-plugin-printing</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>?????</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>SearchByLocationCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>SearchByLocationCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.SearchByLocation</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.SearchByLocationRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>

                    <listitem>
                      <para><emphasis>featureIncludes</emphasis> : indication
                      of which data to include in the feature. Possible values
                      (add to combine) : 1=attributes, 2=geometry, 4=style,
                      8=label. Default value is to include everything.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>?????</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.SearchByLocationResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>SearchFeatureCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>SearchFeaturesCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.feature.Search</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry>org.geomajas.command.dto.SearchFeatureRequest</entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>layerId</emphasis> : id of layer on
                      which features need to be searched.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>crs</emphasis> : crs which needs to be
                      used for the geometry in the retrieved features.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>criteria</emphasis> : array of criteria
                      which need to be matched when searching. Each criterion
                      contains the attribute name, the operator (options
                      include "like" and "contains") and the value to compare.
                      Note that the value usually needs to be contained in
                      single quotes.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>booleanOperator</emphasis> : operator
                      which should be used to the different criteria when more
                      than one was specified. Should be either "and" or
                      "or".</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>filter</emphasis> : an additional layer
                      filter which needs to be applied when searching.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>featureIncludes</emphasis> : indication
                      of which data to include in the feature. Possible values
                      (add to combine) : 1=attributes, 2=geometry, 4=style,
                      8=label. Default value is to include everything.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>Search features for a layer. You can specify multiple
                search criteria and a filter.</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry>org.geomajas.command.dto.SearchFeatureResponse</entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para><emphasis>layerId</emphasis> : id of the layer
                      which contains the features. Equals the layerId
                      parameter from the request.</para>
                    </listitem>

                    <listitem>
                      <para><emphasis>features</emphasis> : array of features
                      which match the search criteria. Any geometry contained
                      in the features uses the request crs.</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>SplitPolygonCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>SplitPolygonCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.geometry.SplitPolygon</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>?????</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para><table>
          <title>UserMaximumExtentCommand</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>UserMaximumExtentCommand</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Registry key</entry>

                <entry>command.configuration.UserMaximumExtent</entry>
              </row>

              <row>
                <entry>Module which provides this command</entry>

                <entry>geomajas-command</entry>
              </row>

              <row>
                <entry>Request object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Parameters</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>Description</entry>

                <entry>?????</entry>
              </row>

              <row>
                <entry>Response object class</entry>

                <entry></entry>
              </row>

              <row>
                <entry>Response values</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para></para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
    </sect1>

    <sect1>
      <title>Writing your own Commands</title>

      <para>A Geomajas command consist of three class, the actual command
      (which implements the <code>Command</code> interface), and two data
      transfer objects, one to pass the request parameters (extending
      <code>CommandRequest</code> or <code>LayerIdCommandRequest</code>), and
      one which carries the response (extending
      <code>CommandResponse</code>).</para>

      <para>It is important to assure your request object extends from
      LayerIdCommandRequest when one of the parameters is the layer id. This
      is used by the command dispatcher to assure the layer specific
      interceptors are called when needed.</para>

      <para>To create a new command we recommend you use a similar package
      structure as we used in the geomajas-extension-command module. That is
      to create a "command" package with under that a "dto" package which
      contains all the request and response objects, and to put the actual
      commands in sub packages based on some kind of grouping.</para>

      <para>The basic command implementation looks like this :</para>

      <programlisting>package com.my.program.command.mysuper;

import com.my.program.command.mysuper.MySuperDoItRequest;
import com.my.program.command.mysuper.MySuperDoItResponse;
import org.geomajas.command.Command;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import org.springframework.stereotype.Component;

@Component()
public class MySuperDoItCommand implements Command&lt;MySuperDoItRequest, MySuperDoItResponse&gt; {

    private final Logger log = LoggerFactory.getLogger(MySuperDoItCommand.class);

    public MySuperDoItResponse getEmptyCommandResponse() {
        return new MySuperDoItResponse();
    }

    public void execute(LogRequest request, MySuperDoItResponse response) throws Exception {
        log.debug("called");
        // ..... perform the actual command
    }

}</programlisting>

      <para>Note the presence of the "@Component" annotation which assure the
      command is registered. You could add the name under which the command
      needs to be registered in the annotation, but when that is omitted, the
      default command name is derived from the fully qualified class name. In
      the example given here this results in command name
      "command.mysuper.DoIt".</para>

      <para>You have to include a line in your spring configuration to scan
      class files for annotation to make the components available. For the
      case above, this could be done by including the following XML fragment
      in one of your spring configuration files.</para>

      <programlisting>&lt;context:component-scan base-package="com.my.program" name-generator="org.geomajas.spring.GeomajasBeanNameGenerator"/&gt;</programlisting>

      <para>The command will be executed using a singleton. The use of object
      variables is not recommended. Any object variables will be shared
      amongst all command invocation, which can be coming from multiple thread
      at the same time.</para>

      <para>Note that it is not mandatory to create your own request and
      response object classes. If you don't require any parameters then you
      can use <code>EmptyCommandRequest</code> as request class. If you only
      require a layer id, then use <code>LayerIdCommandRequest</code>. If you
      only return a success code, you could use the
      <code>SuccessCommandResponse</code> class.</para>
    </sect1>
  </chapter>

  <chapter id="chapter-layer-models">
    <title>Layers</title>

    <para></para>
  </chapter>

  <chapter id="chapter-rendering-strategy">
    <title>Rendering strategy</title>

    <para></para>
  </chapter>

  <chapter id="chapter-caching-strategy">
    <title>Caching strategy</title>

    <para></para>
  </chapter>

  <chapter id="chapter-security">
    <title>Security</title>

    <para></para>
  </chapter>
</part>
