<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This file is part of Geomajas, a component framework for building
  ~ rich Internet applications (RIA) with sophisticated capabilities for the
  ~ display, analysis and management of geographic information.
  ~ It is a building block that allows developers to add maps
  ~ and other geographic data capabilities to their web applications.
  ~
  ~ Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<part id="part-appendix">
  <title>Appendices</title>

  <appendix id="appendix-migrating">
    <title>Migrating between Geomajas versions</title>

    <section>
      <title>Migrating from Geomajas 1.5.4 to Geomajas 1.6.0</title>

      <para><itemizedlist>
          <listitem>
            <para>The gwt-client module no longer automatically adds the "nl"
            locale to the application. This should now be done by the
            application. You can do this by adding the line <programlisting>&lt;extend-property name="locale" values="nl"/&gt;</programlisting>
            to your gwt.xml file.</para>
          </listitem>

          <listitem>
            <para>In the GWT face, you should now use <code>MapContext</code>
            instead of directly accessing <code>GraphicsContext</code>.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>Migrating from Geomajas 1.5.3 to Geomajas 1.5.4</title>

      <para><itemizedlist>
          <listitem>
            <para>SuccessCommandResponse class contained typos. The methods
            <code>isSucces()</code> and <code>getSucces()</code> have been
            renamed to <code>isSuccess()</code> and <code>getSuccess()</code>
            respectively.</para>
          </listitem>

          <listitem>
            <para>Changes in pipeline and promotion to stable API.</para>
          </listitem>

          <listitem>
            <para>The method <code>getRasterLayer()</code> has been added in
            <code>ConfigurationService</code>.</para>
          </listitem>

          <listitem>
            <para>The <code>findMathTransform()</code> method in
            <code>GeoService</code> now throws <code>GeomajasException</code>
            instead of <code>FactoryException</code>.</para>
          </listitem>

          <listitem>
            <para>InternalTile changes (should not affect anybody as these are
            used internally in the backend).</para>
          </listitem>

          <listitem>
            <para>Many <code>DtoConverterService</code> methods now throw
            <code>GeomajasException</code>.</para>
          </listitem>

          <listitem>
            <para>The method <code>getId()</code> has been added to
            <code>Layer.</code>All server layers should have a unique id. The
            id is automatically assigned based on the Spring bean name.</para>
          </listitem>

          <listitem>
            <para>Configuration changes : <code>maxTileLevel</code> has been
            removed as this was not used.</para>
          </listitem>

          <listitem>
            <para>Configuration changes: the server-side layers are no longer
            connected to the client-side layer configurations via the
            layerInfo objects. Instead, client-side layers refer directly to
            the server layer's id via a serverLayerId property. The references
            to the layerinfo objects are injected by a configuration
            postprocessor, so the layerInfo should no longer be set
            manually.</para>

            <table>
              <title>Back end configuration changes</title>

              <tgroup cols="3">
                <thead>
                  <row>
                    <entry>Name</entry>

                    <entry>Property</entry>

                    <entry>Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>LayerInfo</entry>

                    <entry>id</entry>

                    <entry>Removed, use id property of Layer instead</entry>
                  </row>

                  <row>
                    <entry>SnappingRuleInfo</entry>

                    <entry>layerInfo</entry>

                    <entry>Replaced with serverLayerId</entry>
                  </row>

                  <row>
                    <entry></entry>

                    <entry>serverLayerId</entry>

                    <entry>String ,should refer to id of Layer bean</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>

            <para><table>
                <title>Client configuration changes</title>

                <tgroup cols="3">
                  <thead>
                    <row>
                      <entry>Name</entry>

                      <entry>Property</entry>

                      <entry>Description</entry>
                    </row>
                  </thead>

                  <tbody>
                    <row>
                      <entry>ClientLayerInfo</entry>

                      <entry>serverLayerId</entry>

                      <entry>String, should refer to id of Layer bean</entry>
                    </row>

                    <row>
                      <entry></entry>

                      <entry>layerInfo</entry>

                      <entry>Should no longer be set manually, will be set by
                      Spring</entry>
                    </row>
                  </tbody>
                </tgroup>
              </table></para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>Migrating from Geomajas 1.5.2 to Geomajas 1.5.3</title>

      <itemizedlist>
        <listitem>
          <para>The <code>LayerModel</code> class has been integrated in
          <code>VectorLayer</code>. This modifies the configuration. Where
          before you would have written <programlisting>&lt;bean name="countriesModel" class="org.geomajas.layermodel.shapeinmem.ShapeInMemLayer"&gt;
		&lt;property name="url" value="classpath:shapes/africa/country.shp"/&gt;
	&lt;/bean&gt;
	&lt;bean name="countries" class="org.geomajas.internal.layer.layertree.DefaultVectorLayer" &gt;
		&lt;property name="layerInfo" ref="countriesInfo" /&gt;
		&lt;property name="layerModel" ref="countriesModel" /&gt;
	&lt;/bean&gt;</programlisting> into <programlisting>&lt;bean name="countries" class="org.geomajas.layer.shapeinmem.ShapeInMemLayer"&gt;
		&lt;property name="layerInfo" ref="countriesInfo" /&gt;
		&lt;property name="url" value="classpath:shapes/africa/country.shp"/&gt;
	&lt;/bean&gt;</programlisting>Note that this includes changing "layermodel"
          to "layer" in all module and package names.</para>
        </listitem>

        <listitem>
          <para><code>FeaturePainter</code> interface and related stuff has
          been removed. These are obsolete with the introduction of the
          <code>VectorLayerService</code>.</para>
        </listitem>

        <listitem>
          <para><code>GeotoolsLayer</code> has been renamed
          <code>GeoToolsLayer</code>.</para>
        </listitem>

        <listitem>
          <para>With the change in directory structure, the commands have
          moved from the <code>org.geomajas.extension.command</code> package
          to <code>org.geomajas.command</code>. The <code>LogCommand</code>
          has also been moved into the <code>general</code>
          sub-package.</para>
        </listitem>

        <listitem>
          <para>Security constraints are now applied in Geomajas. By default,
          nothing is authorized, so you always have to configure at least one
          security service. To go back to the old (allow-all) behaviour,
          include the following excerpt in your configuration file.</para>

          <programlisting>&lt;bean name="security.securityInfo" class="org.geomajas.security.SecurityInfo"&gt;
		&lt;property name="loopAllServices" value="false"/&gt;
		&lt;property name="securityServices"&gt;
			&lt;list&gt;
				&lt;bean class="org.geomajas.internal.security.AllowAllSecurityService"/&gt;
			&lt;/list&gt;
		&lt;/property&gt;
	&lt;/bean&gt;</programlisting>
        </listitem>

        <listitem>
          <para>Layers are now more sensitive to the attributes which are
          defined for the layer. Attributes which have not been defined in the
          feature info are not accessible this is the result of the
          refactoring where the <code>InternalFeature</code> store attributes
          as <code>Attribute</code> objects).</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>General API changes</title>

        <para>The geomajas-API has been split up in a formal (geomajas-API)
        and experimental API (geomajas-api-experimental). All
        interfaces/classes from the cache and rendering packages have been
        moved to experimental. This means that the rendering pipeline is at
        the moment not a part of the official API, but instead more of a
        preview of what's to come. Furthermore, some major changes have been
        made in many other packages:</para>

        <itemizedlist>
          <listitem>
            <para>The <code>org.geomajas.rendering.tile</code> has been moved
            to <code>org.geomajas.layer.tile</code></para>
          </listitem>

          <listitem>
            <para>Introduction of a DtoConverterService that is able to
            convert DTO objects from and to backend internal
            representations.</para>
          </listitem>

          <listitem>
            <para>All the different feature definitions have been cut down.
            Only 2 versions remain at the moment: a DTO feature
            (<code>org.geomajas.layer.feature.Feature</code>) and a feature
            definition used internally in the backed
            (<code>org.geomajas.layer.feature.InternalFeature</code>).</para>
          </listitem>

          <listitem>
            <para>All the different tile definitions have been cut down. Only
            3 remain. 2 DTO tiles:
            <code>org.geomajas.layer.tile.VectorTile</code> - used in vector
            layers and <code>org.geomajas.layer.tile.RasterTile</code> - used
            in raster layers. The third is the
            <code>org.geomajas.tile.InternalTile</code>. This tile is used
            internally on the backend.</para>
          </listitem>

          <listitem>
            <para><code>GeometricAttributeInfo</code> has been renamed to
            <code>GeometryAttributeInfo</code>.</para>
          </listitem>

          <listitem>
            <para><code>ApplicationService</code> has been renamed to
            <code>ConfigurationService</code>.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Configuration changes</title>

        <para>The configuration API has been split up in a backend part and a
        client (or faces) part. The following general rules have been kept in
        mind:</para>

        <para><itemizedlist>
            <listitem>
              <para>Backend configuration should be restricted to those
              properties that are functionally needed on the backend. We
              essentially regard the backend as a container of layers or, in
              WFS terms, feature types. Higher level concepts like map or
              application should be dealt with at the client (or faces)
              level.</para>
            </listitem>

            <listitem>
              <para>Client configuration should not impact the backend state.
              In the near future, this will make it possible to reconfigure
              clients without restarting the server.</para>
            </listitem>
          </itemizedlist>The configuration API has profoundly changed. Where
        possible, the backend classes have retained their original (before the
        split) names, after pruning them to remove all client related
        information. The client classes have been mostly created from scratch
        and have been named <code>ClientXxxInfo.java</code> for consistency.
        They have been located in a separate package, called
        <code>org.geomajas.configuration.client.</code>The following table
        gives a top-down overview of the backend configuration classes (new
        classes and properties have been marked in <emphasis
        role="bold">bold</emphasis>):</para>

        <para><table>
            <title>Back end configuration changes</title>

            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Name</entry>

                  <entry>Property</entry>

                  <entry>Action or description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>ApplicationInfo</entry>

                  <entry>*</entry>

                  <entry>removed</entry>
                </row>

                <row>
                  <entry>LayerInfo</entry>

                  <entry>label</entry>

                  <entry>moved to ClientLayerInfo</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>visible</entry>

                  <entry>moved to ClientLayerInfo</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>viewScaleMin, viewScaleMax</entry>

                  <entry>moved to ClientLayerInfo</entry>
                </row>

                <row>
                  <entry>VectorLayerInfo</entry>

                  <entry>labelAttribute</entry>

                  <entry>moved to LabelStyleInfo</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>snappingRules</entry>

                  <entry>moved to ClientVectorLayerInfo</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>styleDefinitions</entry>

                  <entry>replaced by namedStyleInfos</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>creatable, updatable, deletable</entry>

                  <entry>moved to ClientVectorLayerInfo (automatically
                  assigned)</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry><emphasis
                  role="bold">namedStyleInfos</emphasis></entry>

                  <entry>list of NamedStyleInfo. Lists the predefined styles
                  available for this layer. Multiple styles are possible so
                  clients can choose a style</entry>
                </row>

                <row>
                  <entry>RasterLayerInfo</entry>

                  <entry>style</entry>

                  <entry>moved to ClientRasterLayerInfo</entry>
                </row>

                <row>
                  <entry><emphasis
                  role="bold">NamedStyleInfo</emphasis></entry>

                  <entry><emphasis
                  role="bold">featureStyles</emphasis></entry>

                  <entry>list of FeatureStyleInfo. Ordered list of style
                  definitions with applicable filters. Together with the label
                  style they define a single named layer style.</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry><emphasis
                  role="bold">labelStyleInfo</emphasis></entry>

                  <entry>label attribute name and style</entry>
                </row>

                <row>
                  <entry><emphasis
                  role="bold">FeatureStyleInfo</emphasis></entry>

                  <entry>*</entry>

                  <entry>replaces StyleInfo same properties except for
                  index</entry>
                </row>

                <row>
                  <entry></entry>

                  <entry>index</entry>

                  <entry>replaces id (automatically assigned)</entry>
                </row>

                <row>
                  <entry><emphasis
                  role="bold">LabelStyleInfo</emphasis></entry>

                  <entry>*</entry>

                  <entry>replaces LabelAttribute, same properties</entry>
                </row>

                <row>
                  <entry>ValidatorInfo and XxxConstraintInfo</entry>

                  <entry>*</entry>

                  <entry>moved to package
                  <code>org.geomajas.configuration.validation</code></entry>
                </row>
              </tbody>
            </tgroup>
          </table>The most important changes are:</para>

        <itemizedlist>
          <listitem>
            <para>The removal of client-side properties like visible, label,
            viewScaleMin, viewScaleMax, style and snapping rules. These are
            moved to the client configuration (see hereafter).</para>
          </listitem>

          <listitem>
            <para>The replacement of the single style definition list by a set
            of named styles. These are styles that are preconfigured in the
            back end.</para>
          </listitem>

          <listitem>
            <para>Inclusion of the label attribute name and style as part of
            the named style. This is more logical and in line with the SLD
            (Styled Layer Descriptor) specification.</para>
          </listitem>
        </itemizedlist>

        <para>The client or face classes are largely new and have been
        relocated to the <code>org.geomajas.configuration.client</code>
        package. The following table gives a top-down overview of the backend
        configuration classes (new classes and properties have been marked in
        <emphasis role="bold">bold</emphasis>):</para>

        <table>
          <title>Client configuration</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>

                <entry>Property</entry>

                <entry>Action or description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>ClientApplicationInfo</entry>

                <entry>name</entry>

                <entry>removed</entry>
              </row>

              <row>
                <entry><emphasis role="bold">ClientMapInfo</emphasis></entry>

                <entry>maxBounds</entry>

                <entry>replaces MapInfo, optional maximum extent of the map,
                if present it will be used instead of the union of the layers'
                maximum extent</entry>
              </row>

              <row>
                <entry><emphasis
                role="bold">ClientLayerInfo</emphasis></entry>

                <entry>label</entry>

                <entry>moved from LayerInfo</entry>
              </row>

              <row>
                <entry></entry>

                <entry>visible</entry>

                <entry>moved from LayerInfo</entry>
              </row>

              <row>
                <entry></entry>

                <entry>viewScaleMin, viewScaleMax</entry>

                <entry>moved from LayerInfo</entry>
              </row>

              <row>
                <entry></entry>

                <entry>layerInfo</entry>

                <entry>reference to backend LayerInfo</entry>
              </row>

              <row>
                <entry></entry>

                <entry>maxExtent</entry>

                <entry>transformed extent from backend</entry>
              </row>

              <row>
                <entry><emphasis
                role="bold">ClientVectorLayerInfo</emphasis></entry>

                <entry>snappingRules</entry>

                <entry>moved from VectorLayerInfo</entry>
              </row>

              <row>
                <entry></entry>

                <entry><emphasis role="bold">namedStyleInfo</emphasis></entry>

                <entry>The style to apply on the layer. Should be a reference
                to one of the backend layer's predefined styles (see
                VectorLayerInfo).</entry>
              </row>

              <row>
                <entry></entry>

                <entry>creatable, updatable, deletable</entry>

                <entry>moved from VectorLayerInfo</entry>
              </row>

              <row>
                <entry></entry>

                <entry><emphasis role="bold">featureInfo</emphasis></entry>

                <entry>optional replacement of the backend layer's
                FeatureInfo. If present, it is used instead.</entry>
              </row>

              <row>
                <entry><emphasis
                role="bold">ClientRasterLayerInfo</emphasis></entry>

                <entry>style</entry>

                <entry>moved from ClientRasterLayerInfo</entry>
              </row>

              <row>
                <entry><emphasis
                role="bold">ClientLayerTreeInfo</emphasis></entry>

                <entry>*</entry>

                <entry>rename of LayerTreeInfo, same properties</entry>
              </row>

              <row>
                <entry><emphasis
                role="bold">ClientLayerTreeNodeInfo</emphasis></entry>

                <entry>*</entry>

                <entry>rename of LayerTreeNodeInfo</entry>
              </row>

              <row>
                <entry></entry>

                <entry>layers</entry>

                <entry>list of ClientLayerInfo objects, replaces previous list
                of layer ids</entry>
              </row>

              <row>
                <entry></entry>

                <entry>expanded</entry>

                <entry>changed from string to boolean</entry>
              </row>

              <row>
                <entry><emphasis
                role="bold">ClientToolbarInfo</emphasis></entry>

                <entry>*</entry>

                <entry>rename of ToolbarInfo</entry>
              </row>

              <row>
                <entry><emphasis role="bold">ClientToolInfo</emphasis></entry>

                <entry>*</entry>

                <entry>rename of ToolInfo</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Apart from these changes in content, some general technical
        improvements have been made as well:</para>

        <itemizedlist>
          <listitem>
            <para>The spring bean name (or id) is used to set the id property
            of the class if there is one. This makes it unnecessary to define
            the id separately. The way this is done is by using a Spring
            <code>BeanPostProcessor</code>. (see
            <code>org.geomajas.internal.configuration.ConfigurationBeanPostProcessor</code>)</para>
          </listitem>

          <listitem>
            <para>Some calculations that were previously done in the
            <code>GetConfigurationCommand</code> are now done in the
            <code>ConfigurationBeanPostProcessor.</code></para>
          </listitem>

          <listitem>
            <para>Cloning of the client configuration classes can be done with
            general deep cloning techniques like serialization, bypassing the
            need for custom cloneable implementations.</para>
          </listitem>
        </itemizedlist>

        <para>As usual, example configurations can be found in the application
        projects.</para>
      </section>
    </section>

    <section>
      <title>Migrating from Geomajas 1.5.1 to Geomajas 1.5.2</title>

      <itemizedlist>
        <listitem>
          <para>"layerRef" is renamed to "layerIds" in
          <code>LayerTreeNodeInfo</code>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Migrating from Geomajas 1.5.0 to Geomajas 1.5.1</title>

      <itemizedlist>
        <listitem>
          <para>Configuration has changed from the proprietary format to using
          spring configuration.</para>
        </listitem>

        <listitem>
          <para>There is now a <code>CommandDispatcher</code> service and
          official command names and defined request and response objects.
          Deprecated commands have been removed.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Migrating from Geomajas 1.4.x to 1.5.0</title>

      <para><itemizedlist>
          <listitem>
            <para>In your application.xml, you should change "OSMLayerFactory"
            to "OsmLayerFactory"</para>
          </listitem>

          <listitem>
            <para>In your application.xml, you should change "WMSLayerFactory"
            to "WmsLayerFactory"</para>
          </listitem>

          <listitem>
            <para>replace package "layermodels" with "layermodel"</para>
          </listitem>

          <listitem>
            <para>replace "org.geomajas.core.application.DefaultLayerFactory"
            with
            "org.geomajas.internal.application.DefaultLayerFactory"</para>
          </listitem>

          <listitem>
            <para>mapWidget.addController() and mapWidget.removeController()
            have been removed. They are replaced by mapWidget.setController().
            You could only add one controller anyway.</para>
          </listitem>
        </itemizedlist></para>
    </section>
  </appendix>
</part>
