<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This file is part of Geomajas, a component framework for building
  ~ rich Internet applications (RIA) with sophisticated capabilities for the
  ~ display, analysis and management of geographic information.
  ~ It is a building block that allows developers to add maps
  ~ and other geographic data capabilities to their web applications.
  ~
  ~ Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<part id="part-gettingstarted">
  <title>Getting started</title>

  <chapter>
    <title>Starting a new GWT based Geomajas project</title>

    <para>Geomajas uses the Apache Maven project management tool for its build
    and documentation process. Thanks to Maven , the easiest way to start
    using Geomajas is by creating a new project using the Maven archetype.
    This will create a simple working project that you can use as starting
    point.</para>

    <section>
      <title>Prerequisites / Command line</title>

      <para>As the simple project is created using the Maven archetype, you
      will need to install Maven on your system, which can be downloaded from
      <ulink url="http://maven.apache.org/">http://maven.apache.org/</ulink>.
      We recommend using the latest stable version (2.2.1 at the time of
      writing). Installing Maven is quite simple: just unzip the distribution
      file in the directory of your choice and make some environment changes
      so you can access the executable. More information for your specific OS
      can be found at the bottom of <ulink
      url="http://maven.apache.org/download.html">http://maven.apache.org/download.html</ulink>.</para>

      <para>When Maven is installed you can create a base project using the
      following command line (to use the latest release):</para>

      <example>
        <title>Create project using GWT Maven archetype</title>

        <para><programlisting>mvn archetype:generate -DarchetypeCatalog=http://apps.geomajas.org/nexus/content/repositories/thirdparty/</programlisting></para>
      </example>

      <para>Alternatively, you can use the very latest (snapshot) archetype
      using the following command.</para>

      <example>
        <title>Create project using GWT Maven archetype</title>

        <para><programlisting>mvn archetype:generate -DarchetypeCatalog=http://maven.geomajas.org/</programlisting></para>
      </example>

      <para>You first have to select the archetype you want to build
      (geomajas-gwt-archetype). Then it will ask you the "groupId",
      "artifactId", version and base package. Once you confirmed the settings,
      the project will be created in a subdirectory with a name equalling the
      "artifactId" you choose.</para>

      <figure>
        <title>Create project using GWT Maven archetype</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/run-archetype.png" width="75%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>From the project root, you can immediately compile, test (using
      jetty as servlet container), or run the application in development mode
      using the following commands.</para>

      <example>
        <title>Maven targets</title>

        <para><programlisting>mvn install

mvn jetty:run

mvn gwt:run</programlisting>The "install" target will create a war file for
        the project in the <code>target</code> directory.</para>
      </example>

      <para>The "jetty:run" variant will immediately start a jetty server and
      start the application. This way, you can test your application at full
      speed (as when deployed). The application can be accessed at <ulink
      url="http://localhost:8080/">http://localhost:8080/</ulink>.</para>

      <para>The "gwt:run" option allows you to start the application in GWT
      development mode. A console will appear which allows starting your
      application (from the browser). Amongst other things, this allows you to
      see the messages GWT generates and see the output of the
      "<code>GWT.log</code>" commands.</para>
    </section>

    <section>
      <title>Eclipse</title>

      <para>The combination of Eclipse, maven and GWT is not quite trivial,
      especially for complex multimodule projects like Geomajas. There are 2
      approaches possible for integrating eclipse with maven:</para>

      <itemizedlist>
        <listitem>
          <para>Eclipse plugin for maven, avoiding the use of the maven
          command-line interface: m2eclipse (<ulink
          url="http://m2eclipse.sonatype.org/">http://m2eclipse.sonatype.org/</ulink>)
          is the most mature project here</para>
        </listitem>

        <listitem>
          <para>Maven plugin to generate eclipse project configurations:
          maven-eclipse-plugin (<ulink
          url="http://maven.apache.org/plugins/maven-eclipse-plugin/">http://maven.apache.org/plugins/maven-eclipse-plugin/</ulink>)</para>
        </listitem>
      </itemizedlist>

      <para>It is clear that an IDE integrated solution like m2eclipse offers
      considerable advantages over manually generating Eclipse project
      configurations:</para>

      <itemizedlist>
        <listitem>
          <para>direct import of maven projects</para>
        </listitem>

        <listitem>
          <para>support for maven properties and filtering</para>
        </listitem>

        <listitem>
          <para>In-place editing of poms</para>
        </listitem>

        <listitem>
          <para>full dependency support</para>
        </listitem>
      </itemizedlist>

      <para>For a functional Geomajas setup, the following Eclipse plugins
      should be installed on a fresh Galileo download (<ulink
      url="http://www.eclipse.org/downloads/">http://www.eclipse.org/downloads/</ulink>):</para>

      <itemizedlist>
        <listitem>
          <para>m2eclipse: update site
          http://m2eclipse.sonatype.org/sites/m2e</para>
        </listitem>

        <listitem>
          <para>checkstyle: update site
          http://eclipse-cs.sf.net/update/</para>
        </listitem>

        <listitem>
          <para>SVN team provider: update site
          http://download.eclipse.org/releases/galileo, choose Collaboration
          -&gt;Subversive SVN Team Provider (Incubation)</para>
        </listitem>

        <listitem>
          <para>Google's GWT Eclipse plug-in:
          http://dl.google.com/eclipse/plugin/3.5 (Plugin and SDK)</para>
        </listitem>
      </itemizedlist>

      <para>Make sure you add the process-resources as a goal to run on
      project import in the general Maven preferences
      (Window-&gt;Preferences)</para>

      <figure>
        <title>Maven preferences</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/eclipse-maven-settings.png"
                       width="50%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can now use the project wizard to import the project as a
      Maven project. The embedded maven instance will automatically run the
      process-resources goal and generate and import the Eclipse project
      configuration. Because the m2eclipse plugin hides all resources from the
      eclipse source path, a conflict with the GWT plugin arises. The GWT
      plugin will look for module files in the source path and therefore
      cannot find them. To solve this, you have to manually remove the
      exclusion filters for the src/main/resources path and include a filter
      for the gwt module extension (**/*gwt.xml). In the end, the source path
      should look as follows:</para>

      <figure>
        <title>Including GWT modules in src/main/resources</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/eclipse-gwt-module-inclusion.png"
                       width="50%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can now manually mark the project as a GWT project in the
      project properties dialog:</para>

      <figure>
        <title>Eclipse project properties dialog</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/gwt-eclipse-properties.png"
                       width="60%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Check the "Use Google Web Toolkit" checkbox. After configuration,
      you should now be able to run the project as a GWT Web application by
      right-clicking on the project and selecting <code>Run as -&gt; Web
      Application</code>.</para>
    </section>

    <section>
      <title>IntelliJ IDEA</title>

      <para>The setup in IntelliJ IDEA is quite straightforward and does not
      require running a separate Maven command. Just open the project from
      IDEA by selecting the pom in the root directory.</para>

      <figure>
        <title>Open project using pom</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/IDEA - open project.png" width="50%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>IDEA will recognize this as a GWT project and assign the correct
      facet but as always you will have to make your own run configuration
      (which is fortunately trivial). You will need version 9.0 or later for
      the GWT 2.0 support.</para>

      <figure>
        <title>IDEA GWT run configuration</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/IDEA - run configuration.png"
                       width="90%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Before being able to use this configuration, you need to invoke
      the gwt:i18n Maven target to assure the files which are used for
      internationalisation are available (otherwise, you will get compilation
      errors). You can do this from the "Maven projects" tab.</para>

      <figure>
        <title>run gwt:i18 target</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/IDEA - maven targets.png"
                       width="60%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Some additional settings have to be done in the "project
      structure" dialog. Apart from specifying the GWT installation directory,
      there is a specific project setting which has to be done manually, which
      is setting the target Web facet to "Web". The project structure for the
      simple GWT project should look as follows:</para>

      <figure>
        <title>Project structure for simple GWT project</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/IDEA%20-%20project%20structure.png"
                       width="80%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>After this, you should be able to run the project. Any changes in
      the source code will be automatically detected, and debugging is
      possible.</para>
    </section>

    <section>
      <title>NetBeans</title>

      <para>You can both create the project from the archetype or open
      directly the Maven project in NetBeans. See <ulink
      url="http://wiki.netbeans.org/MavenBestPractices">http://wiki.netbeans.org/MavenBestPractices</ulink>
      for more details.</para>
    </section>

    <section>
      <title>How to continue</title>

      <para>The most important configuration files in the project are the
      following:</para>

      <para><itemizedlist>
          <listitem>
            <para>main configuration :
            <code>src/main/resources/shapeinmem/applicationContext.xml</code></para>
          </listitem>

          <listitem>
            <para>countries layer configuration :
            <code>src/main/resources/shapeinmem/layerCountries110m.xml</code></para>
          </listitem>

          <listitem>
            <para>bluemarble WMS layer configuration :
            <code>src/main/resources/shapeinmem/layerWmsBluemarble.xml</code></para>
          </listitem>

          <listitem>
            <para>GWT configuration file :
            <code>src/main/resources/GeomajasEntryPoint.gwt.xml</code></para>
          </listitem>

          <listitem>
            <para>web.xml: <code>war/WEB-INF/web.xml</code></para>
          </listitem>
        </itemizedlist>More details about the Geomajas configuration are found
      in <xref linkend="backend-ch-configuration" />.</para>

      <para>Reference which may be interesting to read:</para>

      <para><itemizedlist>
          <listitem>
            <para>GWT project page: <ulink
            url="http://code.google.com/webtoolkit/">http://code.google.com/webtoolkit/</ulink>.</para>
          </listitem>

          <listitem>
            <para>SmartGWT showcase: <ulink
            url="http://www.smartclient.com/smartgwt/showcase/">http://www.smartclient.com/smartgwt/showcase/</ulink>.</para>
          </listitem>

          <listitem>
            <para>dzone's GWT refcardz: <ulink
            url="http://refcardz.dzone.com/refcardz/gwt-style-configuration-and-js">http://refcardz.dzone.com/refcardz/gwt-style-configuration-and-js</ulink>.</para>

            <para></para>
          </listitem>

          <listitem>
            <para>spring documentation: <ulink
            url="http://www.springsource.org/documentation">http://www.springsource.org/documentation</ulink>.</para>
          </listitem>

          <listitem>
            <para>dzone's spring configuration refcardz: <ulink
            url="http://refcardz.dzone.com/refcardz/spring-configuration">http://refcardz.dzone.com/refcardz/spring-configuration</ulink>.</para>

            <para></para>
          </listitem>

          <listitem>
            <para>maven project: <ulink
            url="http://maven.apache.org/">http://maven.apache.org/</ulink>.</para>
          </listitem>

          <listitem>
            <para>Maven by example book: <ulink
            url="http://www.sonatype.com/books/mvnex-book/reference/public-book.html">http://www.sonatype.com/books/mvnex-book/reference/public-book.html</ulink>.</para>
          </listitem>

          <listitem>
            <para>maven reference book: <ulink
            url="http://www.sonatype.com/books/mvnref-book/reference/public-book.html">http://www.sonatype.com/books/mvnref-book/reference/public-book.html</ulink>.</para>
          </listitem>

          <listitem>
            <para>dzone's maven 2 refcardz: <ulink
            url="http://refcardz.dzone.com/refcardz/apache-maven-2">http://refcardz.dzone.com/refcardz/apache-maven-2</ulink>.</para>
          </listitem>
        </itemizedlist></para>
    </section>
  </chapter>
</part>
