<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE part PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This file is part of Geomajas, a component framework for building
  ~ rich Internet applications (RIA) with sophisticated capabilities for the
  ~ display, analysis and management of geographic information.
  ~ It is a building block that allows developers to add maps
  ~ and other geographic data capabilities to their web applications.
  ~
  ~ Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<part id="part-gettingstarted">
  <title>Getting started</title>

  <chapter>
    <title>Starting a new GWT based Geomajas project</title>

    <para>Geomajas uses the Apache Maven project management tool for its build
    and documentation process. Thanks to maven , the easiest way to start
    using Geomajas is by creating a new project using the maven archetype.
    This will create a simple working project that you can use as starting
    point.</para>

    <section>
      <title>Prerequisites / Command line</title>

      <para>As the simple project is created using the maven archetype, you
      will need to install maven on your system, which can be downloaded from
      <ulink url="http://maven.apache.org/">http://maven.apache.org/</ulink>.
      We recommend using the latest stable version (2.2.1 at the time of
      writing). Installing Maven is quite simple: just unzip the distribution
      file in the directory of your choice and make some environment changes
      so you can access the executable. More information for your specific OS
      can be found at the bottom of <ulink
      url="http://maven.apache.org/download.html">http://maven.apache.org/download.html</ulink>.</para>

      <para>When maven is installed you can create a base project using the
      following command line :</para>

      <example>
        <title>Create project using GWT maven archetype</title>

        <para><programlisting>mvn archetype:generate -DarchetypeCatalog=http://maven.geomajas.org/</programlisting></para>
      </example>

      <para>You first have to select the archetype you want to build
      (geomajas-gwt-archetype). Then it will ask you the "groupId",
      "artifactId", version and base package. Once you confirmed the settings,
      the project will be created in a subdirectory with a name equalling the
      "artifactId" you choose.</para>

      <figure>
        <title>Create project using GWT maven archetype</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/run-archetype.png" width="75%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>From the project root, you can immediately compile, test (using
      jetty as servlet container), or run the application in development mode
      using the following commands.</para>

      <example>
        <title>maven targets</title>

        <para><programlisting>mvn install

mvn jetty:run

mvn gwt:run</programlisting>The "install" target will create a war file for
        the project in the <code>target</code> directory.</para>
      </example>

      <para>The "jetty:run" variant will immediately start a jetty server and
      start the application. This way, you can test your application at full
      speed (as when deployed). The application can be accessed at <ulink
      url="http://localhost:8080/">http://localhost:8080/</ulink>.</para>

      <para>The "gwt:run" option allows you to start the application in GWT
      development mode. A console will appear which allows starting your
      application (from the browser). Amongst other things, this allows you to
      see the messages GWT generates and see the output of the
      "<code>GWT.log</code>" commands.</para>
    </section>

    <section>
      <title>Eclipse</title>

      <para>From the command line you can create eclipse project files.</para>

      <example>
        <title>Create eclipse project files</title>

        <para><programlisting>mvn eclipse:eclipse gwt:eclipse</programlisting></para>
      </example>

      <para>You can now open the project in eclipse.</para>

      <para>For working with the GWT face, you may want to make use Google's
      GWT Eclipse plug-in. Detailed instructions can be found at <ulink
      url="http://code.google.com/eclipse/docs/download.html">
      http://code.google.com/eclipse/docs/download.html</ulink>. The launch
      configuration should already be created by the "gwt:eclipse" target in
      the command above. It will install the dependent libraries in the lib
      folder of the GWT war layout.</para>

      <para>After importing and building the GWT projects, make sure you
      convert them to GWT projects in the project properties dialog:</para>

      <figure>
        <title>Eclipse project properties dialog</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/gwt-eclipse-properties.png"
                       width="60%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Check the "Use Google Web Toolkit" checkbox. The GWT SDK can be
      configured by clicking on the " <code>Configure SDKs..."</code> link.
      After configuration, you should now be able to run the project as a GWT
      Web application.</para>
    </section>

    <section>
      <title>IntelliJ IDEA</title>

      <para>The setup in IntelliJ IDEA is quite straightforward and does not
      require running a separate maven command. Just open the project from
      IDEA by selecting the pom in the root directory.</para>

      <figure>
        <title>Open project using pom</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/IDEA - open project.png" width="50%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>IDEA will recognize this as a GWT project and assign the correct
      facet but as always you will have to make your own run configuration
      (which is fortunately trivial). You will need version 9.0 or later for
      the GWT 2.0 support.</para>

      <figure>
        <title>IDEA GWT run configuration</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/IDEA - run configuration.png"
                       width="90%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Before being able to use this configuration, you need to invoke
      the gwt:i18n maven target to assure the files which are used for
      internationalisation are available (otherwise, you will get compilation
      errors). You can do this from the "maven projects" tab.</para>

      <figure>
        <title>run gwt:i18 target</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/IDEA - maven targets.png"
                       width="60%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Some additional settings have to be done in the "project
      structure" dialog. Apart from specifying the GWT installation directory,
      there is a specific project setting which has to be done manually, which
      is setting the target Web facet to "Web". The project structure for the
      simple GWT project should look as follows:</para>

      <figure>
        <title>Project structure for simple GWT project</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/IDEA%20-%20project%20structure.png"
                       width="80%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>After this, you should be able to run the project. Any changes in
      the source code will be automatically detected, and debugging is
      possible.</para>
    </section>

    <section>
      <title>NetBeans</title>

      <para>You can both create the project from the archetype or open
      directly the maven project in NetBeans. See <ulink
      url="http://wiki.netbeans.org/MavenBestPractices">http://wiki.netbeans.org/MavenBestPractices</ulink>
      for more details.</para>
    </section>
  </chapter>
</part>
