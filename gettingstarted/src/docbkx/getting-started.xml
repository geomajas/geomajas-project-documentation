<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This file is part of Geomajas, a component framework for building
  ~ rich Internet applications (RIA) with sophisticated capabilities for the
  ~ display, analysis and management of geographic information.
  ~ It is a building block that allows developers to add maps
  ~ and other geographic data capabilities to their web applications.
  ~
  ~ Copyright 2008-2010 Geosparc, http://www.geosparc.com, Belgium
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<chapter id="getting-started">
  <title>Starting a new GWT based Geomajas project</title>

  <para>Geomajas uses the Apache Maven project management tool for its build
  and documentation process. Thanks to Maven , the easiest way to start using
  Geomajas is by creating a new project using the Maven archetype. This will
  create a simple working project that you can use as starting point.</para>

  <section>
    <title>Prerequisites / Command line</title>

    <para>As the simple project is created using the Maven archetype, you will
    need to install Maven on your system, which can be downloaded from <ulink
    url="http://maven.apache.org/">http://maven.apache.org/</ulink>. We
    recommend using the latest stable version (2.2.1 at the time of writing).
    Installing Maven is quite simple: just unzip the distribution file in the
    directory of your choice and make some environment changes so you can
    access the executable. More information for your specific OS can be found
    at the bottom of <ulink
    url="http://maven.apache.org/download.html">http://maven.apache.org/download.html</ulink>.</para>

    <section>
      <title>Creating the template project</title>

      <para>At this point it is assumed that Maven has been succesfully
      installed. Using Maven, you can now create a template project, called
      the Geomajas GWT Application Archetype.</para>

      <orderedlist>
        <listitem>
          <para><emphasis>Step1</emphasis>: Go to the folder you want to
          create this application in, and execute the following
          command:</para>

          <example>
            <title>Create project using GWT Maven archetype</title>

            <para><programlisting>mvn archetype:generate -DarchetypeCatalog=http://apps.geomajas.org/nexus/content/groups/released/</programlisting></para>
          </example>

          <para>This will create the template project, using the latest stable
          release. If you want to use the latest snapshot, use the follwing
          command instead:</para>

          <example>
            <title>Create project using GWT Maven archetype</title>

            <para><programlisting>mvn archetype:generate -DarchetypeCatalog=http://apps.geomajas.org/nexus/content/groups/latest/</programlisting></para>
          </example>

          <para>Maven will now prompt the user for input.</para>
        </listitem>

        <listitem>
          <para><emphasis>Step2</emphasis>: Maven will display the full list
          of available archetypes. Make sure you select the correct one:
          <emphasis role="bold">geomajas-gwt-archetype</emphasis>. In the
          image below, the correct number would be 36:</para>

          <figure>
            <title>Choose the correct archetype</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/select-archetype.png" width="75%" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para><emphasis>Step3</emphasis>: Next maven asks for the <emphasis
          role="bold">groupId</emphasis>. Often the package name is used.
          (foo.bar)</para>
        </listitem>

        <listitem>
          <para><emphasis>Step4</emphasis>: Next maven asks for the <emphasis
          role="bold">artifactId</emphasis>. This represents the name for your
          application. (i.e. my-app)</para>
        </listitem>

        <listitem>
          <para><emphasis>Step5</emphasis>: Next maven asks for the first
          version for your application. 1.0-SNAPSHOT is a good first
          version.</para>
        </listitem>

        <listitem>
          <para><emphasis>Step6</emphasis>: Next maven asks for the base
          package wherein to place Java files. By default this is the same as
          the groupId. Just hit "enter" to continue.</para>

          <figure>
            <title>Screenshot when building the Geomajas GWT archetype</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/run-archetype.png" width="75%" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
      </orderedlist>

      <tip>
        <para>You have now create a Geomajas template project! It is best to
        continue by testing if everything went well.</para>
      </tip>
    </section>

    <section>
      <title>Testing the template project</title>

      <para>From the project root, you can immediately compile, test (using
      jetty as servlet container), or run the application in development mode
      using the following commands.</para>

      <section>
        <title>Creating a full build</title>

        <para>You now have several options to actually test your application.
        First of all, you could compile it, and create a build. This can be
        done with the following command:</para>

        <example>
          <title>Creating a build from your project</title>

          <para><programlisting>mvn install</programlisting></para>
        </example>

        <para>The "install" target will create a .war file for the project in
        the <code>target</code> directory. This web archive can simply be
        dropped into a Java application container such as Tomcat.</para>
      </section>

      <section>
        <title>Running the compiled template application (full speed)</title>

        <para>Secondly, if you don't have a Java application container ready
        or simply want a quick test, then you can use mvn to run the
        application for you, using the following commands:</para>

        <example>
          <title>Create a build, then run it</title>

          <para><programlisting>mvn install
mvn jetty:run</programlisting></para>
        </example>

        <para>The "jetty:run" variant will immediately start a jetty server
        and start the application. This way, you can test your application at
        full speed (as when deployed). The application can be accessed at
        <ulink
        url="http://localhost:8080/">http://localhost:8080/</ulink>.</para>
      </section>

      <section>
        <title>Running the template application in development mode</title>

        <para>Another option is to start up the application in GWT development
        mode, using the following command lines:</para>

        <example>
          <title>Run the template application in development mode</title>

          <para><programlisting>mvn install
mvn gwt:run</programlisting></para>
        </example>

        <para>The "gwt:run" option allows you to start the application in GWT
        development mode. A console will appear which allows starting your
        application (from the browser). Amongst other things, this allows you
        to see the messages GWT generates and see the output of the
        "<code>GWT.log</code>" commands.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Eclipse</title>

    <para>The combination of Eclipse, maven and GWT is not quite trivial,
    especially for complex multimodule projects like Geomajas. There are 2
    approaches possible for integrating eclipse with maven:</para>

    <itemizedlist>
      <listitem>
        <para>Eclipse plugin for maven, avoiding the use of the maven
        command-line interface: m2eclipse (<ulink
        url="http://m2eclipse.sonatype.org/">http://m2eclipse.sonatype.org/</ulink>)
        is the most mature project here</para>
      </listitem>

      <listitem>
        <para>Maven plugin to generate eclipse project configurations:
        maven-eclipse-plugin (<ulink
        url="http://maven.apache.org/plugins/maven-eclipse-plugin/">http://maven.apache.org/plugins/maven-eclipse-plugin/</ulink>)</para>
      </listitem>
    </itemizedlist>

    <para>It is clear that an IDE integrated solution like m2eclipse offers
    considerable advantages over manually generating Eclipse project
    configurations:</para>

    <itemizedlist>
      <listitem>
        <para>direct import of maven projects</para>
      </listitem>

      <listitem>
        <para>support for maven properties and filtering</para>
      </listitem>

      <listitem>
        <para>In-place editing of poms</para>
      </listitem>

      <listitem>
        <para>full dependency support</para>
      </listitem>
    </itemizedlist>

    <para>For a functional Geomajas setup, the following Eclipse plugins
    should be installed on a fresh Galileo download (<ulink
    url="http://www.eclipse.org/downloads/">http://www.eclipse.org/downloads/</ulink>):</para>

    <itemizedlist>
      <listitem>
        <para>m2eclipse: update site
        http://m2eclipse.sonatype.org/sites/m2e</para>
      </listitem>

      <listitem>
        <para>m2eclipse extras (especially WTP extension):
        http://m2eclipse.sonatype.org/sites/m2e-extras</para>
      </listitem>

      <listitem>
        <para>checkstyle: update site http://eclipse-cs.sf.net/update/</para>
      </listitem>

      <listitem>
        <para>SVN team provider: update site
        http://download.eclipse.org/releases/galileo, choose Collaboration
        -&gt;Subversive SVN Team Provider (Incubation)</para>
      </listitem>

      <listitem>
        <para>Google's GWT Eclipse plug-in:
        http://dl.google.com/eclipse/plugin/3.5 (Plugin and SDK)</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Combining Eclipse WTP with the maven GWT plugin (recommended
      setup)</title>

      <para>There is a classpath issue with the Google Plugin for Eclipse
      (GPE) that prevents us from using it in a reliable way when there are
      multiple versions of artifacts in the maven dependency tree:<ulink
      url="???">
      http://code.google.com/p/google-web-toolkit/issues/detail?id=5033</ulink></para>

      <para>On top of that, GPE forces the use of the built-in jetty launcher,
      which has problems with loading libraries from the maven repository.
      Recent development by Google points in the direction of better maven
      support, but a as far as we know a stable solution which does not
      require explicit user interaction is not available. (see <ulink
      url="???">http://googlewebtoolkit.blogspot.com/2010/08/how-to-use-google-plugin-for-eclipse.html</ulink>).</para>

      <para>The most stable solution - in terms of classpath and ease-of-use -
      we have found so far is to not use GPE at all but instead start the
      hosted mode via the GWT maven plugin (see <ulink
      url="???">http://mojo.codehaus.org/gwt-maven-plugin/</ulink>). The
      following blog shows how to configure the plugin: <ulink
      url="???">http://jvminside.blogspot.com/2010/02/efficient-gwt-development-with-eclipse.html</ulink>.
      This requires an additional bit of maven configuration, which has been
      put inside the m2e profile of the GWT archetype. This profile will be
      automatically activated when the m2eclipse plugin is present.</para>

      <para>Using this profile, the following actions have to be performed to
      import, run and debug a project in Eclipse:</para>

      <itemizedlist>
        <listitem>
          <para>Import the project as a maven project</para>

          <figure>
            <title>Import project as Maven project</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-wtp-import.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>After the project has been built, there are some errors left,
          which can be solved by updating the Maven project configuration
          (right-click on the project and select Maven -&gt; Update Project
          Configuration)</para>

          <figure>
            <title>Update Maven project configuration</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-wtp-update-maven-project.png"
                           width="50%" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>Open the run configurations. There should be 4 configurations
          available: 3 maven configurations and 1 remote Java
          application:</para>

          <figure>
            <title>Run configurations</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-wtp-configurations.png"
                           width="50%" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>Run the COMPILE GWT configuration once. This will do a
          one-time GWT compilation and add the the result as an extra Web
          Resource folder to the project. After refreshing the project (F5),
          the following layout should appear in Web Resources:</para>

          <figure>
            <title>Web Resources layout</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-wtp-webresources.png"
                           width="50%" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>That's it, the project can now be deployed in the usual manner
          on your preferred WTP server by right-clicking on the project and
          selecting Run As... -&gt; Run on Server:</para>

          <figure>
            <title>Running the application</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-wtp-run.png" width="50%" />
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>To debug the project, 2 additional processes have to be
          started. First run the DEBUG GWT configuration in debug mode. This
          process will start up a console and wait for the Java remote
          application proces to connect.</para>
        </listitem>

        <listitem>
          <para>Now run the CONNECT GWT configuration. This configuration will
          connect to the GWT process and startup the GWT development console.
          From there you can run the application in your default
          browser.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Using the Google Plugin for Eclipse (possible classpath
      issues)</title>

      <para>To develop with the Google Plugin for Eclipse, the following
      actions have to be taken:</para>

      <para><itemizedlist>
          <listitem>
            <para>Make sure you add the process-resources as a goal to run on
            project import in the general Maven preferences
            (Window-&gt;Preferences)</para>

            <figure>
              <title>Maven preferences</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/eclipse-maven-settings.png"
                             width="50%" />
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>

          <listitem>
            <para>You can now use the project wizard to import the project as
            a Maven project. The embedded maven instance will automatically
            run the process-resources goal and generate and import the Eclipse
            project configuration. Because the m2eclipse plugin hides all
            resources from the eclipse source path, a conflict with the GWT
            plugin arises. The GWT plugin will look for module files in the
            source path and therefore cannot find them. To solve this, you
            have to manually remove the exclusion filters for the
            src/main/resources path and include a filter for the gwt module
            extension (**/*gwt.xml). In the end, the source path should look
            as follows:</para>

            <figure>
              <title>Including GWT modules in src/main/resources</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/eclipse-gwt-module-inclusion.png"
                             width="50%" />
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>

          <listitem>
            <para>You can now manually mark the project as a GWT project in
            the project properties dialog and select the module entry point of
            your choice. To reduce compilation time, a specific development
            version of the module with a limited number of compile
            permutations (1 browser, 1 language) should have been generated by
            the Geomajas archetype. Our naming convention is to use the same
            module name as for production but adding Dev at the end:</para>

            <figure>
              <title>Eclipse project properties dialog, Google Web
              Toolkit</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/eclipse-gwt-modules.png"
                             width="60%" />
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>

          <listitem>
            <para>In the Google -&gt; Web Application section, the WAR
            directory should be changed to the default maven war sources
            directory (src/main/webapp)<figure>
                <title>Eclipse project properties dialog, Google Web
                Application</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/eclipse-gwt-webapp.png"
                               width="70%" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>

          <listitem>
            <para>After configuration, you should now be able to run the
            project as a GWT Web application by right-clicking on the project
            and selecting <code>Run as -&gt; Web Application</code>.</para>
          </listitem>

          <listitem>
            <para>For debugging, debug the project as a GWT Web application by
            right-clicking on the project and selecting <code>Debug as -&gt;
            Web Application</code>.</para>
          </listitem>

          <listitem>
            <para>With the GWT plugin , possible classpath issues may result
            because of incompatibilities between the m2eclipse maven container
            and the GWT plugin. One of the issues is that Spring component
            scanning will only work when the jar to be scanned has been
            preloaded before the scanning is done. We have found a workaround
            for this issue by adding a list of classes to preload to context
            listener in the web.xml: configuration. Whenever you use a plugin
            that needs scanning, at least one class of this module should be
            added to the list:</para>

            <programlisting>&lt;!-- @extract-start PreloadToPrepareScanning, Preload class to prevent scanning problems --&gt;
    &lt;context-param&gt;
        &lt;param-name&gt;preloadClasses&lt;/param-name&gt;
        &lt;param-value&gt;
   org.geomajas.command.general.LogCommand
   org.geomajas.spring.GeomajasBeanNameGenerator
   .... &lt;add your class here !&gt;
       &lt;/param-value&gt;
    &lt;/context-param&gt;

&lt;listener&gt;
 &lt;listener-class&gt;org.geomajas.servlet.PrepareScanningContextListener&lt;/listener-class&gt;
&lt;/listener&gt;
</programlisting>
          </listitem>
        </itemizedlist></para>

      <para> </para>
    </section>
  </section>

  <section>
    <title>IntelliJ IDEA</title>

    <para>The setup in IntelliJ IDEA is quite straightforward and does not
    require running a separate Maven command. Just open the project from IDEA
    by selecting the pom in the root directory.</para>

    <figure>
      <title>Open project using pom</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/IDEA-open-project.png" width="50%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>IDEA will recognize this as a GWT project and assign the correct
    facet but as always you will have to make your own run configuration
    (which is fortunately trivial). You will need version 9.0 or later for the
    GWT 2.0 support.</para>

    <figure>
      <title>IDEA GWT run configuration</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/IDEA-run-configuration.png" width="90%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Before being able to use this configuration, you need to invoke the
    gwt:i18n Maven target to assure the files which are used for
    internationalisation are available (otherwise, you will get compilation
    errors). You can do this from the "Maven projects" tab.</para>

    <figure>
      <title>run gwt:i18 target</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/IDEA-maven-targets.png" width="60%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Some additional settings have to be done in the "project structure"
    dialog. Apart from specifying the GWT installation directory, there is a
    specific project setting which has to be done manually, which is setting
    the target Web facet to "Web". The project structure for the simple GWT
    project should look as follows:</para>

    <figure>
      <title>Project structure for simple GWT project</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/IDEA-project-structure.png" width="80%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>After this, you should be able to run the project. Any changes in
    the source code will be automatically detected, and debugging is
    possible.</para>
  </section>

  <section>
    <title>NetBeans</title>

    <para>You can both create the project from the archetype or open directly
    the Maven project in NetBeans. See <ulink
    url="http://wiki.netbeans.org/MavenBestPractices">http://wiki.netbeans.org/MavenBestPractices</ulink>
    for more details.</para>
  </section>

  <section>
    <title>How to continue</title>

    <para>The most important configuration files in the project are the
    following:</para>

    <para><itemizedlist>
        <listitem>
          <para>main configuration :
          <code>src/main/resources/shapeinmem/applicationContext.xml</code></para>
        </listitem>

        <listitem>
          <para>countries layer configuration :
          <code>src/main/resources/shapeinmem/layerCountries110m.xml</code></para>
        </listitem>

        <listitem>
          <para>bluemarble WMS layer configuration :
          <code>src/main/resources/shapeinmem/layerWmsBluemarble.xml</code></para>
        </listitem>

        <listitem>
          <para>GWT configuration file :
          <code>src/main/resources/GeomajasEntryPoint.gwt.xml</code></para>
        </listitem>

        <listitem>
          <para>web.xml: <code>war/WEB-INF/web.xml</code></para>
        </listitem>
      </itemizedlist>More details about the Geomajas configuration are found
    in <xref linkend="backend-ch-configuration" />.</para>

    <para>Reference which may be interesting to read:</para>

    <para><itemizedlist>
        <listitem>
          <para>GWT project page: <ulink
          url="http://code.google.com/webtoolkit/">http://code.google.com/webtoolkit/</ulink>.</para>
        </listitem>

        <listitem>
          <para>SmartGWT showcase: <ulink
          url="http://www.smartclient.com/smartgwt/showcase/">http://www.smartclient.com/smartgwt/showcase/</ulink>.</para>
        </listitem>

        <listitem>
          <para>dzone's GWT refcardz: <ulink
          url="http://refcardz.dzone.com/refcardz/gwt-style-configuration-and-js">http://refcardz.dzone.com/refcardz/gwt-style-configuration-and-js</ulink>.</para>

          <para></para>
        </listitem>

        <listitem>
          <para>spring documentation: <ulink
          url="http://www.springsource.org/documentation">http://www.springsource.org/documentation</ulink>.</para>
        </listitem>

        <listitem>
          <para>dzone's spring configuration refcardz: <ulink
          url="http://refcardz.dzone.com/refcardz/spring-configuration">http://refcardz.dzone.com/refcardz/spring-configuration</ulink>.</para>

          <para></para>
        </listitem>

        <listitem>
          <para>maven project: <ulink
          url="http://maven.apache.org/">http://maven.apache.org/</ulink>.</para>
        </listitem>

        <listitem>
          <para>Maven by example book: <ulink
          url="http://www.sonatype.com/books/mvnex-book/reference/public-book.html">http://www.sonatype.com/books/mvnex-book/reference/public-book.html</ulink>.</para>
        </listitem>

        <listitem>
          <para>maven reference book: <ulink
          url="http://www.sonatype.com/books/mvnref-book/reference/public-book.html">http://www.sonatype.com/books/mvnref-book/reference/public-book.html</ulink>.</para>
        </listitem>

        <listitem>
          <para>dzone's maven 2 refcardz: <ulink
          url="http://refcardz.dzone.com/refcardz/apache-maven-2">http://refcardz.dzone.com/refcardz/apache-maven-2</ulink>.</para>
        </listitem>
      </itemizedlist></para>
  </section>
</chapter>
