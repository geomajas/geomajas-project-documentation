<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2011 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="ch-rw-marine">
  <title>Real world example: marine application</title>

  <warning>
    <para>This chapter is out of date. It was originally written for an older,
    no longer supported version of Geomajas. It was mostly updated to comply
    with current conventions but is likely to be inaccurate or even wrong in
    some places.</para>
  </warning>

  <section id="rw-marine">
    <title>Introduction</title>

    <para>In this chapter a step-by-step guide is given of how to create a
    web-application based on Geomajas from scratch. The application is based
    on marine information and has the following features :</para>

    <itemizedlist>
      <listitem>
        <para>Maps</para>

        <para>The following maps will be used in the web-application</para>

        <itemizedlist>
          <listitem>
            <para>OpenStreetMaps as a background</para>
          </listitem>

          <listitem>
            <para>Shape files</para>
          </listitem>

          <listitem>
            <para>ECDIS map. The source of these maps are simple feature data
            files. These will be converted using OGR2OGR to a postGIS
            database.</para>
          </listitem>

          <listitem>
            <para>AGIV maps. This is a WMS server
            (http://gditestbed.agiv.be/blog/2010/01/default.aspx)</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>SOAP</para>

        <itemizedlist>
          <listitem>
            <para>Using SOAP we will request the current positions of vessels
            in Belgium and Holland. Each vessel will be shown on a the map
            with a marker. When such a marker is clicked extra information
            about the selected vessel is shown.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Facility XML</para>

        <itemizedlist>
          <listitem>
            <para>The facility XML contains information about locks. When a
            lock is clicked (in one of the shape file layers) the
            corresponding XML is requested from the server and translated to
            HTML using XSL. After this the resulting HTML will be displayed to
            the user.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>User management</para>

        <itemizedlist>
          <listitem>
            <para>Two different users will be available. One user has complete
            access to everything. The second user only can view some
            layers.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>

  <section id="rw-mar-prel">
    <title>Preliminary note</title>

    <para>When using Eclipse and the GWT plug-in we removed the
    "generateAsync" feature from the pom.xml. Our code already contained
    manually generated async files, and this caused weird
    problems/conflicts.</para>

    <para>Note that when you are in need of help you can always post questions
    on the Geomajas mailing list (check <ulink
    url="http://geomajas.org/gis-development">this page</ulink> for
    instructions on how to join the mailing list) or on the <ulink
    url="http://geomajas.org/forum">Geomajas forum</ulink>.</para>
  </section>

  <section id="rw-ma-setup">
    <title>Setting up a Geomajas based project</title>

    <para>To create a new project based on Geomajas you must execute the
    following steps:</para>

    <example>
      <title>Create project using GWT Maven archetype</title>

      <para><programlisting>mvn archetype:generate -DarchetypeCatalog=http://files.geomajas.org/archetype-catalog.xml</programlisting></para>
    </example>

    <para>Once this is executed you can , among others, use the following
    commands :</para>

    <itemizedlist>
      <listitem>
        <para>mvn install</para>
      </listitem>

      <listitem>
        <para><code>mvn jetty:run</code></para>
      </listitem>

      <listitem>
        <para><code>mvn gwt:run</code></para>
      </listitem>

      <listitem>
        <para><code>mvn eclipse:eclipse</code></para>
      </listitem>
    </itemizedlist>

    <para>If you are using eclipse you want to start by using the <code>mvn
    eclipse:eclipse</code> command. This will make your project eclipse
    compliant. Once this command is finished go to eclipse, right-click on the
    project, properties, google and check that the project is using GWT. Note
    that every time you do an <code>mvn eclipse:eclipse</code> you will have
    to retake the steps. Most times you have to switch off/switch on the GWT
    marker in eclipse. <figure>
        <title>Update your project as a GWT project in eclipse after each mvn
        eclipse:eclipseA</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/realworldexample/eclipse_gwt.png"
                       width="75%" />
          </imageobject>
        </mediaobject>
      </figure>Now you can already try and run the project. Either from within
    eclipse or from the command line using maven: <code>mvn gwt:run</code>.
    You will see that you now have a basic Geomajas project already showing an
    OpenStreetMaps layer and a vector layer based on shape files.</para>
  </section>

  <section id="rw-ma-shape">
    <title>Showing your own shape files in Geomajas</title>

    <para>In this section we are going to explain how to add a layer to your
    Geomajas showing some of your own shape files. The layer we will be
    creating has the name <code>VhaLayer</code>.</para>

    <para>To show your own shape files in Geomajas follow these steps :</para>

    <orderedlist>
      <listitem>
        <para>Place your shape files in
        <code>src/main/resources/be/fks/shapes</code> (note that you can
        configure the exact location of these).</para>
      </listitem>

      <listitem>
        <para>Now modify
        <code>src/main/webapps/WEB-INF/applicationContext.xml</code> Note that
        you can use the existing road shape file layer as a reference to help
        you out.</para>

        <orderedlist>
          <listitem>
            <para>Add Layer <figure>
                <title>Add vhaLayer to the list of layers</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/realworldexample/layers_vha.png"
                               width="-" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>

          <listitem>
            <para>Add treeNode<figure>
                <title>Add vhaLayer to the list of treeNodes</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/realworldexample/treenode_vha.png"
                               width="-" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>

          <listitem>
            <para>Add org.geomajas.configuration.client.ClientVectorLayerInfo
            bean<figure>
                <title>Add ClientVectorLayerInfo bean</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/realworldexample/bean_vha.png"
                               width="-" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Modify <code>src/main/webapp/WEB-INF/web.xml (please remove the
        "be/fks/shapeinmem/" from the displayed text).</code><figure>
            <title>Add a reference to layerVha.xml in your web.xml</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/realworldexample/webxml_vha.png"
                           width="-" />
              </imageobject>
            </mediaobject>
          </figure></para>
      </listitem>

      <listitem>
        <para>Create <code>src/main/webapp/WEB-INF/layerVha.xml</code>. Note
        that you can use the existing layerRoads.xml as a reference to help
        you out.</para>

        <para>Use a tool like <ulink
        url="http://udig.refractions.net/">uDig</ulink> to help you. With uDig
        you can view shape files, PostGIS data,... and you can view the
        available fields.</para>

        <para>If you get really stuck you can download an example layerVha.xml
        <ulink url="files/realworldexample/layerVha.xml">right
        here</ulink>.</para>
      </listitem>

      <listitem>
        <para>Note that if your layer is a MULTIPOINT or a POINT layer you
        must define a symbol.<figure>
            <title>Create a symbol for MULTIPOINT or POINT layers</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/realworldexample/symbol.png"
                           width="-" />
              </imageobject>
            </mediaobject>
          </figure></para>
      </listitem>
    </orderedlist>
  </section>

  <section id="rw-ma-pg">
    <title>Show your own PostGIS data in Geomajas</title>

    <para>In this section we are going to explain how to add a layer to your
    Geomajas showing some of your own shape files. The layer we will be
    creating has the name <code>EcdisLayer</code>.</para>

    <para>Ecdis files are provided as simple feature files. The first step we
    are going to do is convert these files to PostGIS. After this we will
    configure Geomajas to display our created PostGIS data using
    hibernate.</para>

    <orderedlist>
      <listitem>
        <para>Download Ecdis files (not available here).</para>
      </listitem>

      <listitem>
        <para>Be sure you have a PostgGIS database available.</para>
      </listitem>

      <listitem>
        <para>Install the ogr2ogr tool (this is included in FWTools). You can
        find this tool using Google.</para>
      </listitem>

      <listitem>
        <para>Use ogr2ogr in the following manner. Note that the csv files
        included in the zip must be visible to ogr2ogr.</para>

        <example>
          <title>Use ogr2ogr to convert Ecdis files to PostGIS</title>

          <para><programlisting>ogr2ogr.exe -f "PostgreSQL" "PG:dbname=ecdis user=postgres password=postgres host=localhost 
port=5432" Y:\1R5EK012.000 -append</programlisting></para>
        </example>
      </listitem>

      <listitem>
        <para>Check your PostGIS database (remember that you can use a tool
        like <ulink url="http://udig.refractions.net/">uDig</ulink> for
        this).</para>
      </listitem>

      <listitem>
        <para>Now modify
        <code>src/main/webapp/WEB-INF/applicationContext.xml</code></para>

        <orderedlist>
          <listitem>
            <para>Add appDataSource<figure>
                <title>Add appDataSource to applicationContext.xml</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/realworldexample/datasource_ecdis.png"
                               width="-" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>

          <listitem>
            <para>Add appSessionFactory<figure>
                <title>Add appSessionFactory to applicationContext.xml</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/realworldexample/sessionfactory_ecdis.png"
                               width="-" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>

          <listitem>
            <para>Add layer<figure>
                <title>Add hibernateEcdisLayer to the list of layers</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/realworldexample/layers_ecdis.png"
                               width="-" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>

          <listitem>
            <para>Add treeNode<figure>
                <title>Add hibernateEcdisLayer to the list of
                treeNodes</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/realworldexample/treenode_ecdis.png"
                               width="-" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>

          <listitem>
            <para>Add org.geomajas.configuration.client.ClientVectorLayerInfo
            bean<figure>
                <title>Add ClientVectorLayerInfo bean</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/realworldexample/bean_ecdis.png"
                               width="-" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Modify <code>src/main/webapp/WEB-INF/web.xml (please remove the
        "be/fks/shapeinmem/" from the displayed text)</code><figure>
            <title>Enable PostgisDialect</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/realworldexample/webxml_ecdis1.png"
                           width="-" />
              </imageobject>
            </mediaobject>
          </figure><figure>
            <title>Add a reference to layerEcdis.xml in your web.xml</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/realworldexample/webxml_ecdis2.png"
                           width="-" />
              </imageobject>
            </mediaobject>
          </figure></para>
      </listitem>

      <listitem>
        <para>Create <code>src/main/webapp/WEB-INF/layerEcdis.xml</code>. Base
        yourself on an example layer file using Hibernate.</para>

        <para>Use a tool like <ulink
        url="http://udig.refractions.net/">uDig</ulink> to help you. With uDig
        you can view shape files, PostGIS data,... and you can view all
        available fields.</para>

        <para>If you get really stuck you can download an example
        layerEcdis.xml <ulink
        url="files/realworldexample/layerEcdis.xml">right here</ulink>.</para>
      </listitem>
    </orderedlist>
  </section>

  <section id="rw-ma-wms">
    <title>Show your own WMS map using Geomajas</title>

    <para>Note that the WMS used in this example is a password protected WMS.
    Due to privacy reasons the login details are excluded from this example.
    Please use your own or a public WMS server to test out this part of the
    guide.</para>

    <orderedlist>
      <listitem>
        <para>Modify
        <code>src/main/webapp/WEB-INF/applicationContext.xml</code></para>

        <orderedlist>
          <listitem>
            <para>Add layer wmsAgivLayer just as you did in the previous 2
            examples.</para>
          </listitem>

          <listitem>
            <para>Add treeNode just as you did in the previous 2
            examples.</para>
          </listitem>

          <listitem>
            <para>Add org.geomajas.configuration.client.ClientRasterLayerInfo
            bean<figure>
                <title>Add ClientVectorLayerInfo bean</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/realworldexample/bean_agiv.png"
                               width="-" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Modify <code>src/main/webapp/WEB-INF/web.xml. </code></para>

        <para>Add a reference to layerWmsAgiv.xml in your web.xml just like
        you did in the previous 2 examples.</para>
      </listitem>

      <listitem>
        <para>Create
        <code>src/main/resources/be/fks/shapeinmem/</code>layerWmsAgiv.xml</para>

        <orderedlist>
          <listitem>
            <para>baseWmsUrl : The link to the capabilities file but without
            all the extra parameters</para>
          </listitem>

          <listitem>
            <para>dataSourceName : This must contain a name of the layer
            (names of the layers can be found in the capabilities file of the
            WMS server)</para>
          </listitem>

          <listitem>
            <para>org.geomajas.geometry.Bbox : This can be derived from the
            capabilities file of the WMS server</para>
          </listitem>

          <listitem>
            <para>Now you can also add extra parameters. In our example we set
            transparent to true and do some other things. Note that the WMS
            must understand the parameters you try to use (possible parameters
            can be derived from the capabilities file).</para>
          </listitem>
        </orderedlist>

        <para>You can download an example layerWmsAgiv.xml file <ulink
        url="realworldexample/layerWmsAgiv.xml">right here</ulink>. Note that
        as said before the login details are excluded from this example due to
        privacy reasons. This renders this example file useless. Please use
        your own, or a public WMS server to test out this part of the
        guide.</para>
      </listitem>
    </orderedlist>
  </section>

  <section id="rw-ma-soap">
    <title>Show locations of vessels using SOAP</title>

    <para>Geomajas doesn't have any native SOAP support implemented. So what
    you need to is create a normal GWT servlet which does the SOAP handling
    and sends information back to the client about the locations of the
    vessels. Finally at the Geomajas client side you can display these
    vessels.</para>

    <para>The following steps should be taken :</para>

    <orderedlist>
      <listitem>
        <para>Create a servlet requesting the needed information using SOAP.
        Note that if you are using any special external jars you need to add
        those to the class path in eclipse, and to the maven class
        path.</para>
      </listitem>

      <listitem>
        <para>At the client side display the location of the vessels using an
        image.</para>

        <para>First we load the positions of the vessels and put all the
        requested information inside a List imgVesselPos. Initially we give
        the images a size of 0,0. This is because in Geomajas images resize
        when the user zooms. In the next step we will create size the images
        depending on the zoom level</para>

        <figure>
          <title>Show vessels using an Image marker.png</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/realworldexample/soapfetch.png"
                         width="-" />
            </imageobject>
          </mediaobject>
        </figure>
      </listitem>

      <listitem>
        <para>In <code>OnMapModelChange()</code> (called every time a user
        zooms) we resize the images to the correct size depending on the
        current zoom level.<figure>
            <title>Resize the images depending on the zoom level</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/realworldexample/soapzoom.png"
                           width="-" />
              </imageobject>
            </mediaobject>
          </figure></para>
      </listitem>

      <listitem>
        <para>Finally we create a controller. This controller shows some extra
        information to the user when the user clicks on a vessel.</para>

        <para>In reality the controller is on the map (because you can't add a
        controller to an image). When clicked a check is performed to see if a
        vessel is at the location of the click.<figure>
            <title>Controller that shows extra information about a clicked
            vessel</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/realworldexample/soapcontroller.png"
                           width="-" />
              </imageobject>
            </mediaobject>
          </figure></para>
      </listitem>
    </orderedlist>
  </section>

  <section id="rw-ma-linfo">
    <title>Show information about a lock using FacililyXML</title>

    <para>FacilityXML documents are XML documents containing information about
    locks in Belgium. The goal was that when the user clicked on a lock in a
    certain layer the correct FacilityXML document was requested from the
    server and shown to the user in a nicely formatted way. The formatting is
    done using an XSL transformation.</para>

    <para>Since the requesting of the XML and the XSL transformations isn't
    part of Geomajas this will not be discussed here. What will be show
    however is how you can add a listener to a layer and use data from the
    selected feature.</para>

    <figure>
      <title>Controller that shows extra information about a clicked
      vessel</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/realworldexample/facility.png" width="-" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="rw-ma-user">
    <title>User management</title>

    <orderedlist>
      <listitem>
        <para>Create src\main\resources\be\fks\shapeinmem\security.xml
        (download an example <ulink
        url="files/realworldexample/security.xml">right here</ulink>). This is
        the file inside which you configure the users and what they are
        allowed to access.</para>
      </listitem>

      <listitem>
        <para>Add a reference to security.xml to the web.xml just like you
        would do for a normal layer.</para>
      </listitem>

      <listitem>
        <para>Add dependencies in pom.xml<figure>
            <title>Security pom.xml</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/realworldexample/securitypom.png"
                           width="-" />
              </imageobject>
            </mediaobject>
          </figure></para>
      </listitem>

      <listitem>
        <para>Inherit security in the gwt.xml of the project.<figure>
            <title>Security inherit</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/realworldexample/securitygwtxml.png"
                           width="-" />
              </imageobject>
            </mediaobject>
          </figure></para>
      </listitem>

      <listitem>
        <para>To assure that a security token is obtained when needed, you
        should register a token request handler in the
        <code>GwtCommandDispatcher</code>. A good candidate is using the
        <code>StaticSecurityTokenRequestHandler</code>.</para>
      </listitem>
    </orderedlist>
  </section>
</chapter>
