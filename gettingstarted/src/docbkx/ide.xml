<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2012 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="ide">
  <title>Using Geomajas in your IDE of choice</title>

  <para>This chapter is aimed at Java developers that whish to import the
  Geomajas project in their favourite IDE and start programming. The use of an
  IDE is not really required if you only want to configure layers, styles,
  etc.</para>

  <section id="eclipse">
    <title>Eclipse</title>

    <para>The combination of Eclipse, maven and GWT is not quite trivial,
    especially for advanced multi-module projects like Geomajas. There are 2
    approaches possible for integrating eclipse with maven:</para>

    <itemizedlist>
      <listitem>
        <para>Eclipse plug-in for maven, avoiding the use of the maven
        command-line interface: m2eclipse (<ulink
        url="http://m2eclipse.sonatype.org/">http://m2eclipse.sonatype.org/</ulink>)
        is the most mature project here</para>
      </listitem>

      <listitem>
        <para>Maven plug-in to generate eclipse project configurations:
        maven-eclipse-plugin (<ulink
        url="http://maven.apache.org/plugins/maven-eclipse-plugin/">http://maven.apache.org/plugins/maven-eclipse-plugin/</ulink>)</para>
      </listitem>
    </itemizedlist>

    <para>It is clear that an IDE integrated solution like m2eclipse offers
    considerable advantages over manually generating Eclipse project
    configurations:</para>

    <itemizedlist>
      <listitem>
        <para>direct import of maven projects</para>
      </listitem>

      <listitem>
        <para>support for maven properties and filtering</para>
      </listitem>

      <listitem>
        <para>In-place editing of poms</para>
      </listitem>

      <listitem>
        <para>full dependency support</para>
      </listitem>
    </itemizedlist>

    <para>For a functional Geomajas setup, the following Eclipse plug-ins
    should be installed on a fresh Galileo download (<ulink
    url="http://www.eclipse.org/downloads/">http://www.eclipse.org/downloads/</ulink>):</para>

    <itemizedlist>
      <listitem>
        <para>m2eclipse: update site
        http://m2eclipse.sonatype.org/sites/m2e</para>
      </listitem>

      <listitem>
        <para>m2eclipse extras (especially WTP extension):
        http://m2eclipse.sonatype.org/sites/m2e-extras</para>
      </listitem>

      <listitem>
        <para>checkstyle: update site http://eclipse-cs.sf.net/update/</para>
      </listitem>

      <listitem>
        <para>SVN team provider: update site
        http://download.eclipse.org/releases/helios, choose Collaboration
        -&gt;Subversive SVN Team Provider (Incubation)</para>
      </listitem>

      <listitem>
        <para>Google's GWT Eclipse plug-in:
        http://dl.google.com/eclipse/plugin/3.6 (Plugin and SDK)</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Running/debugging with the Google Plug-in for Eclipse (embedded
      Jetty option)</title>

      <para>There is a classpath issue with the Google Plug-in for Eclipse
      (GPE) that prevents us from using it in a reliable way when there are
      multiple versions of artifacts in the maven dependency tree:<ulink
      url="http://code.google.com/p/google-web-toolkit/issues/detail?id=5033">
      http://code.google.com/p/google-web-toolkit/issues/detail?id=5033</ulink></para>

      <para>On top of that, GPE forces the use of the built-in jetty launcher,
      which has problems with loading libraries from the maven repository.
      Recent development by Google points in the direction of better maven
      support, but a as far as we know a stable solution which does not
      require explicit user interaction is not available. (see <ulink
      url="http://googlewebtoolkit.blogspot.com/2010/08/how-to-use-google-plugin-for-eclipse.html">http://googlewebtoolkit.blogspot.com/2010/08/how-to-use-google-plugin-for-eclipse.html</ulink>).</para>

      <para>In view of these problems, the following workaround seems to be
      the most reliable way of using the GWT plugin for us:</para>

      <itemizedlist>
        <listitem>
          <para>Run the GWT plug-in with the no-server option (this can be
          done straight from the project since GWT 2.1</para>
        </listitem>

        <listitem>
          <para>Run an embedded Jetty server to replace the GWT server</para>
        </listitem>
      </itemizedlist>

      <para>The following series of steps have to be performed to achieve a
      working project.</para>

      <itemizedlist>
        <listitem>
          <para>Import the project as a maven project</para>

          <figure>
            <title>Import project as Maven project</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-wtp-import.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>After the project has been imported and the workspace has been
          built, you should now manually mark the project as a GWT project in
          the project properties dialog. Open the Google -&gt; Web Toolkit
          section and mark the checkbox. If the eclipse GWT version differs
          from the project version, the "Use specific SDK" checkbox will be
          enabled:</para>

          <figure>
            <title>Eclipse project properties dialog, Google Web
            Toolkit</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-gwt-modules.png"
                           width="60%"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>In the Google -&gt; Web Application section, the WAR directory
          should be changed to the default maven war sources directory
          (src/main/webapp)<figure>
              <title>Eclipse project properties dialog, Google Web
              Application</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/eclipse-gwt-webapp.png"
                             width="70%"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </listitem>

        <listitem>
          <para>Open the debug configurations dialog and create a new Java
          application:</para>

          <figure>
            <title>Debug configurations dialog</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-debug-configurations.png"
                           width="60%"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>Search for JettyRunner as the main class. JettyRunner is a
          specially prepared main class that starts up Jetty with the correct
          parameters (port 8888 and src/main/webapp as webapp
          directory)</para>

          <figure>
            <title>JettyRunner as main class</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-jetty-runner.png"
                           width="60%"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>Run the new Jetty server configuration (in debug mode):</para>

          <figure>
            <title>Running Jetty</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-jetty-console.png"
                           width="50%"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>Now, run the GWT plug-in in no-server mode by by
          right-clicking on the project and selecting Debug As -&gt; Web
          Application (running on an external server):</para>

          <figure>
            <title>Running the GWT application</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-gwt-debug.png"
                           width="70%"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <para>Click ok on the dialog screen</para>
        </listitem>

        <listitem>
          <para>You can now add breakpoints and debug your application as if
          it was a normal Java application.</para>
        </listitem>

        <listitem>
          <para>If you have multiple versions of GWT in your project
          workspace, make sure that the gwt-dev jar is in front of the default
          classpath (reported GWT issue):</para>

          <figure>
            <title>Classpath of GWT plug-in (no-server mode)</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/eclipse-gwt-runner-classpath.png"
                           width="60%"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
      </itemizedlist>
    </section>

    <section id="eclipwtp">
      <title>Running/debugging with the Google Plug-in for Eclipse</title>

      <para>If you want to run your application directly with GPE, some extra
      actions are needed to avoid classpath problems. You will have to change
      your web.xml by adding a special context listener that allows Spring
      component scanning and circumvents a GeoTools problem with the builtin
      Jetty classloader:</para>

      <programlisting>&lt;listener&gt;
 &lt;listener-class&gt;org.geomajas.servlet.PrepareScanningContextListener&lt;/listener-class&gt;
&lt;/listener&gt;</programlisting>

      <para>This solves most of the classpath problems but does not cure the
      problem of having multiple artifact versions in the classpath! This is
      usually only a problem when you have several Geomajas projects opened in
      your workspace. If this is the case, run the GWT plug-in with an
      embedded Jetty server as explained in the previous chapter and you
      should be fine. Note that this should be the first listener in your
      web.xm files, before the spring listeners.</para>

      <para>The following steps are needed to run GPE directly:</para>

      <para><itemizedlist>
          <listitem>
            <para>Follow the configuration steps of the indirect mode, right
            up to the Jetty part</para>
          </listitem>

          <listitem>
            <para>Run the project as a GWT Web application by right-clicking
            on the project and selecting <code>Run as -&gt; Web
            Application</code>.</para>
          </listitem>

          <listitem>
            <para>For debugging, debug the project as a GWT Web application by
            right-clicking on the project and selecting <code>Debug as -&gt;
            Web Application</code>.</para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>

  <section id="idea">
    <title>IntelliJ IDEA</title>

    <para>The setup in IntelliJ IDEA is quite straightforward and does not
    require running a separate Maven command. Just open the project from IDEA
    by selecting the pom in the root directory.</para>

    <figure>
      <title>Open project using pom</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/IDEA-open-project.png"
                     width="50%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>IDEA will recognize this as a GWT project and assign the correct
    facet but as always you will have to make your own run configuration
    (which is fortunately trivial). You will need version 9.0 or later for the
    GWT 2.0 support.</para>

    <figure>
      <title>IDEA GWT run configuration</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/IDEA-run-configuration.png"
                     width="90%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Before being able to use this configuration, you need to invoke the
    gwt:i18n Maven target to assure the files which are used for
    internationalisation are available (otherwise, you will get compilation
    errors). You can do this from the "Maven projects" tab.</para>

    <figure>
      <title>run gwt:i18 target</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/IDEA-maven-targets.png"
                     width="60%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Some additional settings have to be done in the "project structure"
    dialog. Apart from specifying the GWT installation directory, there is a
    specific project setting which has to be done manually, which is setting
    the target Web facet to "Web". The project structure for the simple GWT
    project should look as follows:</para>

    <figure>
      <title>Project structure for simple GWT project</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/IDEA-project-structure.png"
                     width="80%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>After this, you should be able to run the project. Any changes in
    the source code will be automatically detected, and debugging is
    possible.</para>

    <note>
      <para>When creating GWT run configurations, it is recommended to
      increase the amount of memory given to the process. You can do this by
      entering a higher -Xmx value in the VM parameters field, for example
      "-Xmx768m".</para>
    </note>
  </section>

  <section id="netbeans">
    <title>NetBeans</title>

    <para>You can both create the project from the archetype or open directly
    the Maven project in NetBeans. See <ulink
    url="http://wiki.netbeans.org/MavenBestPractices">http://wiki.netbeans.org/MavenBestPractices</ulink>
    for more details.</para>
  </section>
</chapter>
